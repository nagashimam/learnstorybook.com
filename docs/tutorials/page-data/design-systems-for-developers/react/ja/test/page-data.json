{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ja/test/","result":{"data":{"currentPage":{"html":"<p>第 5 章では、UI バグを防ぐためにデザインシステムのテストを自動化します。本章で UI コンポーネントのどのような特徴がテストを保証するのか、潜在的な落とし穴を避けるのかについて掘り下げます。包括的なカバレッジ、分かりやすいセットアップ、コストの低いメンテナンスに釣り合いを取るテスト戦略をそれぞれ手に入れるため Wave、BBC、Salesforce の専門家チームを調査しました。</p>\n<img src=\"/tutorials/design-systems-for-developers/ui-component.png\" width=\"250\">\n<h2>UI コンポーネントテストの基本</h2>\n<p>始める前に、テストの意味を理解しましょう。デザインシステムは UI コンポーネントで構成されています。各 UI コンポーネントはインプット (props) のセットを与えられ意図したルック＆フィールを記述するストーリー (順列) を含みます。ストーリーはそれからエンドユーザーのブラウザまたはデバイスで描画されます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-test-cases.png\" alt=\"Component states are combinatorial\"></p>\n<p>うわぁ！見ての通り、ひとつのコンポーネントに沢山の状態を含みます。デザインシステムコンポーネントの数に状態を掛け合わせると、なぜ全てを追跡することが大変苦しいタスクなのかが分かるでしょう。実際、手作業でそれぞれのユーザー体験をレビューすることは、特にデザインシステムが成長していくと、維持できないものです。</p>\n<p>だからこそ<strong>今</strong>テストの自動化をセットアップして<strong>未来</strong>の仕事を減らすことに意味があるのです。</p>\n<h2>テストの準備</h2>\n<p>私は<a href=\"https://www.chromatic.com/blog/the-delightful-storybook-workflow\">前の記事</a>で専門的な Storybook のワークフローについて 4 つのフロントエンドチームを調査しました。彼らはテストを簡単で包括的にするストーリーを書くため次のベストプラクティスに賛同してくれました。</p>\n<p><strong>サポートされたコンポーネントの状態を明確にすること</strong>はどの入力の組み合わせが与えられた状態を引き起こすのか明らかにします。 ノイズを避けるためにサポートされない状態をきっぱり省きます。</p>\n<p><strong>一貫してコンポーネントを描画すること</strong>はランダムな (Math.random()) または相対的な (Date.now()) 入力によりトリガーされる変異性を軽減します</p>\n<blockquote>\n<p>“最適なストーリーはコンポーネントが野生の中で遭遇しうる全てのコンポーネントの状態を提供することだ。” – Tim Hingston、Apollo GraphQL のテックリード</p>\n</blockquote>\n<h2>ビジュアルテストの外観</h2>\n<p>デザインシステムはプレゼンテーショナルなコンポーネントを含みます、それは本質的にビジュアルを含んだものです。ビジュアルテストは描画された UI の視覚的な側面を検証します。</p>\n<p>ビジュアルテストは一貫したブラウザ環境で各コンポーネントのイメージをキャプチャします。新しいスクリーンショットは前に受け入れられた基準のスクリーンショットと自動的に比較されます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-visual-testing.gif\" alt=\"Visual test components\"></p>\n<p>もしあなたがモダンな UI を構築しているなら、ビジュアルテストは時間を浪費する手作業のレビューからフロントエンドチームを助けコストの高い UI のリグレッションを防ぎます。</p>\n<p><a href=\"https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/#publish-storybook\">前の章</a>で <a href=\"https://www.chromatic.com/\">Chromatic</a> を使って Storybook を配信する方法を学びました。各<code>Button</code>コンポーネントの周りに太い赤線を加えそれからチームメイトからのフィードバックをリクエストしました。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-button-border-change.png\" alt=\"Button red border\"></p>\n<p>これから Chromatic にビルトインされている<a href=\"https://www.chromatic.com/features/test\">テストツール</a>を使ったビジュアルテストがどう働くか見てみましょう。プルリクエストを作成したら、Chromatic は変更内容のイメージをキャプチャし同じコンポーネントの前のバージョンと比較しました。4 つの変更点が見つかりました:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-list-of-checks.png\" alt=\"List of checks in the pull request\"></p>\n<p><strong>🟡 UI Tests</strong>をクリックしてレビューしましょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-second-build-from-pr.png\" alt=\"Second build in Chromatic with changes\"></p>\n<p>変更点が意図的なもの (改善) なのか意図しないもの (バグ) なのか確認のためにレビューしましょう。変更点を受け入れたら、テスト基準が更新されます。それは後続のコミットがバグを見つけるために新しい基準と比較されることを意味します。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-review-changes-pr.png\" alt=\"Reviewing changes in Chromatic\"></p>\n<p>前の章で、チームメイトが何らかの理由で <code>Button</code> の周りに赤い線を引くことを望みませんでした。元に戻す必要があることを示すために変更を否決しましょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-review-deny.png\" alt=\"Review deny in Chromatic\"></p>\n<p>変更を取り消し再度ビジュアルテストを通すために再コミットしましょう。</p>\n<h2>ユニットテストの役割</h2>\n<p>ユニットテストは UI コードが制御されたインプットを与えられて正しいアウトプットを返すかどうかを検証します。ユニットテストはコンポーネントに沿って特定の機能性を検証する手助けをします。</p>\n<p>React、Vue、Angular のようなモダンなビューレイヤーにおいて全てはコンポーネントです。コンポーネントは地味なボタンから凝ったデートピッカーまで様々な機能性をカプセル化します。コンポーネントが複雑になればなるほど、ビジュアルテストだけで差異を捕捉するのに手こずります。だからユニットテストが必要なのです。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-unit-testing.gif\" alt=\"Unit test components\"></p>\n<p>例えば、私たちの Link コンポーネントはリンク URL を生成するシステム (ReactRouter、Gatsby、Next.js の「LinkWrapper」) と組み合わせると少し複雑です。実装のミスが href に不正な値が入っているリンクを生み出す可能性があります。</p>\n<p>視覚的に、<code>href</code>属性が存在し、正しい場所を指しているか見るのは不可能です、それがユニットテストがリグレッションを避けるために適切になり得る理由です。</p>\n<h4>href のユニットテスト</h4>\n<p><code>Link</code>コンポーネントにユニットテストを追加しましょう。 <a href=\"https://create-react-app.dev/\">Create React App</a> はすでにユニットテストの環境をセットアップしており、単純に<code>src/Link.test.js</code>ファイルを作成するだけでテストができます:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { render } from '@testing-library/react';\nimport { Link } from './Link';\n\ntest('has a href attribute when rendering with linkWrapper', () => {\n  // eslint-disable-next-line jsx-a11y/anchor-has-content\n  const LinkWrapper = props => <a {...props} />;\n  const { container } = render(\n    <Link href=&quot;https://storybook.js.org/tutorials/&quot; LinkWrapper={LinkWrapper}>\n      Link Text\n    </Link>\n  );\n\n  const linkElement = container.querySelector('a[href=&quot;https://storybook.js.org/tutorials/&quot;]');\n  expect(linkElement).not.toBeNull();\n  expect(linkElement.textContent).toEqual('Link Text');\n});`, `43887913158563130000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"43887913158563130000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Link.test.js</div>\n<pre><code class=\"language-js\">import { render } from '@testing-library/react';\nimport { Link } from './Link';\n\ntest('has a href attribute when rendering with linkWrapper', () => {\n  // eslint-disable-next-line jsx-a11y/anchor-has-content\n  const LinkWrapper = props => &#x3C;a {...props} />;\n  const { container } = render(\n    &#x3C;Link href=\"https://storybook.js.org/tutorials/\" LinkWrapper={LinkWrapper}>\n      Link Text\n    &#x3C;/Link>\n  );\n\n  const linkElement = container.querySelector('a[href=\"https://storybook.js.org/tutorials/\"]');\n  expect(linkElement).not.toBeNull();\n  expect(linkElement.textContent).toEqual('Link Text');\n});\n</code></pre>\n<p><code>yarn test</code>コマンドで上記ユニットテストを実行できます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/jest-test.png\" alt=\"Running a single Jest test\"></p>\n<p>事前に、Storybook をデプロイするために GitHub アクションを設定しました、そして今アクションにテストを含めるよう調整できます。貢献者はこのユニットテストから恩恵を受け、Link コンポーネントはリグレッションに対して強固なものとなるでしょう。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# ... Same as before\njobs:\n  test:\n    # The operating system it will run on\n    runs-on: ubuntu-latest\n    # The list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v1\n      - run: yarn\n     - run: yarn test # Adds the test command\n        #👇 Adds Chromatic as a step in the workflow\n      - uses: chromaui/action@v1\n        # Options required for Chromatic's GitHub Action\n        with:\n          #👇 Chromatic projectToken, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/ to obtain it\n          projectToken: project-token\n          token: \\${{ secrets.GITHUB_TOKEN }}`, `13901195027900991000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"13901195027900991000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.github/workflows/chromatic.yml</div>\n<pre><code class=\"language-diff\"># ... Same as before\njobs:\n  test:\n    # The operating system it will run on\n    runs-on: ubuntu-latest\n    # The list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v1\n      - run: yarn\n+     - run: yarn test # Adds the test command\n        #👇 Adds Chromatic as a step in the workflow\n      - uses: chromaui/action@v1\n        # Options required for Chromatic's GitHub Action\n        with:\n          #👇 Chromatic projectToken, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/ to obtain it\n          projectToken: project-token\n          token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/gh-action-with-test-successful-build.png\" alt=\"Successful circle build\"></p>\n<div class=\"aside\"> 💡 <strong>注意事項: </strong>更新が面倒になる多過ぎるユニットテストに注意してください。適度なデザインシステムのユニットテストを推奨します。</div>\n<blockquote>\n<p>\"私たちの高度に自動化されたテスト体制はデザインシステムチームがより自信を持って早く動けるよう力を与える。\" – Dan Green-Leipciger、Wave のシニアソフトウェアエンジニア</p>\n</blockquote>\n<h2>アクセシビリティテスト</h2>\n<p>「アクセシビリティが意味するのは全ての人が、障害を持つ人をふくめ、アプリを理解し、操作し、インタラクションできることだ...オンラインでは、タブキーとスクリーンリーダーでサイトを渡り歩くといったような、コンテンツにアクセスするための別の方法もある。」 と述べるのは開発者の <a href=\"https://medium.com/storybookjs/instant-accessibility-qa-linting-in-storybook-4a474b0f5347\">T.Rowe Price の Alex Wilson</a> です。</p>\n<p><a href=\"https://www.who.int/disabilities/world_report/2011/report/en/\">世界保健機構</a>によると人口の 15 パーセントが障害の影響を受けています。デザインシステムはユーザーインターフェースの構築ブロックを含むためアクセシビリティに大きな影響があります。たった一つのコンポーネントのアクセシビリティを改善するだけで、会社全体にわたって、そのコンポーネントのすべてのインスタンスに利があります。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-accessibility-addon.png\" alt=\"Storybook accessibility addon\"></p>\n<p>リアルタイムに Web のアクセシビリティ標準 (WCAG) を検証するツールである Storybook の Accessibility アドオンを使って包括的な UI において優位に立ちましょう。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @storybook/addon-a11y\n`, `58901164169485360000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"58901164169485360000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @storybook/addon-a11y\n\n</code></pre>\n<p><code>.storybook/main.js</code>にアドオンを追加します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n   '@storybook/addon-a11y',\n    '@storybook/addon-interactions',\n  ],\n  framework: '@storybook/react',\n  staticDirs: ['../public'],\n};`, `53058524473925430000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"53058524473925430000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-diff\">module.exports = {\n  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n+   '@storybook/addon-a11y',\n    '@storybook/addon-interactions',\n  ],\n  framework: '@storybook/react',\n  staticDirs: ['../public'],\n};\n</code></pre>\n<p><code>.storybook/preview.js</code>の<a href=\"https://storybook.js.org/docs/react/writing-stories/parameters\">パラメータ</a>を更新して次の<code>a11y</code>設定を追加します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`\nimport React from 'react';\n\nimport { GlobalStyle } from '../src/shared/global';\n\n/*\n* More on Storybook global decorators at:\n* https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n*/\nexport const decorators = [\n  Story => (\n    <>\n      <GlobalStyle />\n      <Story />\n    </>\n  ),\n];\n\n/*\n* More on Storybook global parameters at:\n* https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n*/\n export const parameters = {\n   actions: { argTypesRegex: '^on[A-Z].*' },\n   // Storybook a11y addon configuration\n   a11y: {\n     // the target DOM element\n     element: '#root',\n     // sets the execution mode for the addon\n     manual: false,\n   },\n };`, `53946226710732660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"53946226710732660000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-diff\">\nimport React from 'react';\n\nimport { GlobalStyle } from '../src/shared/global';\n\n/*\n* More on Storybook global decorators at:\n* https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n*/\nexport const decorators = [\n  Story => (\n    &#x3C;>\n      &#x3C;GlobalStyle />\n      &#x3C;Story />\n    &#x3C;/>\n  ),\n];\n\n/*\n* More on Storybook global parameters at:\n* https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n*/\n+ export const parameters = {\n+   actions: { argTypesRegex: '^on[A-Z].*' },\n+   // Storybook a11y addon configuration\n+   a11y: {\n+     // the target DOM element\n+     element: '#root',\n+     // sets the execution mode for the addon\n+     manual: false,\n+   },\n+ };\n</code></pre>\n<p>全てセットアップすると、Storybook のアドオンパネルに新しく「Accessibility」タブが見えます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-a11y-6-0.png\" alt=\"Storybook a11y addon\"></p>\n<p>そこに DOM エレメントのアクセシビリティレベル [Violations (違反) と Passes (合格)] を表示します。「Highlight results」チェックボックスを押して UI コンポーネントがある場所に違反を表示します。</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-addon-a11y-6-0-highlighted.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>ここから、アドオンのアクセシビリティの推奨に従いましょう。</p>\n<h2>その他のテスト戦略</h2>\n<p>逆説的ですが、テストは時間を節約できますが、その保守により開発速度は停滞します。すべてではなく、適切なものをテストするよう判断しましょう。ソフトウェア開発には多くのテスト手法がありますが、いくつかはデザインシステムに合わないことを痛感しました。</p>\n<h4>スナップショットテスト (Jest)</h4>\n<p>これは UI コンポーネントのコード出力をキャプチャし前のバージョンと比較するテクニックです。UI コンポーネントのマークアップのテストは実装の詳細 (コード) をテストすることになります、ブラウザでユーザー体験をテストするものではありません。</p>\n<p>コードスナップショットの差分は予測不可能で擬陽性になる傾向があります。コンポーネントレベルで、コードのスナップショットはデザイントークン、CSS、サードパーティの API の更新 (Web フォント、Stripe フォーム、Google マップ、等) のような全体的な変更の理由を説明するものではありません。実際には、開発者は「全て承認する」かスナップショットテストを完全に無視することになります。</p>\n<blockquote>\n<p>多くのコンポーネントスナップショットテストは実際スクリーンショットテストの悪いバージョンだ。アウトプットをテストしよう。描画したスナップショットで、背後にある (気まぐれな！) マークアップではなく。 – Mark Dalgliesh、SEEK のフロントエンド基盤、CSS モジュールのクリエイター</p>\n</blockquote>\n<h4>エンドツーエンドテスト (Selenium、Cypress)</h4>\n<p>エンドツーエンドテストはユーザーフローをシミュレートするためにコンポーネントを行き来します。サインアップやチェックアウトのプロセスのようなアプリのフローを検証するのに最も適しています。機能が複雑になればなるほど、このテスト戦略は役に立ちます。</p>\n<p>デザインシステムは比較的簡単な機能を持った Atomic コンポーネントを含みます。ユーザーフローの検証はテストに時間を使いすぎメンテナンスしづらいため、タスクの割にしばしば過剰になります。しかしながら、まれな状況において、コンポーネントはエンドツーエンドテストの恩恵を受けられるかもしれません。たとえば、デートピッカーや自前の支払いフォームのような複雑な UI コンポーネントを検証する場合です。</p>\n<h2>ドキュメンテーションで採用を推進する</h2>\n<p>デザインシステムはテストだけでは完全ではありません。組織を横断してデザインシステムをステークホルダーに提供するため、よくテストされた UI コンポーネントから最大限に活用する方法を教える必要があります。</p>\n<p>第 6 章では、ドキュメンテーションによりデザインシステムの採用を加速させる方法を学びます。なぜ Storybook Docs が労力をかけず、網羅的なドキュメントを作成するための秘密兵器なのか理解を深めていきましょう。</p>","frontmatter":{"title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法","commit":"5f69e5c"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/test/","chapter":"test","framework":"react","language":"ja","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ja/test/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/test/","framework":"react","language":"ja","chapter":"test","pageType":"chapter"}},"staticQueryHashes":["238248339"]}