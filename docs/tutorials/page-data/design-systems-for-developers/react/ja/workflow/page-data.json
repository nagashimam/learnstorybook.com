{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ja/workflow/","result":{"data":{"currentPage":{"html":"<p>いかにフロントエンドのツール群を使いこなすかは、デザインと開発チームが実現しうる究極の価値に大きく影響します。上手くいくと、UI コンポーネントを開発し再利用することが円滑になるはずです。</p>\n<p>本章は AvatarList という新しいコンポーネントの導入によるワークフローの 5 つのステップを紹介します。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-workflow-horizontal.jpg\" alt=\"Design system workflow\"></p>\n<h2>ビルド</h2>\n<p><code>AvatarList</code> は複数のアバターを表示するコンポーネントです。他のデザインシステムのコンポーネントのように、<code>AvatarList</code> は数多くのプロジェクトで貼り付けられるところから始まりました。それがデザインシステムへ導入するには十分な理由です。当デモのため、コンポーネントが他のプロジェクトで開発され完成コードがすでにあるとしましょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/AvatarList.jpg\" alt=\"AvatarList\"></p>\n<p>最初に、この作業を追跡する新しいブランチを作成してください。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git checkout -b create-avatar-list-component`, `54370695678194950000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"54370695678194950000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git checkout -b create-avatar-list-component\n</code></pre>\n<p>あなたの PC に <code>AvatarList</code> コンポーネントとストーリーをダウンロードして <code>/src</code> ディレクトリに配置します:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/learnstorybook-design-system/716a4c22160eaeaabb8e2c78241f2807844deed0/src/AvatarList.js\">コンポーネントファイル</a></li>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/learnstorybook-design-system/716a4c22160eaeaabb8e2c78241f2807844deed0/src/AvatarList.stories.js\">ストーリーファイル</a></li>\n</ul>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-with-avatarlist-6-0.png\" alt=\"Storybook with AvatarList component\"></p>\n<div class=\"aside\">\n💡 Storybook は <code>*.stories.js</code> で終わるファイルを自動的に検知して設定し UI 上に表示します。\n</div>\n<p>いいですね！では <code>AvatarList</code> に支えられる各 UI の状態と関連付けましょう。見たところ、<code>AvatarList</code> が <code>small</code> と <code>loading</code> のような <code>Avatar</code> プロパティをいくつかサポートしているのは明らかです。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`export const SmallSize = Template.bind({});\nSmallSize.args = {\n  users: Short.args.users,\n  size: 'small',\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  loading: true,\n};`, `50688940329168200000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"50688940329168200000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.stories.js</div>\n<pre><code class=\"language-js\">export const SmallSize = Template.bind({});\nSmallSize.args = {\n  users: Short.args.users,\n  size: 'small',\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  loading: true,\n};\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-with-avatarlist-loading-6-0.png\" alt=\"Storybook with more AvatarList stories\"></p>\n<p>プロパティがリストなら、多数のアバターを表示するべきです。多数と少数のリストアイテムを表示するストーリーを追加しましょう。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`export const Ellipsized = Template.bind({});\nEllipsized.args = {\n  users: [\n    ...Short.args.users,\n    {\n      id: '3',\n      name: 'Zoltan Olah',\n      avatarUrl: 'https://avatars0.githubusercontent.com/u/81672',\n    },\n    {\n      id: '4',\n      name: 'Tim Hingston',\n      avatarUrl: 'https://avatars3.githubusercontent.com/u/1831709',\n    },\n  ],\n};\n\nexport const BigUserCount = Template.bind({});\nBigUserCount.args = {\n  users: Ellipsized.args.users,\n  userCount: 100,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  users: [],\n};`, `11217356765073893000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"11217356765073893000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.stories.js</div>\n<pre><code class=\"language-js\">export const Ellipsized = Template.bind({});\nEllipsized.args = {\n  users: [\n    ...Short.args.users,\n    {\n      id: '3',\n      name: 'Zoltan Olah',\n      avatarUrl: 'https://avatars0.githubusercontent.com/u/81672',\n    },\n    {\n      id: '4',\n      name: 'Tim Hingston',\n      avatarUrl: 'https://avatars3.githubusercontent.com/u/1831709',\n    },\n  ],\n};\n\nexport const BigUserCount = Template.bind({});\nBigUserCount.args = {\n  users: Ellipsized.args.users,\n  userCount: 100,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  users: [],\n};\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-with-all-avatarlist-stories-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>進んだものを保存してコミットします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git commit -am &quot;Added AvatarList and stories&quot;`, `30908117555979820000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"30908117555979820000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git commit -am \"Added AvatarList and stories\"\n</code></pre>\n<h2>ドキュメント</h2>\n<p>Storybook Docs のおかげで、最小限の労力でカスタマイズ可能なドキュメンテーションが手に入ります。他の人が Storybook Docs タブを参照して AvatarList の使い方を学ぶことを助けます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-minimal-avatarlist.png\" alt=\"Storybook docs with minimal AvatarList info\"></p>\n<p>最小限の価値あるドキュメント！ AvatarList に使い方の補足的な背景を提供してもう少し親近感を加えましょう。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/**\n * A list of Avatars, ellipsized to at most 3. Supports passing only a subset of the total user count.\n */\nexport function AvatarList({ loading, users, userCount, size, ...props }) {`, `19096414898324476000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"19096414898324476000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.js</div>\n<pre><code class=\"language-js\">/**\n * A list of Avatars, ellipsized to at most 3. Supports passing only a subset of the total user count.\n */\nexport function AvatarList({ loading, users, userCount, size, ...props }) {\n</code></pre>\n<p>サポートされるプロパティについていくつか補足的な詳細を書き散らします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`AvatarList.propTypes = {\n  /**\n   * Are we loading avatar data from the network?\n   */\n  loading: PropTypes.bool,\n  /**\n   * A (sub)-list of the users whose avatars we have data for. Note: only 3 will be displayed.\n   */\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      avatarUrl: PropTypes.string,\n    })\n  ),\n  /**\n   * The total number of users, if a subset is passed to \\`users\\`.\n   */\n  userCount: PropTypes.number,\n  /**\n   * AvatarList comes in four sizes. In most cases, you’ll be fine with \\`medium\\`.\n   */\n  size: PropTypes.oneOf(Object.keys(sizes)),\n};`, `2686577714556204000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"2686577714556204000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.js</div>\n<pre><code class=\"language-js\">AvatarList.propTypes = {\n  /**\n   * Are we loading avatar data from the network?\n   */\n  loading: PropTypes.bool,\n  /**\n   * A (sub)-list of the users whose avatars we have data for. Note: only 3 will be displayed.\n   */\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      avatarUrl: PropTypes.string,\n    })\n  ),\n  /**\n   * The total number of users, if a subset is passed to `users`.\n   */\n  userCount: PropTypes.number,\n  /**\n   * AvatarList comes in four sizes. In most cases, you’ll be fine with `medium`.\n   */\n  size: PropTypes.oneOf(Object.keys(sizes)),\n};\n</code></pre>\n<p>パイを食べるくらい簡単ですね！今のところ、この詳細の水準で十分です—後で MDX を使っていつでもカスタマイズできます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-full-avatarlist.png\" alt=\"Storybook docs with full AvatarList info\"></p>\n<p>ドキュメンテーションは面倒である必要はありません。自動化されたツールを使い、すぐにライティングに取りかかるために単調な作業を省きました。</p>\n<p>変更をコミットし GitHub へプッシュします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git commit -am &quot;Improved AvatarList docs&quot;`, `55902835406557650000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"55902835406557650000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git commit -am \"Improved AvatarList docs\"\n</code></pre>\n<h4>プルリクエストを作成する</h4>\n<p><code>AvatarList</code> ブランチを GitHub へプッシュしてプルリクエストを作成しましょう:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git push -u origin create-avatar-list-component`, `20038828006401954000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20038828006401954000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git push -u origin create-avatar-list-component\n</code></pre>\n<p>それから GitHub へ移動してプルリクエストをオープンします。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-pr-create-avatarlist.png\" alt=\"PR created in PR for AvatarList\"></p>\n<h2>レビュー</h2>\n<p>この時点で、<code>AvatarList</code> はデザインシステムに取り込む候補です。ステークホルダーは機能性と見た目が期待通りなのか確かめるためにコンポーネントをレビューしなければなりません。</p>\n<p>デザインシステムの Storybook はレビューをごく簡単にするそれぞれのプルリクエストを自動的に発行します。PR チェックまでスクロールしデプロイされた Storybook へのリンクを探してください。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes.png\" alt=\"PR check for deployed PR\"></p>\n<p>発行された Storybook で <code>AvatarList</code>を探してください。ローカルの Storybook と同じように見えるはずです。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/netlify-deployed-avatarlist-stories.png\" alt=\"AvatarList in Storybook online\"></p>\n<p>発行された Storybook はチームにとって共通の参照ポイントです。より早くフィードバックを得るために他のステークホルダーに <code>AvatarList</code> へのリンクをシェアしましょう。コードを読むことに取り掛かったり開発環境をセットアップしたりする必要がないのでチームはあなたを気に入るでしょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/visual-review-shipit.png\" alt=\"Looks good, ship it!\"></p>\n<p>多くのチームと合意に至るのはしばしば無駄な活動のように感じます。みんな開発環境を持たないで有効期限切れのコードを参照したり複数のツールをまたがりフィードバックを撒き散らします。オンラインで Storybook のレビューは URL を共有するだけの簡単なものになります。</p>\n<h2>テスト</h2>\n<p>私たちのテストパッケージはコミットのたびに裏で動いています。<code>AvatarList</code> はシンプルなプレゼンテーショナルコンポーネントのため、単体テストは必要ありません。しかし PR チェックを見れば、ビジュアルテストツールである Chromatic がすでにレビューが必要な変更を検知しています。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes.png\" alt=\"Chromatic changes on the GitHub PR check\"></p>\n<p>AvatarList は新しいため、まだビジュアルテストはありません。ストーリーそれぞれにテスト基準を追加する必要があります。ビジュアルテストの範囲を広げるために Chromatic で “new stories” を受け入れます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-avatarlist-changes.png\" alt=\"Chromatic changes to the AvatarList stories\"></p>\n<p>受け入れが完了すると、 Chromatic でビルドが通るでしょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-avatarlist-changes-accepted.png\" alt=\"Chromatic changes to the AvatarList stories accepted\"></p>\n<p>それから順次、GitHub で PR チェックが更新されます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes-accepted.png\" alt=\"Chromatic changes accepted on the GitHub PR check\"></p>\n<p>テストが首尾よく更新されました。今後、リグレッションがデザインシステムへ忍び込むのは難しいでしょう。</p>\n<h2>配布</h2>\n<p>デザインシステムに <code>AvatarList</code> を加えるプルリクエストをオープンしました。ストーリーを書いて、テストを通し、ドキュメンテーションがあります。ようやく、Auto と npm を用いてデザインシステムのパッケージを更新する準備が整いました。</p>\n<p>プルリクエストに <code>minor</code> ラベルを追加しましょう。これはマージの際 Auto にパッケージのマイナーバージョンの更新を伝えます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-pr-labelled.png\" alt=\"GitHub PR with labels\"></p>\n<p>さてプルリクエストをマージして、npm 上であなたのパッケージへ移動し、パッケージが更新されるまで数分待ちましょう。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/npm-published-package.png\" alt=\"Package published on npm\"></p>\n<p>上手くいきました！デザインシステムのパッケージが Github の快適さにより更新されました。コマンドラインを触ったり npm に手間取る必要は一切ありません。AvatarList を使い始めるためにサンプルアプリで <code>learnstorybook-design-system</code> の依存関係を更新しましょう。</p>\n<h2>旅の始まり</h2>\n<p><em>Design Systems for Developers</em> はあなた自身の開発が有利なスタートを切れるようプロのフロントエンドチームに使われるエンド・ツー・エンドのワークフローに焦点を当てました。デザインシステムの成長にともない、チームの求めに応じるためこれらのツールを追加、再編成、拡張してゆきましょう。</p>\n<p>第 9 章は完成したサンプルコード、参考資料、開発者からのよくある質問で締めくくります。</p>","frontmatter":{"title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要","commit":"9d13d12"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/workflow/","chapter":"workflow","framework":"react","language":"ja","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ja/workflow/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","language":"ja","chapter":"workflow","pageType":"chapter"}},"staticQueryHashes":["238248339"]}