{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ja/distribute/","result":{"data":{"currentPage":{"html":"<p>アーキテクチャの観点から、デザインシステムはさらに別のフロントエンドの依存関係です。moment や lodash のような人気の依存関係とまったく違いがありません。UI コンポーネントはコードであり、コードの再利用を基盤とした技術に頼ることができます。</p>\n<p>本章は UI コンポーネントのパッケージングから他のアプリへのインポートまでデザインシステムの配布をデモンストレーションします。またバージョニングとリリースを合理化する時間節約のテクニックも明らかにします。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation.png\" alt=\"Propagate components to sites\"></p>\n<h2>デザインシステムをパッケージ化する</h2>\n<p>組織はさまざまなアプリにまたがり数千もの UI コンポーネントを持っています。以前、私たちはデザインシステムに最も共通するコンポーネントを抽出しました。今度はそれらのコンポーネントをアプリへ再導入する必要があります。</p>\n<p>私たちのデザインシステムは Javascript のパッケージマネージャである npm を使って配布、バージョニング、依存関係をコントロールします。</p>\n<p>デザインシステムのパッケージングには多くの有効な手段があります。Lonely Planet、Auth0、Salesforce、GitHub、Microsoft のデザインシステムからアプローチの多様さがうかがえます。各コンポーネントを分割したパッケージとして配布する人がいれば、全てのコンポーネントを一つのパッケージで送り出す人もいます。</p>\n<p>初期のデザインシステムにとって、最も端的な手段はカプセル化した単一バージョンのパッケージを発行することです:</p>\n<ul>\n<li>🏗 共通 UI コンポーネント</li>\n<li>🎨 デザイントークン (別称、スタイル変数)</li>\n<li>📕 ドキュメンテーション</li>\n</ul>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-package.jpg\" alt=\"Package a design system\"></p>\n<h2>デザインシステムをエクスポートするために準備する</h2>\n<p>デザインシステムの起点として <a href=\"https://github.com/facebook/create-react-app\">Create React App</a> (CRA) を使ったため、まだ初期アプリの形跡が残っています。今からそれをきれいにしましょう。</p>\n<p>まず、README.md の内容をより説明的に更新します。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more in [Storybook tutorials](https://storybook.js.org/tutorials/).`, `28424840259333296000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"28424840259333296000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">README.md</div>\n<pre><code class=\"language-markdown\"># Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more in [Storybook tutorials](https://storybook.js.org/tutorials/).\n</code></pre>\n<p>それから、<code>src/index.js</code> ファイルを作成してデザインシステム向けに共通のエントリーポイントを作成しましょう。このファイルから、すべてのデザイントークンとコンポーネントをエクスポートします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import * as styles from './shared/styles';\nimport * as global from './shared/global';\nimport * as animation from './shared/animation';\nimport * as icons from './shared/icons';\n\nexport { styles, global, animation, icons };\n\nexport * from './Avatar';\nexport * from './Badge';\nexport * from './Button';\nexport * from './Icon';\nexport * from './Link';`, `46810423228000820000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"46810423228000820000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/index.js</div>\n<pre><code class=\"language-js\">import * as styles from './shared/styles';\nimport * as global from './shared/global';\nimport * as animation from './shared/animation';\nimport * as icons from './shared/icons';\n\nexport { styles, global, animation, icons };\n\nexport * from './Avatar';\nexport * from './Badge';\nexport * from './Button';\nexport * from './Icon';\nexport * from './Link';\n</code></pre>\n<p>いくつか追加の開発パッケージが必要で、ビルドプロセスの補助に <a href=\"https://www.npmjs.com/package/@babel/cli\"><code>@babel/cli</code></a> と <a href=\"https://www.npmjs.com/package/cross-env\"><code>cross-env</code></a> を使います。</p>\n<p>コマンドラインで、次のコマンドを実行します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @babel/cli cross-env`, `41646842171870580000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"41646842171870580000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @babel/cli cross-env\n</code></pre>\n<p>パッケージをインストールしたら、ビルドプロセスを実装する必要があります。</p>\n<p>ありがたいことに、Create React App (CRA) はすでにビルドプロセスを処理しています。既存の <code>build</code> スクリプトを使って <code>dist</code> ディレクトリへデザインシステムをビルドします:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`{\n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;cross-env BABEL_ENV=production babel src -d dist&quot;\n  }\n}`, `21032084926191575000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"21032084926191575000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">package.json</div>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"build\": \"cross-env BABEL_ENV=production babel src -d dist\"\n  }\n}\n</code></pre>\n<p>ビルドプロセスの実装にともない、微調整が必要です。<code>package.json</code> 内に <code>babel</code> キーを記載し次のように更新してください:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`{\n  &quot;babel&quot;: {\n    &quot;presets&quot;: [\n      [\n        &quot;react-app&quot;,\n        {\n          &quot;absoluteRuntime&quot;: false\n        }\n      ]\n    ]\n  }\n}`, `3782586329340609000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"3782586329340609000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">package.json</div>\n<pre><code class=\"language-json\">{\n  \"babel\": {\n    \"presets\": [\n      [\n        \"react-app\",\n        {\n          \"absoluteRuntime\": false\n        }\n      ]\n    ]\n  }\n}\n</code></pre>\n<p>これで <code>yarn build</code> を実行して <code>dist</code> ディレクトリへコードをビルドできます — <code>.gitignore</code> にこのディレクトリを加えるべきです、そうして誤ってコミットしないようにします:</p>\n<pre><code>// ..\ndist\n</code></pre>\n<h4>発行のためパッケージメタデータを追加する</h4>\n<p>パッケージの利用者が必要な情報を全て確認するために <code>package.json</code> に変更が必要です。最も簡単な方法は単純に <code>yarn init</code> — 発行のためにパッケージを初期化するコマンドを実行します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Initializes a scoped package\nyarn init --scope=@your-npm-username\n\nyarn init v1.22.5\nquestion name (learnstorybook-design-system): @your-npm-username/learnstorybook-design-system\nquestion version (0.1.0):\nquestion description (Learn Storybook design system):Storybook design systems tutorial\nquestion entry point (dist/index.js):\nquestion repository url (https://github.com/your-username/learnstorybook-design-system.git):\nquestion author (your-npm-username <your-email-address@email-provider.com>):\nquestion license (MIT):\nquestion private: no`, `39934412867676226000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"39934412867676226000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\"># Initializes a scoped package\nyarn init --scope=@your-npm-username\n\nyarn init v1.22.5\nquestion name (learnstorybook-design-system): @your-npm-username/learnstorybook-design-system\nquestion version (0.1.0):\nquestion description (Learn Storybook design system):Storybook design systems tutorial\nquestion entry point (dist/index.js):\nquestion repository url (https://github.com/your-username/learnstorybook-design-system.git):\nquestion author (your-npm-username &#x3C;your-email-address@email-provider.com>):\nquestion license (MIT):\nquestion private: no\n</code></pre>\n<p>コマンドはひと通り質問をします。いくつかは回答があらかじめ埋められており、その他は考える必要があります。npm のパッケージに固有の名前を選ぶ必要があります (<code>learnstorybook-design-system</code> は使用できないでしょう — <code>@your-npm-username/learnstorybook-design-system</code> が良い選択です) 。</p>\n<p>まとめると、質問の回答を受けて新しい値で <code>package.json</code> が更新されます:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`{\n  &quot;name&quot;: &quot;@your-npm-username/learnstorybook-design-system&quot;,\n  &quot;description&quot;: &quot;Storybook design systems tutorial&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;main&quot;: &quot;dist/index.js&quot;,\n  &quot;repository&quot;: &quot;https://github.com/your-username/learnstorybook-design-system.git&quot;\n  // ...\n}`, `65514764568507890000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"65514764568507890000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">package.json</div>\n<pre><code class=\"language-json\">{\n  \"name\": \"@your-npm-username/learnstorybook-design-system\",\n  \"description\": \"Storybook design systems tutorial\",\n  \"version\": \"0.1.0\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/index.js\",\n  \"repository\": \"https://github.com/your-username/learnstorybook-design-system.git\"\n  // ...\n}\n</code></pre>\n<div class=\"aside\">\n💡 説明を分かりやすくするため<a href=\"https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\">パッケージスコープ</a>には触れませんでした。スコープを利用すると別のユーザーや組織により作成された同じ名前のパッケージと衝突せずにパッケージを作成できます。\n</div>\n<p>さあパッケージを準備しました。これで初めて npm へパッケージを発行できます！</p>\n<h2>Auto を使ったリリース管理</h2>\n<p>npm へリリースを発行するため、私たちはまた変更を記述した変更履歴の更新、意味のあるバージョン番号の設定、リポジトリのコミットのバージョン番号とリンクさせる git タグの作成といったプロセスを使います。これら全てを補助するために、<a href=\"https://github.com/intuit/auto\">Auto</a> という特定の用途にデザインされたオープンソースツールを使います。</p>\n<p>Auto をインストールしましょう:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev auto`, `25897211012344300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"25897211012344300000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev auto\n</code></pre>\n<p>Auto はリリース管理まわりの各種共通タスクが使えるコマンドラインツールです。<a href=\"https://intuit.github.io/auto/\">ドキュメンテーションサイト</a>で Auto の詳細を学ぶことができます。</p>\n<h4>GitHub と npm のトークンを取得する</h4>\n<p>次のいくつかのステップで、Auto は GitHub 、npm とやり取りします。正しく動作させるために、パーソナルアクセストークンが必要です。GitHub は<a href=\"https://github.com/settings/tokens\">このページ</a>で発行されるトークンのうちひとつを取得することができます。トークンには <code>repo</code> スコープが必要です。</p>\n<p>npm は、こちらの URL でトークンを作成することができます: <a href=\"https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens\">https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens</a>.</p>\n<p>“Read and Publish” パーミッションが必要になるでしょう。</p>\n<p>プロジェクトの <code>.env</code> ファイルにトークンを追加しましょう:</p>\n<pre><code>GH_TOKEN=&#x3C;value you just got from GitHub>\nNPM_TOKEN=&#x3C;value you just got from npm>\n</code></pre>\n<p><code>.gitignore</code> に上記ファイルを追加することで、全てのユーザーに見えるオープンソースリポジトリへこの値をうっかりプッシュしないことを確実にします！これはきわめて重要です。他のメンテナーがローカルのパッケージを発行する必要がある場合 (後ほどプルリクエストがデフォルトブランチへマージされる時に自動的な発行を設定します)、このプロセスにしたがい彼ら自身の <code>.env</code> ファイルに設定するべきです:</p>\n<pre><code>dist\n.env\n</code></pre>\n<h4>GitHub にラベルを作成する</h4>\n<p>Auto で最初に必要なのは GitHub にラベルのセットを作成することです。 将来これらのラベルをパッケージの変更のさい (次の章を見てください) に使い、<code>auto</code> が実用的にパッケージのバージョンを更新し変更履歴とリリースノートを作らせることができます。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto create-labels`, `30368335929686307000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"30368335929686307000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-bash\">yarn auto create-labels\n</code></pre>\n<p>GitHub をチェックすると、<code>auto</code> が使わせたいラベルのセットが確認できます:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-auto-labels.png\" alt=\"Set of labels created on GitHub by auto\"></p>\n<p>マージする前に次のラベルのうちひとつを今後のプルリクエストすべてにタグ付けすべきです: <code>major</code>、<code>minor</code>、<code>patch</code>、<code>skip-release</code>、 <code>prerelease</code>、<code>internal</code>、<code>documentation</code></p>\n<h4>手動で Auto を用いて最初のリリースを発行する</h4>\n<p>この先、<code>auto</code> スクリプトを介して新しいバージョン番号を計算しますが、最初のリリースに向け、何をしているのか理解するために手動でコマンドを実行しましょう。最初の変更履歴のエントリーを生成します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto changelog`, `90276204465522200000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"90276204465522200000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn auto changelog\n</code></pre>\n<p>上記コマンドは現時点で作成した各コミットの長い変更履歴を生成します (それとデフォルトブランチにプッシュしてきた警告も生成します。これは近いうちに止めるべきでしょう)。</p>\n<p>自動生成された変更履歴があるのは便利ですが、見落としがないように、手動で編集してユーザーに最も役に立つ方法でメッセージを作成するのは良い考えです。この場合、ユーザーは開発過程のコミットをすべて知る必要はありません。最初の v0.1.0 バージョンのための良い簡潔なメッセージを作成しましょう (ただし変更は保持します):</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git reset HEAD^`, `13607067262736173000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"13607067262736173000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git reset HEAD^\n</code></pre>\n<p>それから変更履歴を更新してコミットしましょう:</p>\n<pre><code># v0.1.0 (Tue Mar 09 2021)\n\n- Created first version of the design system, with `Avatar`, `Badge`, `Button`, `Icon` and `Link` components.\n\n#### Authors: 1\n\n- [your-username](https://github.com/your-username)\n</code></pre>\n<p>変更履歴を git へ追加しましょう。<code>[skip ci]</code> を使って CI プラットフォームにこれらのコミットを無視していることに注意してください、でなければビルドと発行のループになってしまいます。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git add CHANGELOG.md\ngit commit -m &quot;Changelog for v0.1.0 [skip ci]&quot;`, `18971812230269157000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"18971812230269157000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git add CHANGELOG.md\ngit commit -m \"Changelog for v0.1.0 [skip ci]\"\n</code></pre>\n<p>これで発行できます:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`npm --allow-same-version version 0.1.0 -m &quot;Bump version to: %s [skip ci]&quot;\nnpm publish --access=public`, `23345698859888484000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"23345698859888484000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">npm --allow-same-version version 0.1.0 -m \"Bump version to: %s [skip ci]\"\nnpm publish --access=public\n</code></pre>\n<div class=\"aside\">\n💡 パッケージの発行に <a href=\"https://classic.yarnpkg.com/en/docs/cli/\">yarn</a> を使っている場合は、それに応じて適切なコマンドを調整することを忘れないでください。 \n</div>\n<p>そして Auto を使って GitHub 上にリリースを作成します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git push --follow-tags origin main\nyarn auto release`, `50045627882247630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"50045627882247630000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git push --follow-tags origin main\nyarn auto release\n</code></pre>\n<p>やりました！無事にパッケージを npm へ発行し GitHub にリリースを作成しました (幸運にも！)。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/npm-published-package.png\" alt=\"Package published on npm\"></p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-published-release.png\" alt=\"Release published to GitHub\"></p>\n<p>(なお、最初のリリースでは <code>auto</code> がリリースノートを自動生成しましたが、最初のバージョンで意味が分かるよう編集しました)。</p>\n<h4>Auto を利用するためにスクリプトを設定する</h4>\n<p>今後パッケージを発行したい時に同じプロセスを踏むために Auto を設定しましょう。次のスクリプトを <code>package.json</code> に追加します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`{\n  &quot;scripts&quot;: {\n    &quot;release&quot;: &quot;auto shipit --base-branch=main&quot;\n  }\n}`, `60975827638949020000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"60975827638949020000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">package.json</div>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"release\": \"auto shipit --base-branch=main\"\n  }\n}\n</code></pre>\n<p>これで、<code>yarn release</code> を実行すると、上で実行したすべてのステップ (自動生成された変更履歴の使用を除く) を自動で実行することになります。デフォルトブランチの全てのコミットが発行されます。</p>\n<p>おめでとうございます！デザインシステムのリリースを手動で発行するための基盤をセットアップしました。継続的インテグレーションでリリースを自動化する方法を学びましょう。</p>\n<h2>自動的にリリースを発行する</h2>\n<p>継続的インテグレーションには GitHub アクションを使います。しかし進める前に、先ほどの GitHub と NPM トークンを安全に格納して Actions がアクセスできるようにする必要があります。</p>\n<h4>GitHub Secrets にトークンを追加する</h4>\n<p>GitHub Secrets はリポジトリに機密情報の格納を許可します。ブラウザのウィンドウで、あなたの GitHub リポジトリを開きます。</p>\n<p>⚙️ 設定タブをクリックしてサイドバーのシークレットリンクをクリックします。以下の画面が表示されます:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-empty-secrets-page.png\" alt=\"Empty GitHub secrets page\"></p>\n<p><strong>New secret</strong> ボタンを押してください。名前に <code>NPM_TOKEN</code> を使い本章で先ほどの npm から取得したトークンを貼り付けます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-secrets-form-filled.png\" alt=\"Filled GitHub secrets form\"></p>\n<p>リポジトリに npm シークレットを追加すると、<code>secrets.NPM_TOKEN</code> でアクセスできるようになります。あなたの GitHub トークンに別のシークレットをセットアップする必要はありません。すべての GitHub ユーザーはアカウントに紐づく <code>secrets.GITHUB_TOKEN</code> を自動的に取得します。</p>\n<h4>GitHub アクションを使ってリリースを自動化する</h4>\n<p>プルリクエストをするたびに、デザインシステムを自動的に発行したいものです。先に<a href=\"https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/#publish-storybook\">Storybook の発行</a>で使った同じフォルダに <code>push.yml</code> という新しいファイルを作成し次の内容を追加します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Name of our action\nname: Release\n\n# The event that will trigger the action\non:\n  push:\n    branches: [main]\n\n# what the action will do\njobs:\n  release:\n    # The operating system it will run on\n    runs-on: ubuntu-latest\n    # This check needs to be in place to prevent a publish loop with auto and github actions\n    if: &quot;!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')&quot;\n    # The list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v2\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 12.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n      - name: Cache node modules\n        uses: actions/cache@v1\n        with:\n          path: node_modules\n          key: yarn-deps-\\${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            yarn-deps-\\${{ hashFiles('yarn.lock') }}\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n          #👇 npm token, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/distribute/ to obtain it\n          NPM_TOKEN: \\${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n          yarn release`, `17835714745916030000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"17835714745916030000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.github/workflows/push.yml</div>\n<pre><code class=\"language-yml\"># Name of our action\nname: Release\n\n# The event that will trigger the action\non:\n  push:\n    branches: [main]\n\n# what the action will do\njobs:\n  release:\n    # The operating system it will run on\n    runs-on: ubuntu-latest\n    # This check needs to be in place to prevent a publish loop with auto and github actions\n    if: \"!contains(github.event.head_commit.message, 'ci skip') &#x26;&#x26; !contains(github.event.head_commit.message, 'skip ci')\"\n    # The list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v2\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 12.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n      - name: Cache node modules\n        uses: actions/cache@v1\n        with:\n          path: node_modules\n          key: yarn-deps-${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            yarn-deps-${{ hashFiles('yarn.lock') }}\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          #👇 npm token, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/distribute/ to obtain it\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n          yarn release\n</code></pre>\n<p>保存してリモートリポジトリへ変更をコミットします。</p>\n<p>上手くいきました！これでデフォルトブランチへプルリクエストをマージするたび、自動的に新しいバージョンを発行し、追加したラベルによる適切なバージョン番号を加算します。</p>\n<div class=\"aside\">💡 成長するデザインシステムに役立つ多くの機能とインテグレーションのすべてをカバーしたわけではありません。<a href=\"https://github.com/intuit/auto\">こちらの</a>ドキュメントを参照してください。</div>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-import.png\" alt=\"Import the design system\"></p>\n<h2>アプリにデザインシステムをインポートする</h2>\n<p>これでデザインシステムがオンラインになったので、依存関係をインストールし UI コンポーネントを利用するのは簡単なことです。</p>\n<h4>サンプルアプリを取得する</h4>\n<p>このチュートリアルの最初で、React と Styled Components を含む人気のフロントエンドスタックを標準化しました。それはサンプルアプリもまたデザインシステムのすべての利点を得るために React と Styled Components を使う必要があることになります。</p>\n<div class=\"aside\">💡 Svelte や Webコンポーネントのような他の有望な手段がフレームワークに依存しない UI コンポーネントの出荷を可能にするかもしれません。しかし、それらは比較的新しく、文書化されておらず、また広く採用されていないため、まだこのガイドには含まれていません。</div>\n<p>サンプルアプリはコンポーネントから始まりページで終わる UI を下層から開発するためのアプリ開発手法である<a href=\"https://www.componentdriven.org/\">コンポーネント駆動開発</a>を促進するために Storybook を使います。デモの中で 2 つの Storybook を並行して実行します。ひとつはサンプルアプリでもう一つはデザインシステムです。</p>\n<p>次のコマンドを実行してサンプルアプリをセットアップします:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Clones the files locally\nnpx degit chromaui/learnstorybook-design-system-example-app example-app\n\ncd example-app\n\n# Install the dependencies\nyarn install\n\n## Start Storybook\nyarn storybook`, `79612201195993780000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"79612201195993780000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\"># Clones the files locally\nnpx degit chromaui/learnstorybook-design-system-example-app example-app\n\ncd example-app\n\n# Install the dependencies\nyarn install\n\n## Start Storybook\nyarn storybook\n</code></pre>\n<p>アプリが使うシンプルなコンポーネントのストーリーが表示され Storybook が実行されているのが確認できるはずです:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-starting-storybook-6-0.png\" alt=\"Initial storybook for example app\"></p>\n<h4>デザインシステムの統合</h4>\n<p>私たちのデザインシステムの Storybook を発行しました。それをサンプルアプリに追加しましょう。サンプルアプリの <code>.storybook/main.js</code> に次の内容を更新すればそれが可能になります:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`// .storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],\n refs: {\n   'design-system': {\n     title: 'My design system',\n     //👇 The url provided by Chromatic when it was deployed\n     url: 'https://your-published-url.chromatic.com',\n   },\n },\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n  ],\n  framework: '@storybook/react',\n  staticDirs: ['../public'],\n};`, `1058791802624869900`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"1058791802624869900\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-diff\">// .storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],\n+ refs: {\n+   'design-system': {\n+     title: 'My design system',\n+     //👇 The url provided by Chromatic when it was deployed\n+     url: 'https://your-published-url.chromatic.com',\n+   },\n+ },\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n  ],\n  framework: '@storybook/react',\n  staticDirs: ['../public'],\n};\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-composition-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<div class=\"aside\">\n💡 <code>refs</code>キーを<code>.storybook/main.js</code>に追加して、複数のStorybookをひとつに<a href=\"https://storybook.js.org/docs/react/workflows/storybook-composition\">構成</a>できます。これは複数のリポジトリに分散していたり、異なる技術スタックを使ったりするような大きなプロジェクトで作業する場合に便利です。\n</div>\n<p>これでサンプルアプリを開発中にデザインシステムのコンポーネントとドキュメントを閲覧することができます。機能開発のさいデザインシステムを公開することで開発者が独自に開発して時間を浪費することなく既存のコンポーネントを再利用する可能性を高めます。</p>\n<p>必要なものが揃いました、デザインシステムを追加し使う時です。ターミナルで次のコマンドを実行します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add @your-npm-username/learnstorybook-design-system`, `7588837765486422000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"7588837765486422000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add @your-npm-username/learnstorybook-design-system\n</code></pre>\n<p>デザインシステムで定義した同じグローバルスタイルを使う必要があります。そのため<a href=\"https://storybook.js.org/docs/react/configure/overview#configure-story-rendering\"><code>.storybook/preview.js</code></a>コンフィグファイルを更新し <a href=\"https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\">global decorator</a> を追加する必要があります。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\n// The styles imported from the design system.\nimport { global as designSystemGlobal } from '@your-npm-username/learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\n/*\n * Adds a global decorator to include the imported styles from the design system.\n * More on Storybook decorators at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\nexport const decorators = [\n  Story => (\n    <>\n      <GlobalStyle />\n      <Story />\n    </>\n  ),\n];\n/*\n * More on Storybook parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};`, `46788625704337750000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"46788625704337750000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\n// The styles imported from the design system.\nimport { global as designSystemGlobal } from '@your-npm-username/learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\n/*\n * Adds a global decorator to include the imported styles from the design system.\n * More on Storybook decorators at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\nexport const decorators = [\n  Story => (\n    &#x3C;>\n      &#x3C;GlobalStyle />\n      &#x3C;Story />\n    &#x3C;/>\n  ),\n];\n/*\n * More on Storybook parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-with-design-system-stories-6-0.png\" alt=\"Example app storybook with design system stories\"></p>\n<p>サンプルアプリの <code>UserItem</code> コンポーネントにデザインシステムの <code>Avatar</code> コンポーネントを使います。<code>UserItem</code> は名前とプロフィール写真を含むユーザーについての情報を描画します。</p>\n<p>エディターで、<code>src/components/UserItem.js</code> にある <code>UserItem</code> を開きます。また、Storybook の <code>UserItem</code> を選択して、これから行うコードの変更をホットモジュールリロードで即座に確認することができます。</p>\n<p>Avatar コンポーネントをインポートします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from '@your-npm-username/learnstorybook-design-system';`, `59826588516772560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"59826588516772560000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.js</div>\n<pre><code class=\"language-js\">import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n</code></pre>\n<p>ユーザー名のそばに Avatar を描画したいと思います。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport styled from 'styled-components';\n\n import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n\nconst Container = styled.div\\`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n\\`;\n\n\nconst Name = styled.span\\`\n  color: #333;\n  font-size: 16px;\n\\`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  <Container>\n   <Avatar username={name} src={avatarUrl} />\n    <Name>{name}</Name>\n  </Container>\n);`, `54310111976574160000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"54310111976574160000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\n\nimport styled from 'styled-components';\n\n+ import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n\nconst Container = styled.div`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n`;\n\n- const Avatar = styled.img`\n-   border: 1px solid black;\n-   width: 30px;\n-   height: 30px;\n-   margin-right: 0.5em;\n- `;\n\nconst Name = styled.span`\n  color: #333;\n  font-size: 16px;\n`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  &#x3C;Container>\n+   &#x3C;Avatar username={name} src={avatarUrl} />\n    &#x3C;Name>{name}&#x3C;/Name>\n  &#x3C;/Container>\n);\n</code></pre>\n<p>保存すると、Storybook の <code>UserItem</code> コンポーネントが更新され新しいアバターコンポーネントが表示されます。<code>UserItem</code> は <code>UserList</code> コンポーネントの一部なので、<code>UserList</code> でも <code>Avatar</code> が確認できます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-using-design-system-6-0.png\" alt=\"Example app using the Design System\"></p>\n<p>ほらありましたね！サンプルアプリにデザインシステムのコンポーネントをインポートしました。デザインシステムでアバターコンポーネントに対して更新を発行すればいつでも、その変更もまたパッケージの更新時にサンプルアプリに反映されます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation-storybook.png\" alt=\"Distribute design systems\"></p>\n<h2>デザインシステムのワークフローをマスターする</h2>\n<p>デザインシステムのワークフローは Storybook で UI コンポーネントの開発をすることから始まりクライアントアプリへ配布することで終わります。もっともそれがすべてではありません。デザインシステムは変わり続けるプロダクト要件を満たすために継続して進化しなければなりません。私たちの仕事はまだ始まったばかりなのです。</p>\n<p>第 8 章は当ガイドで作成したエンド・ツー・エンドのデザインシステムを説明します。UI の変化がデザインシステムからどのように波及するのか見てゆきます。</p>","frontmatter":{"title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ","commit":"dabd221"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/distribute/","chapter":"distribute","framework":"react","language":"ja","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ja/distribute/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","language":"ja","chapter":"distribute","pageType":"chapter"}},"staticQueryHashes":["238248339"]}