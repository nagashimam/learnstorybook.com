{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ja/build/","result":{"data":{"currentPage":{"html":"<p>第 3 章では、まずは、最も普及しているコンポーネントエクスプローラーである Storybook から、デザインシステムに必要な道具をセットアップを行います。当ガイドのゴールは専門的なチームがデザインシステムをどのように構築しているかを披露し、またコードの簡潔化、時間を節約する Storybook のアドオン、ディレクトリ構造のような洗練された具体例に焦点を当てます。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-framework-storybook.jpg\" alt=\"Where Storybook fits in\"></p>\n<h2>清潔に保つためのコードフォーマットと静的解析</h2>\n<p>デザインシステムは協働的です、そのため構文を統制し書式を標準化するツールが貢献の質を向上させるために役立ちます。ツールでコードの一貫性を強制することは手作業でコードをきれいにするより労力をかけず、やりくり上手なデザインシステムの作成者にとって有益です。</p>\n<p>当チュートリアルで、私たちはエディタに <a href=\"https://code.visualstudio.com/\">VSCode</a> を使いますが、<a href=\"https://atom.io/\">Atom</a> 、<a href=\"https://www.sublimetext.com/\">Sublime</a> 、<a href=\"https://www.jetbrains.com/idea/\">IntelliJ</a> のような他のモダンエディタにも同様の方針を適用できます。</p>\n<p>プロジェクトに Prettier を加えエディタを適切にセットアップすれば、あまり考えることなく一貫したフォーマットを手に入れるでしょう:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev prettier`, `20339015708068240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20339015708068240000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev prettier\n</code></pre>\n<p>初めて Prettier を使うなら、エディタ向けにセットアップする必要があるかもしれません。VSCode で、Prettier アドオンをインストールしてください:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/prettier-addon.png\" alt=\"Prettier addon for VSCode\"></p>\n<p>まだ実施していなければ VSCode の設定で「Format On Save」(<code>editor.formatOnSave</code>)を有効にしてください。Prettier をインストールすると、ファイルを保存する度にコードが自動フォーマットされるのが分かります。</p>\n<h2>Storybook をインストール</h2>\n<p>Storybook は UI コンポーネントを独立して開発するための業界標準の<a href=\"https://www.chromatic.com/blog/ui-component-explorers---your-new-favorite-tool\">コンポーネントエクスプローラ</a>です。デザインシステムは UI コンポーネントに焦点を当てているため、Storybook はそのユースケースに理想のツールです。以下の特徴があります:</p>\n<ul>\n<li>📕UI コンポーネントの一覧化</li>\n<li>📄 ストーリーとしてコンポーネントのバリエーションを保存</li>\n<li>⚡️ ホットモジュールリロードのような開発者体験のツール化</li>\n<li>🛠React を含む、多くのビューレイヤーをサポート</li>\n</ul>\n<p>Storybook をインストールし実行します。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Installs Storybook\nnpx sb init\n\n# Starts Storybook in development mode\nyarn storybook`, `78066239197248110000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"78066239197248110000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\"># Installs Storybook\nnpx sb init\n\n# Starts Storybook in development mode\nyarn storybook\n</code></pre>\n<p>こちらの画面が見えるでしょう:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-initial-6-0.png\" alt=\"Initial Storybook UI\"></p>\n<p>いいですね、コンポーネントエクスプローラをセットアップしました！</p>\n<p>アプリケーションに Storybook をインストールするたびに、<code>stories</code> フォルダ内にいくつかのサンプルが追加されます。興味があれば、それを探索してみてください。しかし私たちのデザインシステムには必要ないでしょうから、<code>stories</code> ディレクトリを削除しても問題ありません。</p>\n<p>さてあなたの Storybook は次のようになっているでしょう (フォントスタイルがやや小さくなっているのに気づきます、例として、「Avatar: Initials」ストーリーを見てください):</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-initial-stories-without-styles-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4>グローバルスタイルを追加する</h4>\n<p>私たちのデザインシステムにはコンポーネントを正しく描画するためにドキュメントに適用するグローバルスタイル (CSS リセット) が必要です。Styled Components のグローバルスタイルタグで簡単に追加できます。次のように <code>src/shared/global.js</code> ファイルを更新します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { createGlobalStyle, css } from 'styled-components';\n\nimport { color, typography } from './styles';\n\n export const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css\\`\n  /* Same as before */\n\\`;\n\nexport const GlobalStyle = createGlobalStyle\\`\n body {\n   \\${bodyStyles}\n }\\`;`, `5076765977627762000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"5076765977627762000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/shared/global.js</div>\n<pre><code class=\"language-diff\">import { createGlobalStyle, css } from 'styled-components';\n\nimport { color, typography } from './styles';\n\n+ export const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css`\n  /* Same as before */\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n body {\n   ${bodyStyles}\n }`;\n</code></pre>\n<p>Storybook で <code>GlobalStyle</code>「コンポーネント」を使うために、<a href=\"https://storybook.js.org/docs/react/writing-stories/decorators\">デコレーター</a> (コンポーネントのラッパー) を使うことができます。アプリでは、トップレベルのアプリレイアウトにそれを配置するでしょうが、Storybook では、プレビューコンフィグファイル <a href=\"https://storybook.js.org/docs/react/configure/overview#configure-story-rendering\"><code>.storybook/preview.js</code></a> を使って全てのストーリーをラップします。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(` import React from 'react';\n\n import { GlobalStyle } from '../src/shared/global';\n\n/*\n * Global decorator to apply the styles to all stories\n * Read more about them at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\n export const decorators = [\n   Story => (\n     <>\n       <GlobalStyle />\n       <Story />\n     </>\n   ),\n ];\n\n/*\n * Read more about global parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};`, `29724437335646982000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"29724437335646982000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-diff\">+ import React from 'react';\n\n+ import { GlobalStyle } from '../src/shared/global';\n\n/*\n * Global decorator to apply the styles to all stories\n * Read more about them at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\n+ export const decorators = [\n+   Story => (\n+     &#x3C;>\n+       &#x3C;GlobalStyle />\n+       &#x3C;Story />\n+     &#x3C;/>\n+   ),\n+ ];\n\n/*\n * Read more about global parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};\n</code></pre>\n<p>デコレーターはどんなストーリーを選択しても <code>GlobalStyle</code> の描画を保証します。</p>\n<div class=\"aside\">💡 デコレーターの<code><></code>は打ち間違えではありません。これは <a href=\"https://reactjs.org/docs/fragments.html\">React Fragment</a> というもので不必要な別のHTMLタグのアウトプットを避けるためここで使用しています。</div>\n<h4>フォントタグを追加する</h4>\n<p>私たちのデザインシステムはまたアプリにロードした Nunito Sans フォントに依存しています。その実現方法はアプリのフレームワーク (それについて<a href=\"https://github.com/storybookjs/design-system#font-loading\">ここで</a>読めます) によりますが、Storybook で最も簡単な方法は、ファイル <a href=\"https://storybook.js.org/docs/react/configure/story-rendering#adding-to-head\"><code>.storybook/preview-head.html</code></a> を作成し、ページの<code>&#x3C;head></code>タグに直接<code>&#x3C;link></code>タグを追加することです:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`<link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900&quot; />`, `63889156440822110000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"63889156440822110000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview-head.html</div>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900\" />\n</code></pre>\n<p>Storybook では次のように見えるはずです。グローバルフォントスタイルを追加しましたので「T」が sans-serif になっているのが分かります。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-global-styles-6-0.png\" alt=\"Storybook with global styles loaded\"></p>\n<h2>アドオンで Storybook を強化する</h2>\n<p>Storybook は大規模コミュニティにより作られた強力な<a href=\"https://storybook.js.org/addons\">アドオンのエコシステム</a>を含んでいます。実践的な開発者にとって、カスタムツールを私たち自身で作成 (それは時間がかかるでしょう) するよりそのエコシステムを使ってワークフローを組み立てる方が簡単です。</p>\n<h4 id=\"storybook-addon-actions\">インタラクティビティを検証する Actions アドオン</h4>\n<p><a href=\"https://storybook.js.org/docs/react/essentials/actions\">Actions アドオン</a>はボタンやリンクのようなインタラクティブな要素でアクションが振る舞われると Storybook で UI フィードバックを提供してくれます。アクションはデフォルトで Storybook にインストールされており、コンポーネントにコールバックプロパティとして「アクション」を渡すだけで使えます。</p>\n<p>私たちのボタン要素で使い方を見てみましょう、それはクリックに反応するラッパーコンポーネントを任意で取ります。そのラッパーにアクションを渡すストーリーを用意しています:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport styled from 'styled-components';\n\n// When the user clicks a button, it will trigger the \\`action()\\`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\n  return <CustomButton {...props} />;\n}\n\nexport const buttonWrapper = (args) => (\n  return <CustomButton {...props}/>;\n// … etc ..\n)`, `62467937939228890000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"62467937939228890000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Button.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport styled from 'styled-components';\n\n// When the user clicks a button, it will trigger the `action()`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\n  return &#x3C;CustomButton {...props} />;\n}\n\nexport const buttonWrapper = (args) => (\n  return &#x3C;CustomButton {...props}/>;\n// … etc ..\n)\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-addon-actions-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4 id=\"storybook-addon-controls\">コンポーネントをストレステストするための Controls アドオン</h4>\n<p>インストールしたばかりの Storybook には <a href=\"https://storybook.js.org/docs/react/essentials/controls\">Controls アドオン</a>がすでにすぐ使えるように設定されています。</p>\n<p>Controls アドオンは Storybook の UI でコンポーネントのインプット (props) を動的にインタラクションできるようにします。あなたは <a href=\"https://storybook.js.org/docs/react/writing-stories/args\">arguments</a> (args) を介してコンポーネントに複数の値を提供し UI に適用できます。argument の値を適用してデザインシステムの作成者がコンポーネントのインプット (props) をストレステストする手助けをします。またデザインシステムの利用者が各インプット (props) がコンポーネントにどう影響するのか組み込む前に理解するのを試す機能を提供します。</p>\n<p><code>src/Avatar.stories.js</code> にある <code>Avatar</code> コンポーネントに新しいストーリーを加えるとどうなるか見てみましょう:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\n// Other Avatar stories\n\n/*\n * New story using Controls\n * Read more about Storybook templates at:\n * https://storybook.js.org/docs/react/writing-stories/introduction#using-args\n */\nconst Template = args => <Avatar {...args} />;\n\nexport const Controls = Template.bind({});\n/*\n * More on args at:\n * https://storybook.js.org/docs/react/writing-stories/args\n */\nControls.args = {\n  loading: false,\n  size: 'tiny',\n  username: 'Dominic Nguyen',\n  src: 'https://avatars2.githubusercontent.com/u/263385',\n};`, `34023885963941237000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"34023885963941237000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\n// Other Avatar stories\n\n/*\n * New story using Controls\n * Read more about Storybook templates at:\n * https://storybook.js.org/docs/react/writing-stories/introduction#using-args\n */\nconst Template = args => &#x3C;Avatar {...args} />;\n\nexport const Controls = Template.bind({});\n/*\n * More on args at:\n * https://storybook.js.org/docs/react/writing-stories/args\n */\nControls.args = {\n  loading: false,\n  size: 'tiny',\n  username: 'Dominic Nguyen',\n  src: 'https://avatars2.githubusercontent.com/u/263385',\n};\n</code></pre>\n<p>アドオンパネルの Controls タブを見てください。Controls はプロパティを適用するグラフィカル UI を自動生成します。例えば、「size」セレクト要素が提供されている Avatar のサイズ <code>tiny</code>、<code>small</code>、<code>medium</code>、<code>large</code> を通しで確認できます。残りのコンポーネントプロパティ (「loading」、「username」、「src」) も同様に、コンポーネントのストレステストにユーザーフレンドリーな方法を提供してくれます。</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-addon-controls-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>かと言って、Controls アドオンはストーリーの代わりにはなりません。Controls アドオンでの操作はコンポーネントのエッジケースを探すのに優れており、ストーリーは想定された状態を陳列する (見せる) ことに優れています。</p>\n<h4>addon-interactionsを使った対話型のストーリー</h4>\n<p>私たちは <a href=\"#storybook-addon-controls\">Controls</a> のアドオンを使ってどのように Storybook のアドオンがエッジケースを探す手助けをし <a href=\"#storybook-addon-actions\">Actions</a> アドオンを使ってコンポーネントがインタラクションした時にどのように振る舞うのかを見てきました。それでも、ストーリーを追加した各バリエーションで、手動で確認してデザインシステムが壊れないかを見なければなりません。<a href=\"https://storybook.js.org/addons/@storybook/addon-interactions/\"><code>@storybook/addon-interactions</code></a> アドオンを追加してどのようにこれを自動化するか見てみましょう、それから<code>Play</code>ファンクションを使いコンポーネントとインタラクションします:</p>\n<p>次のコマンドを実行してアドオンと依存関係をインストールします:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @storybook/addon-interactions @storybook/testing-library`, `93997469186673870000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"93997469186673870000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @storybook/addon-interactions @storybook/testing-library\n</code></pre>\n<p>次に、Storybook の設定ファイル (この場合は、<code>.storybook/main.js</code> ) に登録します:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: [\n     '../src/**/*.stories.mdx',\n     '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n   '@storybook/addon-interactions',\n  ],\n  framework: &quot;@storybook/react&quot;,\n  staticDirs: [&quot;../public&quot;],\n};`, `95017222525693440000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"95017222525693440000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">./storybook/main.js</div>\n<pre><code class=\"language-diff\">module.exports = {\n  stories: [\n     '../src/**/*.stories.mdx',\n     '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n+   '@storybook/addon-interactions',\n  ],\n  framework: \"@storybook/react\",\n  staticDirs: [\"../public\"],\n};\n</code></pre>\n<p>では、<code>Button</code> に新しいストーリーを追加してどう動くか見てみましょう：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport styled from 'styled-components';\n import { userEvent, within } from '@storybook/testing-library';\nimport { Button } from './Button';\nimport { StoryLinkWrapper } from './StoryLinkWrapper';\nexport default {\n  title: 'Design System/Button',\n  component: Button,\n};\n\n// Other Button stories\n\n // New story using the play function\n export const WithInteractions = () => (\n   <Button\n     ButtonWrapper={StoryLinkWrapper}\n     appearance=&quot;primary&quot;\n     href=&quot;http://storybook.js.org&quot;>\n       Button\n    </Button>\n );\n WithInteractions.play = async ({ canvasElement }) => {\n   // Assigns canvas to the component root element\n   const canvas = within(canvasElement);\n   await userEvent.click(canvas.getByRole(&quot;link&quot;));\n };\n\n WithInteractions.storyName = &quot;button with interactions&quot;;`, `84156618496617230000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"84156618496617230000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Button.stories.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\nimport styled from 'styled-components';\n+ import { userEvent, within } from '@storybook/testing-library';\nimport { Button } from './Button';\nimport { StoryLinkWrapper } from './StoryLinkWrapper';\nexport default {\n  title: 'Design System/Button',\n  component: Button,\n};\n\n// Other Button stories\n\n+ // New story using the play function\n+ export const WithInteractions = () => (\n+   &#x3C;Button\n+     ButtonWrapper={StoryLinkWrapper}\n+     appearance=\"primary\"\n+     href=\"http://storybook.js.org\">\n+       Button\n+    &#x3C;/Button>\n+ );\n+ WithInteractions.play = async ({ canvasElement }) => {\n+   // Assigns canvas to the component root element\n+   const canvas = within(canvasElement);\n+   await userEvent.click(canvas.getByRole(\"link\"));\n+ };\n\n+ WithInteractions.storyName = \"button with interactions\";\n</code></pre>\n<div class=\"aside\">\n 💡 Play ファンクションは小さなコードスニペットで、ストーリーが描画を完了すると、<code>addon-interactions</code>による助けを借りて、人の手を介しないと不可能なシナリオをテストできます。詳しくは<a href=\"https://storybook.js.org/docs/react/writing-stories/play-function\">公式ドキュメント</a>を参照ください。\n</div>\n<p>作成したストーリーを選択すれば、コンポーネントがどう振る舞っているか、一貫性を保っているかどうかを確認する方法がわかります。ちょっとした手間をかけることで、人間の操作に頼らずに、デザインシステムを強靭でバグのないものにすることができます。</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-button-interactive-stories.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n後の章で Accessibility と Docs のアドオンについて確認します。\n<blockquote>\n<p>“Storybook はチームがビジネスロジックと複雑なシステムにつまづくことなく UI コンポーネントをデザインし、構築し、組織化 (それもフルスクリーンで！) できる強力なフロントエンド作業環境だ。” – Brad Frost、Atomic Design の著者</p>\n</blockquote>\n<h2>メンテナンス自動化の方法を学ぶ</h2>\n<p>さあこれで私たちのデザインシステムコンポーネントが Storybook に入りました。業界標準のデザインシステムを作るためにもう一歩足を踏み出したのです。今がリモートリポジトリに成果をコミットする素晴らしい瞬間です。そして継続的なメンテナンスを合理化する自動化ツールについて考えることができます。</p>\n<p>全てのソフトウェアのように、デザインシステムも発展するものです。デザインシステムが成長するに従い、UI コンポーネントが意図したとおりの外観と操作性を維持できることが課題です。</p>\n<p>第 4 章では、継続的インテグレーションをセットアップし、協働のためにデザインシステムをオンラインで自動配信する方法を学びます。</p>","frontmatter":{"title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する","commit":"f4c9bb5"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/build/","chapter":"build","framework":"react","language":"ja","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ja/build/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ja/build/","framework":"react","language":"ja","chapter":"build","pageType":"chapter"}},"staticQueryHashes":["238248339"]}