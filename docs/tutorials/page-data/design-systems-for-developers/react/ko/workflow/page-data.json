{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ko/workflow/","result":{"data":{"currentPage":{"html":"<p>프런트엔드에서 사용하는 툴이 함께 작동하는 방식은 디자인 및 개발 팀이 실현할 수 있는 궁극적인 가치에 커다란 영향을 끼칩니다.</p>\n<p>이번 챕터에서는 새로운 AvatarList 컴포넌트를 소개함으로써 다섯 단계의 작업 흐름(workflow)을 설명합니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-workflow-horizontal.jpg\" alt=\"디자인 시스템 작업 흐름\"></p>\n<h2>설계</h2>\n<p><code>AvatarList</code>는 여러 개의 아바타(avatar)를 보여주는 컴포넌트 입니다. 다른 디자인 시스템 컴포넌트처럼 <code>AvatarList</code>는 다른 많은 프로젝트에 붙여 넣어지며 사용되기 시작했고, 바로 그렇기 때문에 디자인 시스템에 포함되어야 합니다. 다른 프로젝트에서 개발된 컴포넌트가 있다는 가정 하에 이 데모의 완성된 코드로 바로 이동하겠습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/AvatarList.jpg\" alt=\"AvatarList\"></p>\n<p>우선, 작업을 진행할 새로운 브랜치를 생성합니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git checkout -b create-avatar-list-component`, `83974316890194210000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"83974316890194210000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git checkout -b create-avatar-list-component\n</code></pre>\n<p><code>AvatarList</code> 컴포넌트와 스토리(story)를 다운로드 받아서 <code>/src</code> 디렉토리에 위치시킵니다.</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/learnstorybook-design-system/716a4c22160eaeaabb8e2c78241f2807844deed0/src/AvatarList.js\">컴포넌트 파일</a></li>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/learnstorybook-design-system/716a4c22160eaeaabb8e2c78241f2807844deed0/src/AvatarList.stories.js\">스토리 파일</a></li>\n</ul>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-with-avatarlist-6-0.png\" alt=\"AvatarList 컴포넌트가 있는 스토리북\"></p>\n<div class=\"aside\">\n💡 스토리북(Storybook)은 자동적으로 확장자가 <code>*.stories.js</code>로 끝나는 파일을 감지하도록 설정되어 UI에서 보여줍니다.\n</div>\n<p>좋습니다! 이제 <code>AvatarList</code>에서 지원되는 각각의 UI 상태를 명확하게 설명하겠습니다. 살짝 보면 <code>AvatarList</code>는 <code>small</code>및 <code>loading</code>과 같은 <code>Avatar</code>의 속성을 지원하는 걸 알 수 있습니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`export const SmallSize = Template.bind({});\nSmallSize.args = {\n  users: Short.args.users,\n  size: 'small',\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  loading: true,\n};`, `6262088211067907000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"6262088211067907000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.stories.js</div>\n<pre><code class=\"language-js\">export const SmallSize = Template.bind({});\nSmallSize.args = {\n  users: Short.args.users,\n  size: 'small',\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  loading: true,\n};\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-with-avatarlist-loading-6-0.png\" alt=\"AvatarList 스토리들이 더 많은 스토리북\"></p>\n<p>이것은 목록이기 때문에 여러 아바타를 볼 수 있어야 합니다. 목록 아이템이 많을 때와 적을 때 어떤 일이 발생하는지 볼 수 있는 스토리를 추가해봅니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`export const Ellipsized = Template.bind({});\nEllipsized.args = {\n  users: [\n    ...Short.args.users,\n    {\n      id: '3',\n      name: 'Zoltan Olah',\n      avatarUrl: 'https://avatars0.githubusercontent.com/u/81672',\n    },\n    {\n      id: '4',\n      name: 'Tim Hingston',\n      avatarUrl: 'https://avatars3.githubusercontent.com/u/1831709',\n    },\n  ],\n};\n\nexport const BigUserCount = Template.bind({});\nBigUserCount.args = {\n  users: Ellipsized.args.users,\n  userCount: 100,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  users: [],\n};`, `77446877990850220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"77446877990850220000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.stories.js</div>\n<pre><code class=\"language-js\">export const Ellipsized = Template.bind({});\nEllipsized.args = {\n  users: [\n    ...Short.args.users,\n    {\n      id: '3',\n      name: 'Zoltan Olah',\n      avatarUrl: 'https://avatars0.githubusercontent.com/u/81672',\n    },\n    {\n      id: '4',\n      name: 'Tim Hingston',\n      avatarUrl: 'https://avatars3.githubusercontent.com/u/1831709',\n    },\n  ],\n};\n\nexport const BigUserCount = Template.bind({});\nBigUserCount.args = {\n  users: Ellipsized.args.users,\n  userCount: 100,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  users: [],\n};\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-with-all-avatarlist-stories-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>과정을 저장하고 commit을 해보세요.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git commit -am &quot;Added AvatarList and stories&quot;`, `84573159247577200000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"84573159247577200000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git commit -am \"Added AvatarList and stories\"\n</code></pre>\n<h2>문서</h2>\n<p>스토리북 문서(Storybook Docs) 덕분에 최소한의 노력으로 사용자가 커스텀할 수 있는 문서를 얻을 수 있습니다. 스토리북의 문서를 참고해서 AvatarList를 사용하려는 다른 사람들에게 도움이 됩니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-minimal-avatarlist.png\" alt=\"최소한의 AvatarList 정보가 있는 스토리북 문서\"></p>\n<p>최소한의 기능이 담긴 문서가 완성되었습니다! AvatarList에 활용법에 대한 설명을 추가해서 인간미를 더해봅시다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/**\n * A list of Avatars, ellipsized to at most 3. Supports passing only a subset of the total user count.\n */\nexport function AvatarList({ loading, users, userCount, size, ...props }) {}`, `40240964916726400000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"40240964916726400000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.js</div>\n<pre><code class=\"language-js\">/**\n * A list of Avatars, ellipsized to at most 3. Supports passing only a subset of the total user count.\n */\nexport function AvatarList({ loading, users, userCount, size, ...props }) {}\n</code></pre>\n<p>지원되는 props에 대한 추가적인 설명을 제공합니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`AvatarList.propTypes = {\n  /**\n   * Are we loading avatar data from the network?\n   */\n  loading: PropTypes.bool,\n  /**\n   * A (sub)-list of the users whose avatars we have data for. Note: only 3 will be displayed.\n   */\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      avatarUrl: PropTypes.string,\n    })\n  ),\n  /**\n   * The total number of users, if a subset is passed to \\`users\\`.\n   */\n  userCount: PropTypes.number,\n  /**\n   * AvatarList comes in four sizes. In most cases, you’ll be fine with \\`medium\\`.\n   */\n  size: PropTypes.oneOf(Object.keys(sizes)),\n};`, `43147597552324490000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"43147597552324490000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/AvatarList.js</div>\n<pre><code class=\"language-js\">AvatarList.propTypes = {\n  /**\n   * Are we loading avatar data from the network?\n   */\n  loading: PropTypes.bool,\n  /**\n   * A (sub)-list of the users whose avatars we have data for. Note: only 3 will be displayed.\n   */\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      avatarUrl: PropTypes.string,\n    })\n  ),\n  /**\n   * The total number of users, if a subset is passed to `users`.\n   */\n  userCount: PropTypes.number,\n  /**\n   * AvatarList comes in four sizes. In most cases, you’ll be fine with `medium`.\n   */\n  size: PropTypes.oneOf(Object.keys(sizes)),\n};\n</code></pre>\n<p>간단하죠! 지금은 이 정도의 설명이면 충분합니다. 나중에 MDX를 이용하면 언제든 원하는대로 수정할 수 있습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-full-avatarlist.png\" alt=\"모든 AvatarList 정보가 있는 스토리북 문서\"></p>\n<p>문서화는 지루한 작업이 아닙니다. 자동화가 가능한 툴을 사용해서 지루함을 제거하고 글을 바로 쓸 수 있습니다.</p>\n<p>변경된 부분을 commit하고 깃허브(GitHub)에 push해보세요.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git commit -am &quot;Improved AvatarList docs&quot;`, `85439036217612750000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"85439036217612750000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git commit -am \"Improved AvatarList docs\"\n</code></pre>\n<h4>풀 리퀘스트 생성</h4>\n<p>깃허브에 있는 <code>AvatarList</code> 브랜치에 push하고 풀 리퀘스트(pull request)를 생성해봅니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git push -u origin create-avatar-list-component`, `61849727230203660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"61849727230203660000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git push -u origin create-avatar-list-component\n</code></pre>\n<p>그리고 깃허브로 가서 풀 리퀘스트를 열어보세요.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-pr-create-avatarlist.png\" alt=\"AvatarList용 PR에 생성된 PR\"></p>\n<h2>리뷰</h2>\n<p>이 때 <code>AvatarList</code>는 디자인 시스템에 포함될 후보입니다. 관계자들은 기대한 기능과 외관이 맞는지 반드시 컴포넌트 리뷰를 진행해야합니다.</p>\n<p>스토리북의 디자인 시스템은 각 풀 리퀘스트 때마다 자동으로 배포되어 쉽게 리뷰할 수 있습니다. PR 확인란으로 스크롤을 내려서 배포된 스토리북 링크를 찾아보세요.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes.png\" alt=\"배포된 PR의 PR 체크\"></p>\n<p>배포된 스토리북에서 <code>AvatarList</code>를 찾아보세요. 로컬 스토리북과 동일하게 보여야 합니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/netlify-deployed-avatarlist-stories.png\" alt=\"스토리북이 있는 AvatarList를 온라인에 공유\"></p>\n<p>배포된 스토리북은 팀이 함께 공유하는 공통의 레퍼런스입니다. 피드백을 빨리 받아보기 위해 다른 관계자들에게 <code>AvatarList</code> 링크를 공유해보세요.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/visual-review-shipit.png\" alt=\"보기 좋네요!\"></p>\n<p>수 많은 팀들과 합의를 이루는 과정은 소용없는 노력처럼 느껴질 때도 있습니다. 오래된 코드를 레퍼런스로 참고하는 사람도 있고, 적절한 개발 환경을 갖추지 못한 개발자도 있으며, 피드백을 한 곳에 모아두지 않고 여러 툴에 흩어놓기도 합니다. 하지만 온라인 스토리북 리뷰는 그 과정을 URL을 공유하는 것만큼이나 간단하게 만들어줍니다.</p>\n<h2>테스트</h2>\n<p>테스트는 매 commit 때마다 눈에 띄지 않는 곳에서 실행됩니다. <code>AvatarList</code>은 간단한 프레젠테이션 컴포넌트라서 유닛 테스트는 필수적인 게 아닙니다. 하지만 PR 확인란을 보면 시각적 테스트 툴인 크로마틱(Chromatic)이 리뷰가 필요한 수정사항을 이미 감지하고 있습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes.png\" alt=\"크로마틱 변경사항 깃허브 PR check\"></p>\n<p>AvatarList는 새로운 컴포넌트이기 때문에, 이를 위한 시각적 테스트가 아직 없습니다. 각 스토리마다 최소한의 기준이 필요할 것입니다. 시각적 테스트로 확장하기 위해서 크로마틱에서 \"new stories\"에 동의합니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-avatarlist-changes.png\" alt=\"AvatarList 스토리들의 크로마틱 변경사항 허용\"></p>\n<p>여기까지 완료가 되면 크로마틱에서 빌드가 통과될 것입니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-avatarlist-changes-accepted.png\" alt=\"AvatarList 스토리들의 크로마틱 변경사항 허용\"></p>\n<p>그런 후에, 깃허브에서 PR 확인란이 업데이트 됩니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/avatarlist-github-pr-checks-chromatic-changes-accepted.png\" alt=\"깃허브 PR check에서 크로마틱 변경사항 허용\"></p>\n<p>테스트가 성공적으로 업데이트되었습니다. 나중에 이 디자인 시스템에 회귀가 침투하기란 쉽지 않을 것입니다.</p>\n<h2>배포</h2>\n<p>디자인 시스템에 추가한 <code>AvatarList</code>의 풀 리퀘스트가 열려있는 상태입니다. 스토리를 작성했고, 테스트도 통과했으며, 문서도 작성했습니다. 마지막으로 Auto와 npm을 사용해서 디자인 시스템 패키지를 업데이트하면 됩니다.</p>\n<p>PR에 <code>minor</code> 라벨을 추가해보세요. 이렇게 하면 Auto에게 merge할 때 마이너 버전의 패키지를 업데이트하라고 알려줄 수 있습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-pr-labelled.png\" alt=\"라벨이 붙여진 깃허브 PR\"></p>\n<p>이제 PR을 merge하고, npm에 있는 패키지로 이동하여, 패키지가 업데이트되는 몇 분 간을 기다립니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/npm-published-package.png\" alt=\"npm에 퍼블리쉬된 패키지\"></p>\n<p>성공했습니다! 디자인 시스템 패키지가 깃허브에 업데이트되었습니다. 커맨드 라인(command line)을 실행하거나 npm을 연결할 필요가 없습니다. AvatarList를 사용하려면 <code>learnstorybook-design-system</code> 의존성(dependency)를 예제 앱에 업데이트해보세요.</p>\n<h2>여정의 시작</h2>\n<p><em>개발자를 위한 디자인 시스템</em> 은 전문적인 프런트엔드 팀에서 사용하는 엔드 투 엔드(end-to-end) 작업 흐름(workflow)을 강조하여 자체 개발 과정에서 유리한 출발점을 제공합니다. 디자인 시스템이 커질 때, 팀의 요구에 맞게 추가하고 재배열하고 확장하도록 합니다.</p>\n<p>챕터 9에서는 완성된 샘플 코드, 유용한 자료들 그리고 개발자들이 흔히하는 질문들로 마무리하겠습니다.</p>","frontmatter":{"title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요","commit":"9d13d12"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ko/workflow/","chapter":"workflow","framework":"react","language":"ko","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ko/workflow/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","language":"ko","chapter":"workflow","pageType":"chapter"}},"staticQueryHashes":["238248339"]}