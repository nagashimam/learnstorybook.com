{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/ko/build/","result":{"data":{"currentPage":{"html":"<p>챕터 3에서는 가장 인기 있는 컴포넌트 탐색기인 스토리북(Storybook)을 이용하여 필수 디자인 시스템 제작과정을 설정해봅니다. 이 가이드의 목표는 전문성을 갖춘 팀이 디자인 시스템을 어떻게 구축하는지 보여주는 것입니다. 따라서 깔끔한 코드, 시간을 절약해주는 스토리북 애드온(addon), 디렉터리 구조와 같이 자세한 내용까지 살펴보겠습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-framework-storybook.jpg\" alt=\"스토리북을 쓰기 좋은 곳\"></p>\n<h2>깔끔한 코드를 위한 형식과 린트(Lint)</h2>\n<p>디자인 시스템은 협업의 결과물이기 때문에 문법을 수정하거나 형식을 표준화하는 툴은 협업 품질 개선에 기여합니다. 툴을 사용해서 코드의 일관성을 확보하는 것이 수작업으로 직접 코드를 관리하는 것 보다 훨씬 효율적입니다. 따라서 디자인 시스템 작성자는 자료를 많이 확보하면 유용하게 활용하는데 도움이 됩니다.</p>\n<p>이 튜토리얼에서는 <a href=\"https://code.visualstudio.com/\">VSCode</a> 에디터를 사용합니다만, 같은 원칙이 적용되는 <a href=\"https://atom.io/\">Atom</a>, <a href=\"https://www.sublimetext.com/\">Sublime</a>, <a href=\"https://www.jetbrains.com/idea/\">IntelliJ</a> 등 다른 최신 에디터들을 사용해도 무방합니다.</p>\n<p>이 프로젝트에 프리티어(Prettier) 애드온을 설치해서 편집기에 올바르게 적용하면 특별히 추가적인 노력을 하지 않아도 코드 형식이 일관되게 유지됩니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev prettier`, `70490074536951530000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"70490074536951530000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev prettier\n</code></pre>\n<p>프리티어를 처음 사용하는 경우 에디터에 프리티어를 설치해야 할 수도 있습니다. VScode를 사용한다면 프리티어 애드온을 추가하면 됩니다. -</p>\n<p><img src=\"/tutorials/design-systems-for-developers/prettier-addon.png\" alt=\"VSCode를 위한 프리티어 애드온\"></p>\n<p><code>editor.formatOnSave</code> 아직 설정을 하지 않았다면 Preference 설정에서 'format on save'를 활성화하세요. 프리티어 설치를 완료하고 나면 파일을 저장할 때마다 에디터가 코드 형식을 자동으로 정리해 주는 것을 확인할 수 있습니다.</p>\n<h2>스토리북 설치하기</h2>\n<p>스토리북은 독자적인 UI 컴포넌트를 개발을 위한 업계 표준 <a href=\"https://www.chromatic.com/blog/ui-component-explorers---your-new-favorite-tool/\">컴포넌트 탐색기</a>입니다. 디자인 시스템은 UI 컴포넌트에 집중하기 때문에 스토리북은 용례를 위한 이상적인 도구입니다. 다음 기능을 주로 사용합니다. -</p>\n<ul>\n<li>📕UI 컴포넌트들을 카탈로그화 하기</li>\n<li>📄컴포넌트 변화를 스토리들(Stories)로 저장하기</li>\n<li>⚡️핫 모듈 재 로딩과 같은 개발 툴 경험을 제공하기</li>\n<li>🛠리액트를 포함한 다양한 뷰 레이어 지원하기</li>\n</ul>\n<p>스토리북을 설치하고 실행해 보세요.</p>\n<pre><code class=\"language-shell\"># Installs Storybook\nnpx storybook init\n\n# Starts Storybook in development mode\nyarn storybook\n</code></pre>\n<p>다음과 같은 화면을 볼 수 있을 것 입니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-initial-6-0.png\" alt=\"초기 스토리북 UI\"></p>\n<p>잘 하셨습니다. 컴포넌트 탐색기 설치가 끝났습니다!</p>\n<p>어플리케이션에 스토리북을 설치할 때마다 <code>stories</code> 폴더에 예제가 몇 가지 추가됩니다. 원한다면 예제들을 천천히 살펴보아도 좋습니다. 하지만 디자인 시스템 챕터에서는 사용하지 않으므로 <code>stories</code> 디렉토리를 지워도 무방합니다.</p>\n<p>스토리북은 아래와 같이 보여야 합니다. (스토리(story) 목록 중 \"Avatar: Initials\"의 폰트 스타일이 살짝 어긋나 있습니다. 대신 \"Avatar:Initials\" 스토리를 참고하세요) -</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-initial-stories-without-styles-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h3>글로벌 스타일 추가하기</h3>\n<p>디자인 시스템의 컴포넌트가 제대로 보이기 위해서는 몇 가지 글로벌 스타일(CSS reset)을 문서에 적용해야 합니다. 이는 Styled Components 의 글로벌 스타일 태그를 이용해서 쉽게 추가할 수 있습니다. 아래 예시처럼 <code>src/shared/global.js</code> 에 있는 글로벌 스타일을 업데이트 해 보세요 -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { createGlobalStyle, css } from 'styled-components';\n\nimport { color, typography } from './styles';\n\n export const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css\\`\n  /* Same as before */\n\\`;\n\nexport const GlobalStyle = createGlobalStyle\\`\n body {\n   \\${bodyStyles}\n }\\`;`, `43472920751616330000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"43472920751616330000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/shared/global.js</div>\n<pre><code class=\"language-diff\">import { createGlobalStyle, css } from 'styled-components';\n\nimport { color, typography } from './styles';\n\n+ export const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css`\n  /* Same as before */\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n body {\n   ${bodyStyles}\n }`;\n</code></pre>\n<p>스토리북의 <code>GlobalStyle</code> 컴포넌트를 사용하기 위해 컴포넌트 래퍼(wrapper)인 <a href=\"https://storybook.js.org/docs/react/writing-stories/decorators\">데코레이터(decorator)</a>를 활용할 수 있습니다. 하나의 앱 안이라면 그 컴포넌트를 앱 레이아웃 최상단에 놓겠지만 스토리북에서는 프리뷰 설정 파일을 사용해서 모든 스토리를 그 컴포넌트 안에 넣고 감싸도록 합니다. <a href=\"https://storybook.js.org/docs/react/configure/overview#configure-story-rendering\"><code>.storybook/preview.js</code></a></p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(` import React from 'react';\n\n import { GlobalStyle } from '../src/shared/global';\n\n/*\n * Global decorator to apply the styles to all stories\n * Read more about them at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\n export const decorators = [\n   Story => (\n     <>\n       <GlobalStyle />\n       <Story />\n     </>\n   ),\n ];\n\n/*\n * Read more about global parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};`, `46107812841241790000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"46107812841241790000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-diff\">+ import React from 'react';\n\n+ import { GlobalStyle } from '../src/shared/global';\n\n/*\n * Global decorator to apply the styles to all stories\n * Read more about them at:\n * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n */\n+ export const decorators = [\n+   Story => (\n+     &#x3C;>\n+       &#x3C;GlobalStyle />\n+       &#x3C;Story />\n+     &#x3C;/>\n+   ),\n+ ];\n\n/*\n * Read more about global parameters at:\n * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n */\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n};\n</code></pre>\n<p>데코레이터는 어떤 스토리가 선택되었든 간에 <code>GlobalStyle</code> 이 반드시 렌더(render) 되도록 합니다.</p>\n<div class=\"aside\"> 💡 <code><></code> 데코레이터 안의 기호는 오타가 아닙니다 -- <a href=\"https://reactjs.org/docs/fragments.html\">React Fragment 입니다.</a> 불필요한 HTML 태그를 추가하지 않기 위해 그것을 사용합니다. </div>\n<h3>폰트 태그 추가하기</h3>\n<p>디자인 시스템 앱의 기본 폰트는 Nunito Sans 입니다. 이 부분은 앱 프레임워크에 따라서 설정하는 방법이 다르지만 (<a href=\"https://github.com/storybookjs/design-system#font-loading\">여기</a>에서 더 자세히 볼 수 있습니다), 스토리북에서 설정하는 가장 쉬운 방법은 <a href=\"https://storybook.js.org/docs/react/configure/story-rendering#adding-to-head\"><code>.storybook/preview-head.html</code></a> 파일에서 <code>&#x3C;head></code> 태그에 직접 <code>&#x3C;link></code> 태그를 추가하는 것입니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`<link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900&quot; />`, `68323167770557330000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"68323167770557330000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview-head.html</div>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900\" />\n</code></pre>\n<p>이제 스토리북이 이렇게 보일 것입니다. 글로벌 폰트 스타일을 적용했기 때문에 \"T\" 글자는 sans-serif 폰트가 적용되어 있습니다.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-global-styles-6-0.png\" alt=\"글로벌 스타일이 적용된 스토리북\"></p>\n<h2>애드온으로 스토리북을 더욱 강력하게</h2>\n<p>스토리북는 대규모 커뮤니티가 만든 탄탄한 <a href=\"https://storybook.js.org/addons\">애드온 생태계</a>를 보유하고 있습니다. 실용성을 추구하는 개발자라면 직접 커스텀 도구를 만드는 것보다 애드온 생태계를 이용해서 작업 흐름(workflow)를 구축하는 것이 더 쉽고 빠릅니다.</p>\n<h4 id=\"storybook-addon-actions\">상호 작용을 확인하기 위한 액션 애드온</h4>\n<p>버튼이나 링크 같은 인터렉티브한 엘리먼트를 실행했을 때, 스토리북의 <a href=\"https://storybook.js.org/docs/react/essentials/actions\">액션 애드온</a>은 UI 피드백을 제공합니다. 액션 애드온은 스토리북을 설치할 때 기본으로 같이 설치되며, \"액션\"을 콜백 prop으로 컴포넌트에 전달하여 사용할 수 있습니다.</p>\n<p>버튼 엘리먼트의 사용방법을 알아보겠습니다. 클릭에 반응하기 위해 래퍼(wrapper) 컴포넌트로 버튼 엘리먼트를 감싸기도 하는데, 우리는 래퍼(wrapper)에 액션에 따른 스토리를 전달하게 됩니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport styled from 'styled-components';\n\n// When the user clicks a button, it will trigger the \\`action()\\`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\n  return <CustomButton {...props} />;\n}\n\nexport const buttonWrapper = (args) => (\n  return <CustomButton {...props}/>;\n// … etc ..\n)`, `35664802960735220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"35664802960735220000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Button.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport styled from 'styled-components';\n\n// When the user clicks a button, it will trigger the `action()`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\n  return &#x3C;CustomButton {...props} />;\n}\n\nexport const buttonWrapper = (args) => (\n  return &#x3C;CustomButton {...props}/>;\n// … etc ..\n)\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-addon-actions-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4 id=\"storybook-addon-controls\">컴포넌트 스트레스 테스트를 위한 Controls</h4>\n<p>스토리북을 새로 설치하면 <a href=\"https://storybook.js.org/docs/react/essentials/controls\">Controls 애드온</a>이 이미 다 설정된 상태로 포함되어 있습니다.</p>\n<p>Controls 애드온을 이용하면 스토리북 UI에서 컴포넌트 입력값(props)을 역동적으로 사용할 수 있습니다. <a href=\"https://storybook.js.org/docs/react/writing-stories/args\">전달 인자</a> (줄여서 args)를 통해 컴포넌트 prop에 다양한 값을 제공할 수 있고 UI를 통해서 값을 변경할 수 있습니다. 디자인 시스템 크리에이터는 이를 통해 전달인자의 값을 조정하면서 컴포넌트 입력값(props)을 스트레스 테스트를 할 수 있습니다. 디자인 시스템 사용자는 여러 컴포넌트를 통합하기 전에 컴포넌트를 사용해보고 각 입력값(prop)이 컴포넌트에 어떤 영향을 주는지 사전에 파악할 수 있습니다.</p>\n<p><code>src/Avatar.stories.js</code>에 있는 <code>Avatar</code> 컴포넌트에 새로운 스토리를 추가하여 Controls 애드온이 어떻게 작동하는지 살펴봅시다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\n// Other Avatar stories\n\n/*\n * New story using Controls\n * Read more about Storybook templates at:\n * https://storybook.js.org/docs/react/writing-stories/introduction#using-args\n */\nconst Template = args => <Avatar {...args} />;\n\nexport const Controls = Template.bind({});\n/*\n * More on args at:\n * https://storybook.js.org/docs/react/writing-stories/args\n */\nControls.args = {\n  loading: false,\n  size: 'tiny',\n  username: 'Dominic Nguyen',\n  src: 'https://avatars2.githubusercontent.com/u/263385',\n};`, `65384987871176770000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"65384987871176770000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\n// Other Avatar stories\n\n/*\n * New story using Controls\n * Read more about Storybook templates at:\n * https://storybook.js.org/docs/react/writing-stories/introduction#using-args\n */\nconst Template = args => &#x3C;Avatar {...args} />;\n\nexport const Controls = Template.bind({});\n/*\n * More on args at:\n * https://storybook.js.org/docs/react/writing-stories/args\n */\nControls.args = {\n  loading: false,\n  size: 'tiny',\n  username: 'Dominic Nguyen',\n  src: 'https://avatars2.githubusercontent.com/u/263385',\n};\n</code></pre>\n<p>애드온 목록에 있는 Controls 탭에 주목하세요. Controls는 props를 조정하기 위해 자동으로 그래픽 UI를 생성합니다. 예를 들어, 사이즈를 선택하는 엘리먼트(\"size\")를 이용해서 아바타 사이즈를 <code>tiny</code>, <code>small</code>, <code>medium</code>, <code>large</code> 중에서 고를 수 있습니다. 이 방식은 컴포넌트의 나머지 props에도 (\"loading\", \"username\", \"src\") 동일하게 적용됩니다. 이렇게 사용자 친화적인 방법으로 스트레스 테스트를 컴포넌트에 적용할 수 있습니다.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-addon-controls-6-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>단, Controls가 스토리들을 대체하지는 않습니다. Controls는 특수한 컴포넌트를 탐색할 때, 그리고 스토리들이 원래 의도한 상태가 무엇인지 보여줄 때 유용합니다.</p>\n<h4>애드온 인터렉션(interaction)을 통한 인터랙티브한 스토리들</h4>\n<p>스토리북의 애드온이 <a href=\"#storybook-addon-controls\">Controls</a>을 통해 특수 케이스를 찾아내는데 어떻게 도움이 되는지, 그리고 <a href=\"#storybook-addon-actions\">Actions</a> 애드온을 통해 컴포넌트가 어떻게 상호작용 하는지 알아보았습니다. 이때 스토리에 변화를 하나씩 적용할 때마다 그것이 디자인 시스템을 망가뜨리지 않았는지 매번 수동으로 확인해야 합니다. <a href=\"https://storybook.js.org/addons/@storybook/addon-interactions/\"><code>@storybook/addon-interactions</code></a> 애드온을 사용하여 이를 어떻게 자동화 할 수 있는지 알아보고 <code>play</code> 함수를 사용하여 컴포넌트를 작동시켜봅시다. -</p>\n<p>다음 명령어를 사용하여 애드온 및 의존성을 설치합니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @storybook/addon-interactions @storybook/testing-library`, `31847234706382287000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"31847234706382287000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @storybook/addon-interactions @storybook/testing-library\n</code></pre>\n<p>다음으로, 설치한 것을 스토리북의 구성파일에 등록합니다. (i.e., <code>.storybook/main.js</code>)-</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: [\n     '../src/**/*.stories.mdx',\n     '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n   '@storybook/addon-interactions',\n  ],\n  framework: &quot;@storybook/react&quot;,\n  staticDirs: [&quot;../public&quot;],\n};`, `64509610261424810000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"64509610261424810000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">./storybook/main.js</div>\n<pre><code class=\"language-diff\">module.exports = {\n  stories: [\n     '../src/**/*.stories.mdx',\n     '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n+   '@storybook/addon-interactions',\n  ],\n  framework: \"@storybook/react\",\n  staticDirs: [\"../public\"],\n};\n</code></pre>\n<p>이제, <code>Button</code> 컴포넌트에 새로운 스토리를 추가하여 어떻게 작동하는지 보겠습니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport styled from 'styled-components';\n import { userEvent, within } from '@storybook/testing-library';\nimport { Button } from './Button';\nimport { StoryLinkWrapper } from './StoryLinkWrapper';\nexport default {\n  title: 'Design System/Button',\n  component: Button,\n};\n\n// Other Button stories\n\n // New story using the play function\n export const WithInteractions = () => (\n   <Button\n     ButtonWrapper={StoryLinkWrapper}\n     appearance=&quot;primary&quot;\n     href=&quot;http://storybook.js.org&quot;>\n       Button\n    </Button>\n );\n WithInteractions.play = async ({ canvasElement }) => {\n   // Assigns canvas to the component root element\n\n   const canvas = within(canvasElement);\n   await userEvent.click(canvas.getByRole(&quot;link&quot;));\n };\n\n WithInteractions.storyName = &quot;button with interactions&quot;;`, `57043938649128220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"57043938649128220000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Button.stories.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\nimport styled from 'styled-components';\n+ import { userEvent, within } from '@storybook/testing-library';\nimport { Button } from './Button';\nimport { StoryLinkWrapper } from './StoryLinkWrapper';\nexport default {\n  title: 'Design System/Button',\n  component: Button,\n};\n\n// Other Button stories\n\n+ // New story using the play function\n+ export const WithInteractions = () => (\n+   &#x3C;Button\n+     ButtonWrapper={StoryLinkWrapper}\n+     appearance=\"primary\"\n+     href=\"http://storybook.js.org\">\n+       Button\n+    &#x3C;/Button>\n+ );\n+ WithInteractions.play = async ({ canvasElement }) => {\n+   // Assigns canvas to the component root element\n\n+   const canvas = within(canvasElement);\n+   await userEvent.click(canvas.getByRole(\"link\"));\n+ };\n\n+ WithInteractions.storyName = \"button with interactions\";\n</code></pre>\n<div class=\"aside\">\n 💡 Play 함수는 작은 코드 조각입니다. <code>애드온-인터렉션(interaction)</code> 의 도움으로 스토리가 렌더링되고 나면, Play 함수 덕분에 사람의 개입 없이 시나리오를 테스트할 수 있습니다.  됩니다. 더 자세한 내용은 <a href=\"https://storybook.js.org/docs/react/writing-stories/play-function\"> 공식문서를 참고하세요</a>.\n</div>\n<p>새로운 스토리를 선택한 후 컴포넌트가 어떻게 동작하는지, 어떻게 일관성을 유지하는지 확인해 보세요. 여러분의 이와같은 노력은 사람이 개입하지 않고도 더 견고하고 버그가 적은 디자인 시스템을 만들기 위한 발판이 될 것입니다.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-button-interactive-stories.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>다음 챕터에서는 접근성과 문서 애드온에 대해 알아봅니다.</p>\n<blockquote>\n<p>“스토리북은 팀이 비즈니스 로직에 걸려 넘어지거나 고민하는 일 없이 UI를 설계,구축,구성 할 수 있도록 돕는 강력한 프런트엔드 작업 환경 도구입니다. (심지어 전체화면입니다!) .” – Brad Frost, Atomic Design의 저자</p>\n</blockquote>\n<h2>유지보수 자동화 방법 알아보기</h2>\n<p>디자인 시스템 컴포넌트가 스토리북 안에 들어갔으니 산업표준을 준수하는 디자인 시스템 구축을 향해 한 단계 더 나아간 것 입니다. 이제 원격저장소에 작업물을 commit 하기 좋은 시점입니다. Commit을 수행하고 나면 지속적인 유지관리를 위한 자동화 도구 설정 방법을 알아볼 준비가 된 것입니다.</p>\n<p>디자인 시스템은 소프트웨어와 마찬가지로 진화해야 합니다. 이 때 중요한 점은 디자인 시스템 진화하는 동안에도 UI 컴포넌트가 원래 의도한 룩앤필(look and feel)이 유지되도록 하는 것 입니다.</p>\n<p>챕터 4에서는 온라인 협업을 위해 디자인 시스템을 자동으로 통합 및 배포하는 설정법을 배웁니다.</p>","frontmatter":{"title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기","commit":"f4c9bb5"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ko/build/","chapter":"build","framework":"react","language":"ko","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/ko/build/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/ko/build/","framework":"react","language":"ko","chapter":"build","pageType":"chapter"}},"staticQueryHashes":["238248339"]}