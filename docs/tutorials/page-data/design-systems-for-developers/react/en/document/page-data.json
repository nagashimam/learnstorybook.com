{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/en/document/","result":{"data":{"currentPage":{"html":"<p><a href=\"https://product.hubspot.com/blog/how-to-gain-widespread-adoption-of-your-design-system\">Professional</a> <a href=\"https://segment.com/blog/driving-adoption-of-a-design-system/\">frontend</a> <a href=\"https://medium.com/@didoo/measuring-the-impact-of-a-design-system-7f925af090f7\">teams</a> measure design system success by adoption. To get the full work-saving benefits of a design system, components must be widely circulated. Otherwise, what‚Äôs the point?</p>\n<p>In this chapter, we‚Äôll create a design system ‚Äúuser manual‚Äù to help stakeholders reuse components in their apps. Along the way, we‚Äôll uncover UI documentation best practices used by teams at Shopify, Microsoft, Auth0, and the UK government.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-generate-docs.jpg\" alt=\"Generate docs with Storybook automatically\"></p>\n<h2>Documentation is exhausting</h2>\n<p>It‚Äôs obvious ‚Äì documentation is invaluable for collaborative UI development. It helps teams learn how and when to use common UI components. But why does it take so much effort?</p>\n<p>If you‚Äôve ever created documentation, you probably sunk time into non-documentation tasks like site infrastructure or wrangling technical writers. And even if you find time to publish those docs, it‚Äôs grueling to maintain them while developing new features.</p>\n<p><strong>Most documentation go out of date the moment they‚Äôre created.</strong> Outdated docs undermine trust in the design system components, which results in developers opting to create new components instead of reusing what exists.</p>\n<h2>Requirements</h2>\n<p>Creating and maintaining documentation can be challenging, so it's important to minimize any obstacles. Here‚Äôs what they should do:</p>\n<ul>\n<li><strong>üîÑ Stay up to date</strong> by using the latest production code</li>\n<li><strong>‚úçÔ∏è Facilitate writing</strong> using familiar writing tools like Markdown</li>\n<li><strong>‚ö°Ô∏è Reduce maintenance time</strong> so teams can focus on writing</li>\n<li><strong>üìê Provide boilerplate</strong> so developers don‚Äôt rewrite common patterns</li>\n<li><strong>üé® Offer customizability</strong> for particularly complex use cases and components</li>\n</ul>\n<p>As Storybook users, we have a head start because component variations are already recorded as stories‚Äì-a form of documentation. A story showcases how a component is supposed to work given different inputs (props). Stories are easy to write and are self-updating because they use the production components. What‚Äôs more, stories can be regression tested using the tools in the previous chapter!</p>\n<blockquote>\n<p>When you write stories you get component prop documentation and usage examples for free! ‚Äì Justin Bennett, Engineer at Artsy</p>\n</blockquote>\n<h2>Write stories, generate docs</h2>\n<p>With the Storybook Docs addon, we can generate rich documentation from existing stories to reduce maintenance time and get out of the box defaults.\nLike the addons we've covered in the <a href=\"/tutorials/design-systems-for-developers/react/en/build/\">build</a> chapter (Controls and Actions), the Docs addon is also included and configured with each Storybook install, so we can focus on writing good documentation.</p>\n<p>Each time you open your Storybook, you should see a new entry added to the sidebar named ‚ÄúDocs‚Äù:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-7-0.png\" alt=\"Storybook docs tab\"></p>\n<p>Behind the scenes, Storybook populated the sidebar with a ‚ÄúDocs‚Äù entry for each component story that was configured via the <a href=\"https://storybook.js.org/docs/react/writing-docs/autodocs\"><code>tags</code></a> metadata property, creating an auto-generated documentation page with the most frequently used pieces like interactive previews, source code viewers, and an args table. You‚Äôll find similar features in the design system documentation of Shopify and Auth0. All in less than 2 minutes.</p>\n<h2>Generate documentation</h2>\n<p>So far, we've made a lot of progress with little effort, ensuring that our design system stays up to date codewise. Yet, the documentation still lacks a <em>human</em> touch. We need to configure it and give other developers more context (why, when, and how). Start by adding a <code>tags</code> property to the <code>Avatar</code> component story in <code>src/Avatar/Avatar.stories.jsx</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n tags: ['autodocs'],\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};`, `52714150285874650000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"52714150285874650000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.stories.jsx</div>\n<pre><code class=\"language-diff\">import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n+ tags: ['autodocs'],\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n</code></pre>\n<p>Next, let's add some additional metadata that explains what the component does. In our case, we'll add a subtitle that describes what the Avatar is used for:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  tags: ['autodocs'],\n parameters: {\n   componentSubtitle:\n     'Displays an image that represents a user or organization',\n },\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};`, `53022867559936614000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"53022867559936614000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.stories.jsx</div>\n<pre><code class=\"language-diff\">import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  tags: ['autodocs'],\n+ parameters: {\n+   componentSubtitle:\n+     'Displays an image that represents a user or organization',\n+ },\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n</code></pre>\n<p>You should now have the minimum viable documentation for the Avatar component, generated automatically by Storybook's args table and default values obtained from component's <code>propTypes</code> and <a href=\"https://jsdoc.app/\">JSdoc</a> taking the first step in reducing maintenance time and ensuring that the documentation stays up to date.</p>\n<p>However, we're not done yet. Since we're building documentation for other stakeholders, including non-technical ones as designers or consumers of the design system, we cannot assume that they know what each story represents. Let's add some descriptive text for the stories in <code>src/Avatar/Avatar.stories.jsx</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  tags: ['autodocs'],\n  parameters: {\n    componentSubtitle:\n      'Displays an image that represents a user or organization',\n  },\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\nexport const Standard = {\n  args: {\n    size: 'large',\n    username: 'Tom Coleman',\n    src: 'https://avatars2.githubusercontent.com/u/132554',\n  },\n};\n\n/**\n * 4 sizes are supported.\n */\nexport const Sizes = {\n  args: {\n    username: 'Tom Coleman',\n    src: 'https://avatars2.githubusercontent.com/u/132554',\n  },\n  render: (args) => (\n    <>\n      <Avatar {...args} size='large' />\n      <Avatar {...args} size='medium' />\n      <Avatar {...args} size='small' />\n      <Avatar {...args} size='tiny' />\n    </>\n  ),\n};\n\n/**\n * Shows the user's initials as a fallback when no image is provided.\n */\nexport const Initials = {\n  render: (args) => (\n    <>\n      <Avatar username='Tom Coleman' />\n      <Avatar username='Dominic Nguyen' />\n      <Avatar username='Varun Vachhar' />\n      <Avatar username='Michael Shilman' />\n    </>\n  ),\n};\n\n/**\n * Shows a loading indicator.\n */\nexport const Loading = {\n  args: {\n    loading: true,\n  },\n  render: (args) => (\n    <>\n      <Avatar {...args} size='large' />\n      <Avatar {...args} size='medium' />\n      <Avatar {...args} size='small' />\n      <Avatar {...args} size='tiny' />\n    </>\n  ),\n};\n\n/**\n * Shows the user's avatar when provided with a \\`src\\` prop or in various states and sizes.\n */\nexport const Large = {\n  render: () => (\n    <>\n      <Avatar loading size='large' />\n      <Avatar size='large' username='Tom Coleman' />\n      <Avatar\n        size='large'\n        username='Tom Coleman'\n        src='https://avatars2.githubusercontent.com/u/132554'\n      />\n    </>\n  ),\n};\n\n/**\n * Avatar component using Controls\n */\nexport const Controls = {\n  args: {\n    loading: false,\n    size: 'tiny',\n    username: 'Dominic Nguyen',\n    src: 'https://avatars.githubusercontent.com/u/263385',\n  },\n};`, `63294179890333240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"63294179890333240000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.stories.jsx</div>\n<pre><code class=\"language-jsx\">import { Avatar } from './Avatar';\n\nexport default {\n  title: 'Design System/Avatar',\n  component: Avatar,\n  tags: ['autodocs'],\n  parameters: {\n    componentSubtitle:\n      'Displays an image that represents a user or organization',\n  },\n  /*\n   * More on Storybook argTypes at:\n   * https://storybook.js.org/docs/react/api/argtypes\n   */\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['tiny', 'small', 'medium', 'large'],\n    },\n  },\n};\n\nexport const Standard = {\n  args: {\n    size: 'large',\n    username: 'Tom Coleman',\n    src: 'https://avatars2.githubusercontent.com/u/132554',\n  },\n};\n\n/**\n * 4 sizes are supported.\n */\nexport const Sizes = {\n  args: {\n    username: 'Tom Coleman',\n    src: 'https://avatars2.githubusercontent.com/u/132554',\n  },\n  render: (args) => (\n    &#x3C;>\n      &#x3C;Avatar {...args} size='large' />\n      &#x3C;Avatar {...args} size='medium' />\n      &#x3C;Avatar {...args} size='small' />\n      &#x3C;Avatar {...args} size='tiny' />\n    &#x3C;/>\n  ),\n};\n\n/**\n * Shows the user's initials as a fallback when no image is provided.\n */\nexport const Initials = {\n  render: (args) => (\n    &#x3C;>\n      &#x3C;Avatar username='Tom Coleman' />\n      &#x3C;Avatar username='Dominic Nguyen' />\n      &#x3C;Avatar username='Varun Vachhar' />\n      &#x3C;Avatar username='Michael Shilman' />\n    &#x3C;/>\n  ),\n};\n\n/**\n * Shows a loading indicator.\n */\nexport const Loading = {\n  args: {\n    loading: true,\n  },\n  render: (args) => (\n    &#x3C;>\n      &#x3C;Avatar {...args} size='large' />\n      &#x3C;Avatar {...args} size='medium' />\n      &#x3C;Avatar {...args} size='small' />\n      &#x3C;Avatar {...args} size='tiny' />\n    &#x3C;/>\n  ),\n};\n\n/**\n * Shows the user's avatar when provided with a `src` prop or in various states and sizes.\n */\nexport const Large = {\n  render: () => (\n    &#x3C;>\n      &#x3C;Avatar loading size='large' />\n      &#x3C;Avatar size='large' username='Tom Coleman' />\n      &#x3C;Avatar\n        size='large'\n        username='Tom Coleman'\n        src='https://avatars2.githubusercontent.com/u/132554'\n      />\n    &#x3C;/>\n  ),\n};\n\n/**\n * Avatar component using Controls\n */\nexport const Controls = {\n  args: {\n    loading: false,\n    size: 'tiny',\n    username: 'Dominic Nguyen',\n    src: 'https://avatars.githubusercontent.com/u/263385',\n  },\n};\n</code></pre>\n<p>You should now see this:</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-docspage-expanded-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4>Supercharge documentation with Markdown/MDX</h4>\n<p>Each component has unique documentation requirements, which can be challenging to address. We utilized Storybook's automatic documentation feature with the Docs addon to simplify this process. This enabled us to create comprehensive documentation while adhering to industry best practices, without incurring any additional expenses. Moving forward, we can further enhance our documentation process by identifying any potential challenges or issues that may arise when working with our components.</p>\n<p>Markdown is a straightforward format for writing text. MDX allows you to use interactive code (JSX) inside of Markdown. Storybook Docs uses MDX to give developers ultimate control over how documentation renders.</p>\n<p>As part of the Storybook install workflow, MDX files are registered by default. Your <code>.storybook/main.js</code> should look like so:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-coverage',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;\n`, `70873529503813560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"70873529503813560000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-js\">/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-coverage',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;\n\n</code></pre>\n<p>Create a new <code>src/Avatar/Avatar.mdx</code> file and supply some details. We‚Äôll remove the <code>tags</code> and <code>parameters</code> from the <code>Avatar.stories.jsx</code> file and recreate our documentation in the mdx file.</p>\n<!-- prettier-ignore-start -->\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import {\n  Canvas,\n  Controls,\n  Description,\n  Meta,\n  Subtitle,\n  Story,\n} from '@storybook/blocks';\n\nimport * as AvatarStories from './Avatar.stories';\n\n# Avatar\n\n<Meta of={AvatarStories} />\n\n<Subtitle>Displays an image that represents a user or organization</Subtitle>\n\nUse an avatar for attributing actions or content to specific users.\n\nThe user's name should _always_ be present when using Avatar ‚Äì either printed beside the avatar or in a tooltip.\n\n<Canvas>\n  <Story of={AvatarStories.Standard} />\n</Canvas>\n\n## Additional variants\n\n### Sizes\n\n<Description of={AvatarStories.Sizes} />\n\n<Story of={AvatarStories.Sizes} />\n\n### Initials\n\n<Description of={AvatarStories.Initials} />\n\n<Story of={AvatarStories.Initials} />\n\n### Loading\n\n<Description of={AvatarStories.Loading} />\n\n<Story of={AvatarStories.Loading} />\n\n### Playground\n\nInteract with the component and see how it responds to the different input properties.\n\n<Canvas>\n  <Story of={AvatarStories.Controls} />\n</Canvas>\n\n<Controls of={AvatarStories.Controls} />`, `80936179698172080000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"80936179698172080000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.mdx</div>\n<pre><code class=\"language-mdx\">import {\n  Canvas,\n  Controls,\n  Description,\n  Meta,\n  Subtitle,\n  Story,\n} from '@storybook/blocks';\n\nimport * as AvatarStories from './Avatar.stories';\n\n# Avatar\n\n&#x3C;Meta of={AvatarStories} />\n\n&#x3C;Subtitle>Displays an image that represents a user or organization&#x3C;/Subtitle>\n\nUse an avatar for attributing actions or content to specific users.\n\nThe user's name should _always_ be present when using Avatar ‚Äì either printed beside the avatar or in a tooltip.\n\n&#x3C;Canvas>\n  &#x3C;Story of={AvatarStories.Standard} />\n&#x3C;/Canvas>\n\n## Additional variants\n\n### Sizes\n\n&#x3C;Description of={AvatarStories.Sizes} />\n\n&#x3C;Story of={AvatarStories.Sizes} />\n\n### Initials\n\n&#x3C;Description of={AvatarStories.Initials} />\n\n&#x3C;Story of={AvatarStories.Initials} />\n\n### Loading\n\n&#x3C;Description of={AvatarStories.Loading} />\n\n&#x3C;Story of={AvatarStories.Loading} />\n\n### Playground\n\nInteract with the component and see how it responds to the different input properties.\n\n&#x3C;Canvas>\n  &#x3C;Story of={AvatarStories.Controls} />\n&#x3C;/Canvas>\n\n&#x3C;Controls of={AvatarStories.Controls} />\n</code></pre>\n<!-- prettier-ignore-end -->\n<p>In Storybook, your Avatar component‚Äôs ‚ÄúDocs‚Äù entry should be replaced with our sparse MDX page.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-mdx-docblocks-7-0.png\" alt=\"Storybook docs from MDX\"></p>\n<p>Storybook Docs comes with <a href=\"https://storybook.js.org/docs/react/writing-docs/doc-blocks\">‚ÄúDoc Blocks‚Äù</a>, readymade components like <a href=\"https://storybook.js.org/docs/react/api/doc-block-canvas\">interactive previews</a>, <a href=\"https://storybook.js.org/docs/react/api/doc-block-icongallery\">iconography</a>, and more. By default, they‚Äôre used behind the scenes for the auto-generated documentation pages, and they can also be extracted for individual use. Our goal is to customize Avatar‚Äôs documentation without redoing everything ourselves so let‚Äôs reuse Doc Blocks where possible.</p>\n<p>Let‚Äôs add the <a href=\"https://storybook.js.org/docs/react/api/doc-block-argtypes\"><code>ArgTypes</code></a> Doc Block to our MDX file. It will automatically generate a table of all the component‚Äôs properties and their types.</p>\n<!-- prettier-ignore-start -->\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import {\n ArgTypes,\n  Canvas,\n  Controls,\n  Description,\n  Meta,\n  Subtitle,\n  Story,\n} from '@storybook/blocks';\n\n{/* Same content as before */}\n\n<Canvas>\n  <Story of={AvatarStories.Standard} />\n</Canvas>\n\n <ArgTypes of={AvatarStories} />`, `55393898094772265000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"55393898094772265000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.mdx</div>\n<pre><code class=\"language-diff\">import {\n+ ArgTypes,\n  Canvas,\n  Controls,\n  Description,\n  Meta,\n  Subtitle,\n  Story,\n} from '@storybook/blocks';\n\n{/* Same content as before */}\n\n&#x3C;Canvas>\n  &#x3C;Story of={AvatarStories.Standard} />\n&#x3C;/Canvas>\n\n+ &#x3C;ArgTypes of={AvatarStories} />\n</code></pre>\n<!-- prettier-ignore-end -->\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-mdx-argtypes-block.png\" alt=\"Storybook docs from MDX with blocks\"></p>\n<p>Nice! We‚Äôre back to where we started, but now with complete control over ordering and content. The benefits of automated doc generation persist because we‚Äôre using Doc Blocks.</p>\n<p>Customize Avatar‚Äôs docs with a note about use cases. It gives developers context about how to take advantage of this component. We can just add markdown as we would in any other markdown document:</p>\n<!-- prettier-ignore-start -->\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`{/* Same content as before */}\n\n<Canvas>\n  <Story of={AvatarStories.Standard} />\n</Canvas>\n\n<ArgTypes of={AvatarStories} />\n\n ## Usage\n\n Avatar is used to represent a person or an organization. By default the avatar shows an image and gracefully falls back to the first initial of the username. While hydrating the component you may find it useful to render a skeleton template to indicate that Avatar is awaiting data. Avatars can be grouped with the AvatarList component.\n\n{/* Same content as before */}`, `62404094507951920000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"62404094507951920000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar/Avatar.mdx</div>\n<pre><code class=\"language-diff\">{/* Same content as before */}\n\n&#x3C;Canvas>\n  &#x3C;Story of={AvatarStories.Standard} />\n&#x3C;/Canvas>\n\n&#x3C;ArgTypes of={AvatarStories} />\n\n+ ## Usage\n\n+ Avatar is used to represent a person or an organization. By default the avatar shows an image and gracefully falls back to the first initial of the username. While hydrating the component you may find it useful to render a skeleton template to indicate that Avatar is awaiting data. Avatars can be grouped with the AvatarList component.\n\n{/* Same content as before */}\n</code></pre>\n<!-- prettier-ignore-end -->\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-mdx-usage-7-0.png\" alt=\"Storybook docs for MDX with usage info\"></p>\n<h4>Custom pages</h4>\n<p>Every design system comes with a cover page. Storybook Docs allows you to create discrete pages using MDX.</p>\n<p>Create a new file <code>src/Intro.mdx</code>:</p>\n<!-- prettier-ignore-start -->\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Meta } from '@storybook/blocks';\n\n<Meta title='Design System/Introduction' />\n\n# Introduction to the Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best practice techniques.\n\nLearn more in the [Storybook tutorials](https://storybook.js.org/tutorials/)\n`, `21329023157509554000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"21329023157509554000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Intro.stories.mdx</div>\n<pre><code class=\"language-mdx\">import { Meta } from '@storybook/blocks';\n\n&#x3C;Meta title='Design System/Introduction' />\n\n# Introduction to the Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best practice techniques.\n\nLearn more in the [Storybook tutorials](https://storybook.js.org/tutorials/)\n\n</code></pre>\n<!-- prettier-ignore-end -->\n<p>The cover page we have created here is an example of <a href=\"https://storybook.js.org/docs/react/writing-docs/mdx#writing-unattached-documentation\">\"unattached documentation\"</a> that appears differently in the sidebar compared to other auto-generated documentation pages.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-introduction-unsorted-7-0.png\" alt=\"Storybook docs with introduction page, unsorted\"></p>\n<p>To get it to appear first, we have to tell Storybook to load the Introduction file in <code>.storybook/main.js</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: [\n   '../src/Intro.mdx',\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-coverage',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;`, `67533672122521680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"67533672122521680000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-diff\">/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: [\n+   '../src/Intro.mdx',\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-coverage',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-docs-introduction-7-0.png\" alt=\"Storybook docs with introduction page\"></p>\n<h2>Publishing documentation online</h2>\n<p>If you write documentation that no one reads, is that useful? No. It‚Äôs not enough to create high-quality learning material, and we need to surface that material to stakeholders and colleagues. Right now, our docs are buried in the repo, which means folks must run the design system‚Äôs Storybook locally to see the docs.</p>\n<p>In a previous chapter, we published Storybook online for visual review. It‚Äôs easy to use the same mechanism to publish our component docs as well. Let‚Äôs add a new script to <code>package.json</code> to build our Storybook in docs mode:</p>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"build-storybook-docs\": \"storybook build  --docs\"\n  }\n}\n</code></pre>\n<p>Save and commit.</p>\n<p>Running <code>build-storybook-docs</code> in your command line or continuous integration tool will output a static site in the \"docs\" configuration. Set up a static site deployment tool <a href=\"https://www.netlify.com/\">Netlify</a> or <a href=\"https://vercel.com/\">Vercel</a> to deploy the docs site on every commit.</p>\n<div class=\"aside\">üí° As your design system grows, you may encounter organization-specific requirements that warrant custom tooling or even building your own static site using tools like Gatsby or Next. It‚Äôs easy to port markdown and MDX to other solutions.</div>\n<h2>Import the design system in other apps</h2>\n<p>Up until now, we focused inward. First, on creating durable UI components. Then, on reviewing, testing, and documenting them. Now we‚Äôll shift perspective outward to examine how teams consume design systems.</p>\n<p>Chapter 7 walks through packaging the design system for use in other apps. Learn how to combine npm, the JavaScript package manager, with Auto, a time-saving release management tool.</p>","frontmatter":{"title":"Document for stakeholders","description":"Drive design system adoption with documentation","commit":"2f95d89"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/en/document/","chapter":"document","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/en/document/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I‚Äôm learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Ë®≠Ë®à","title":"„Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®à","description":"„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É©„Ç§„Éñ„É©„É™„Éº„Åã„Çâ„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÇíÊäΩÂá∫„Åô„ÇãÊñπÊ≥ï"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÊßãÁØâ","title":"UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÊßãÁØâ„Åô„Çã","description":"Storybook „Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åó„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÊßãÁØâ„Åó„Å¶„Ç´„Çø„É≠„Ç∞Âåñ„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÁµêË´ñ","title":"ÁµêË´ñ","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÊàêÈï∑„ÅåÊôÇÈñì„ÇíÁØÄÁ¥Ñ„ÅóÁîüÁî£ÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÈÖçÂ∏É","title":"ÁµÑÁπî„ÇíÊ®™Êñ≠„Åó„Å¶UI„ÇíÈÖçÂ∏É„Åô„Çã","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„Çí„Éë„ÉÉ„Ç±„Éº„Ç∏„É≥„Ç∞„Åó‰ªñ„ÅÆ„Ç¢„Éó„É™„Å∏„Ç§„É≥„Éù„Éº„Éà„Åô„ÇãÊñπÊ≥ï„ÇíÂ≠¶„Å∂"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„Éâ„Ç≠„É•„É°„É≥„Éà","title":"„Çπ„ÉÜ„Éº„ÇØ„Éõ„É´„ÉÄ„Éº„Å´Âêë„Åë„Åü„Éâ„Ç≠„É•„É°„É≥„Éà","description":"„Éâ„Ç≠„É•„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥„Åß„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÊé°Áî®„ÇíÊé®ÈÄ≤„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„Ç§„É≥„Éà„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥","title":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„É≥„Éà„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Åü„ÇÅ„Å´ÊúÄÊñ∞„ÅÆ„É™„É™„Éº„ÇπÂèØËÉΩ„Å™„ÉÑ„Éº„É´„ÅÆ„Ç¨„Ç§„Éâ"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„É¨„Éì„É•„Éº","title":"„ÉÅ„Éº„É†„Åß„É¨„Éì„É•„Éº„Åô„Çã","description":"Á∂ôÁ∂öÁöÑ„Ç§„É≥„ÉÜ„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Å®„Éì„Ç∏„É•„Ç¢„É´„É¨„Éì„É•„Éº„ÅßÂçîÂÉç„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„ÉÜ„Çπ„Éà","title":"ÂìÅË≥™„Çí‰øù„Å§„Åü„ÇÅ„ÅÆ„ÉÜ„Çπ„Éà","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆË¶ã„ÅüÁõÆ„ÄÅÊ©üËÉΩÊÄß„ÄÅ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Çí„ÉÜ„Çπ„Éà„Åô„ÇãÊñπÊ≥ï"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„ÉØ„Éº„ÇØ„Éï„É≠„Éº","title":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Åü„ÇÅ„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº","description":"„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫ËÄÖ„ÅÆ„Åü„ÇÅ„ÅÆ„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÊ¶ÇË¶Å"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÏÑ§Í≥Ñ","title":"ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ","description":"Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨ÏóêÏÑú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ Ï∂îÏ∂úÌïòÎäî Î∞©Î≤ï"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎπåÎìú","title":"UI Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨Ï∂ïÌïòÍ∏∞","description":"Ïä§ÌÜ†Î¶¨Î∂ÅÏóêÏÑú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ïª¥Ìè¨ÎÑåÌä∏Î•º Íµ¨Ï∂ïÌïòÍ≥† Íµ¨Ï°∞ÌôîÌïòÍ∏∞"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"Ïûò Í∞ñÏ∂∞ÎÜìÏùÄ ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏúºÎ°ú ÏãúÍ∞Ñ Ï†àÏïΩÍ≥º ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î∞∞Ìè¨","title":"UI Î∞∞Ìè¨","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ Îã§Î•∏ Ïï±Ïóê Ìå®ÌÇ§ÏßïÌïòÍ≥† importÌïòÎäî Î∞©Î≤ïÏùÑ Î∞∞ÏõÅÎãàÎã§."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î¨∏ÏÑú","title":"Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûêÎ•º ÏúÑÌïú Î¨∏ÏÑú","description":"Î¨∏ÏÑúÌôîÎ•º ÌÜµÌïòÏó¨ ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÎèÑÏûÖÏùÑ Ï¥âÏßÑÌïòÍ∏∞"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÏÜåÍ∞ú","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú ÏµúÏã† Í∞úÎ∞ú Î∞©Î≤ï ÎèÑÍµ¨ Í∞ÄÏù¥Îìú"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î¶¨Î∑∞","title":"ÌåÄÍ≥º Ìï®Íªò Î¶¨Î∑∞ÌïòÍ∏∞","description":"ÏßÄÏÜçÏ†Å ÌÜµÌï©(CI)Í≥º ÎπÑÏ£ºÏñº Î¶¨Î∑∞Î•º ÌÜµÌïú ÌòëÏóÖ"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÌÖåÏä§Ìä∏","title":"ÌíàÏßà Ïú†ÏßÄÎ•º ÏúÑÌïú ÌÖåÏä§Ìä∏","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ïô∏Í¥Ä, Í∏∞Îä•ÏÑ± Î∞è Ï†ëÍ∑ºÏÑ±ÏùÑ ÌÖåÏä§Ìä∏ÌïòÎäî Î∞©Î≤ï"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)","title":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)","description":"ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûêÎ•º ÏúÑÌïú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)Ïùò Í∞úÏöî"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Constru√ß√£o","title":"Constru√ß√£o de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclus√£o","title":"Conclus√£o","description":"Sistemas de design pr√≥speros economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribui√ß√£o","title":"Distribuir o IU numa organiza√ß√£o","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplica√ß√µes"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a ado√ß√£o de sistemas de design atrav√©s de documenta√ß√£o"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdu√ß√£o","title":"Introdu√ß√£o aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produ√ß√£o"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revis√£o","title":"Revis√£o com equipas","description":"Colabora√ß√£o atrav√©s de integra√ß√£o cont√≠nua e revis√£o visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a apar√™ncia,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma vis√£o geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Êû∂ÊûÑ","title":"Êû∂ÊûÑÁ≥ªÁªü","description":"Â¶Ç‰Ωï‰ªéÁé∞ÊúâÁöÑÁªÑ‰ª∂Â∫ì‰∏≠ÊèêÂèñÂá∫ËÆæËÆ°Á≥ªÁªü"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂàõÂª∫","title":"ÂàõÂª∫ UI ÁªÑ‰ª∂","description":"‰ΩøÁî® Storybook Êù•ÂàõÂª∫ÂíåÂàÜÁ±ªÊÇ®ËÆæËÆ°Á≥ªÁªü‰∏≠ÁöÑÁªÑ‰ª∂"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊÄªÁªì","title":"ÊÄªÁªì","description":"ÊåÅÁª≠ÂèëÂ±ïÁöÑËÆæËÆ°Á≥ªÁªüÂ∏ÆÊÇ®ËäÇÁúÅÊó∂Èó¥Âπ∂ÊèêÈ´òÊïàÁéá"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂèëÂ∏É","title":"Âú®Êï¥‰∏™ÁªÑÁªá‰∏≠ÂèëÂ∏ÉÊÇ®ÁöÑ UI ÁªÑ‰ª∂","description":"Â≠¶‰π†Â¶Ç‰ΩïÊâìÂåÖÂπ∂Âú®Âà´ÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏≠ÂºïÂÖ•ÊÇ®ÁöÑËÆæËÆ°Á≥ªÁªü"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊñáÊ°£","title":"ÂÜôÁªôÂπ≤Á≥ª‰∫∫ÁöÑÊñáÊ°£","description":"ÈÄöËøáÊñáÊ°£Êé®Âä®ËÆæËÆ°Á≥ªÁªüÁöÑ‰ΩøÁî®"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÁÆÄ‰ªã","title":"ËÆæËÆ°Á≥ªÁªüÁÆÄ‰ªã","description":"ÊúÄÊñ∞ÂèëÂ∏ÉÁöÑËÆæËÆ°Á≥ªÁªüÂ∑•ÂÖ∑ÁöÑÊåáÂçó"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂÆ°Êü•","title":"‰∏éÂõ¢Èòü‰∏ÄËµ∑ÂÆ°Êü•","description":"ËßÜËßâÂÆ°Êü•‰∏éÊåÅÁª≠ÈõÜÊàêÂπ∂Ëøõ"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊµãËØï","title":"ÈÄöËøáÊµãËØïÊù•‰øùËØÅË¥®Èáè","description":"Â¶Ç‰ΩïÊµãËØïËÆæËÆ°Á≥ªÁªüÁöÑÁïåÈù¢„ÄÅÂäüËÉΩÂíåÊó†ÈöúÁ¢çËÆøÈóÆ"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"Â∑•‰ΩúÊµÅÁ®ã","title":"ËÆæËÆ°Á≥ªÁªüÁöÑÂ∑•‰ΩúÊµÅÁ®ã","description":"Ê¶ÇËø∞ÂâçÁ´ØÂºÄÂèëÂàõÂª∫ËÆæËÆ°Á≥ªÁªüÁöÑÂ∑•‰ΩúÊµÅÁ®ã"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/en/document/","framework":"react","language":"en","chapter":"document","pageType":"chapter"}},"staticQueryHashes":["238248339"]}