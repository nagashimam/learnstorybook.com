{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/en/distribute/","result":{"data":{"currentPage":{"html":"<p>From an architectural perspective, design systems are yet another frontend dependency. They are no different from popular dependencies like moment or lodash. UI components are code, so we can rely on established techniques for code reuse.</p>\n<p>This chapter walks through design system distribution from packaging UI components to importing them into other apps. We‚Äôll also uncover time-saving techniques to streamline versioning and release.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation.png\" alt=\"Propagate components to sites\"></p>\n<h2>Package the design system</h2>\n<p>Organizations have thousands of UI components spread across different apps. Previously, we extracted the most common components into our design system, and now we need to reintroduce those components back into the apps.</p>\n<p>Our design system uses JavaScript package manager npm to handle distribution, versioning, and dependency management.</p>\n<p>There are many valid methods for packaging design systems. Gander at design systems from Lonely Planet, Auth0, Salesforce, GitHub, and Microsoft to see a diversity in approaches. Some folks deliver each component as a separate package, and others ship all components in one package.</p>\n<p>For nascent design systems, the most direct way is to publish a single versioned package that encapsulates:</p>\n<ul>\n<li>üèó Common UI components</li>\n<li>üé® Design tokens (a.k.a., style variables)</li>\n<li>üìï Documentation</li>\n</ul>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-package.jpg\" alt=\"Package a design system\"></p>\n<h2>Prepare your design system for export</h2>\n<p>We have utilized a custom template for our development, testing, and documentation purposes. However, we need to improve its descriptive nature before publishing our design system. It's crucial to tidy up some initial artifacts and update the README.md with a detailed description of our design system.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more in [Storybook tutorials](https://storybook.js.org/tutorials/).`, `16961475294231665000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"16961475294231665000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">README.md</div>\n<pre><code class=\"language-markdown\"># Storybook design system tutorial\n\nThe Storybook design system tutorial is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more in [Storybook tutorials](https://storybook.js.org/tutorials/).\n</code></pre>\n<p>Now, let's examine how we will build the package system. To compile our design system, we'll use <a href=\"https://rollupjs.org/\">Rollup</a>, a JavaScript module bundler that combines small code fragments into bigger libraries or applications. The great thing is that the required settings and common entry points are already included in the <code>src/index.js</code> file and <code>rollup.config.mjs</code>, so there's no need to configure them ourselves.</p>\n<pre><code class=\"language-js\">// src/index.js\n\nimport * as styles from './shared/styles';\nimport * as global from './shared/global';\nimport * as animation from './shared/animation';\nimport * as icons from './shared/icons';\n\nexport { styles, global, animation, icons };\n\nexport * from './Avatar';\nexport * from './Badge';\nexport * from './Button';\nexport * from './Icon';\nexport * from './Link';\n</code></pre>\n<pre><code class=\"language-js\">// rollup.config.mjs\n\nimport resolve from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport terser from '@rollup/plugin-terser';\nimport peerDepsExternal from 'rollup-plugin-peer-deps-external';\nimport { babel } from '@rollup/plugin-babel';\n\n// This is required to read package.json file when\n// using Native ES modules in Node.js\n// https://rollupjs.org/command-line-interface/#importing-package-json\nimport { createRequire } from 'node:module';\nconst requireFile = createRequire(import.meta.url);\nconst packageJson = requireFile('./package.json');\n\nexport default [\n  {\n    input: 'src/index.js',\n    output: [\n      {\n        file: packageJson.main,\n        format: 'cjs',\n        sourcemap: true,\n      },\n      {\n        file: packageJson.module,\n        format: 'esm',\n        exports: 'named',\n        sourcemap: true,\n      },\n    ],\n    plugins: [\n      peerDepsExternal(),\n      resolve({\n        extensions: ['.js', '.jsx'],\n      }),\n      commonjs(),\n      terser(),\n      babel({\n        extensions: ['.js', '.jsx'],\n        exclude: 'node_modules/**',\n      }),\n    ],\n    external: ['react', 'react-dom', '@emotion/react', '@emotion/styled'],\n  },\n];\n</code></pre>\n<p>Now we can run <code>yarn build</code> to build our code into the <code>dist</code> directory -- we should add that directory to <code>.gitignore</code> too, so we don't accidentally commit it:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`// ...\ndist`, `30077667207023608000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"30077667207023608000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.gitignore</div>\n<pre><code class=\"language-TEXT\">// ...\ndist\n</code></pre>\n<h4>Adding package metadata for publication</h4>\n<p>We'll need to make changes to our <code>package.json</code> to ensure our package consumers get all the necessary information. The easiest way to do it is simply running <code>yarn init</code>--a command that initializes the package for publication:</p>\n<pre><code class=\"language-shell\"># Initializes a scoped package\nyarn init --scope=@your-npm-username\n\nyarn init v1.22.5\nquestion name (learnstorybook-design-system): @your-npm-username/learnstorybook-design-system\nquestion version (0.1.0):\nquestion description (Learn Storybook design system):Storybook design systems tutorial\nquestion entry point (dist/cjs/index.js):\nquestion repository url (https://github.com/your-username/learnstorybook-design-system.git):\nquestion author (your-npm-username &#x3C;your-email-address@email-provider.com>):\nquestion license (MIT):\nquestion private: no\n</code></pre>\n<p>The command will ask us a set of questions, some of which will be prefilled with answers, others that we‚Äôll have to think about. You‚Äôll need to pick a unique name for the package on npm (you won‚Äôt be able to use <code>learnstorybook-design-system</code> -- a good choice is <code>@your-npm-username/learnstorybook-design-system</code>).</p>\n<p>All in all, it will update <code>package.json</code> with new values as a result of those questions:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"@your-npm-username/learnstorybook-design-system\",\n  \"description\": \"Storybook design systems tutorial\",\n  \"version\": \"0.1.0\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/cjs/index.js\",\n  \"repository\": \"https://github.com/your-username/learnstorybook-design-system.git\"\n  // ...\n}\n</code></pre>\n<div class=\"aside\">\nüí° For brevity purposes <a href=\"https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\">package scopes</a> weren't mentioned. Using scopes allows you to create a package with the same name as a package created by another user or organization without conflict.\n</div>\n<p>Now that we‚Äôve prepared our package, we can publish it to npm for the first time!</p>\n<h2>Release management with Auto</h2>\n<p>To publish releases to npm, we‚Äôll use a process that also updates a changelog describing changes, sets a sensible version number, and creates git tag linking that version number to a commit in our repository. To help with all those things, we‚Äôll use an open-source tool called <a href=\"https://github.com/intuit/auto\">Auto</a>, designed for this very purpose. Auto is a command line tool we can use for various common tasks around release management. You can learn more about Auto on <a href=\"https://intuit.github.io/auto/\">their documentation site</a>.</p>\n<h4>Getting a GitHub and npm token</h4>\n<p>For the next few steps, Auto will talk to GitHub and npm. For that to work correctly, we‚Äôll need a personal access token. You can get one of those on <a href=\"https://github.com/settings/tokens\">this page</a> for GitHub. The token will need both <code>repo</code> and <code>workflow</code> scopes.</p>\n<p>For npm, you can create a token at the URL: <a href=\"https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens\">https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens</a>.</p>\n<p>You‚Äôll need a token with ‚ÄúRead and Publish‚Äù permissions.</p>\n<p>Let‚Äôs add that token to a file called <code>.env</code> in our project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`GH_TOKEN=<value you just got from GitHub>\nNPM_TOKEN=<value you just got from npm>`, `55619894432188050000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"55619894432188050000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.env</div>\n<pre><code class=\"language-TEXT\">GH_TOKEN=&#x3C;value you just got from GitHub>\nNPM_TOKEN=&#x3C;value you just got from npm>\n</code></pre>\n<p>By adding the file to <code>.gitignore</code>, we ensure that we don‚Äôt accidentally push this value to an open-source repository that all our users can see! This is crucial. If other maintainers need to publish the package locally (later we‚Äôll set things up to auto-publish when a pull request is merged into the default branch), they should set up their own <code>.env</code> file following this process:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`dist\n.env`, `50740721983617500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"50740721983617500000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.gitignore</div>\n<pre><code class=\"language-TEXT\">dist\n.env\n</code></pre>\n<h4>Create labels on GitHub</h4>\n<p>The first thing we need to do with Auto is to create a set of labels in GitHub. We‚Äôll use these labels in the future when making changes to the package (see the next chapter), and that‚Äôll allow <code>auto</code> to update the package version sensibly and create a changelog and release notes.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto create-labels`, `13511683655359908000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"13511683655359908000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn auto create-labels\n</code></pre>\n<p>If you check on GitHub, you‚Äôll now see a set of labels that <code>auto</code> would like us to use:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-auto-labels.png\" alt=\"Set of labels created on GitHub by auto\"></p>\n<p>We should tag all future PRs with one of the labels: <code>major</code>, <code>minor</code>, <code>patch</code>, <code>skip-release</code>, <code>prerelease</code>, <code>internal</code>, <code>documentation</code> before merging them.</p>\n<h4>Publish our first release with Auto manually</h4>\n<p>In the future, we‚Äôll calculate new version numbers with <code>auto</code> via scripts, but for the first release, let‚Äôs run the commands manually to understand what they do. Let‚Äôs generate our first changelog entry:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto changelog`, `5482955904774789000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"5482955904774789000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn auto changelog\n</code></pre>\n<p>It will generate a long changelog entry with every commit we‚Äôve created so far (and a warning we‚Äôve been pushing to the default branch, which we should stop doing soon).</p>\n<p>Although it is helpful to have an auto-generated changelog, so you don‚Äôt miss things, it‚Äôs also a good idea to manually edit it and craft the message in the most useful way for users. In this case, the users don‚Äôt need to know about all the commits along the way. Let‚Äôs make a nice simple message for our first v0.1.0 version. First undo the commit that Auto just created (but keep the changes:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git reset HEAD^`, `61675187269644140000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"61675187269644140000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git reset HEAD^\n</code></pre>\n<p>Then we‚Äôll update the changelog and commit it:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# v0.1.0 (Mon Jun 12 2023)\n\n- Created first version of the design system, with \\`Avatar\\`, \\`Badge\\`, \\`Button\\`, \\`Icon\\` and \\`Link\\` components.\n\n#### Authors: 1\n\n- [your-username](https://github.com/your-username)`, `8495933112420229000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"8495933112420229000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">CHANGELOG.md</div>\n<pre><code class=\"language-markdown\"># v0.1.0 (Mon Jun 12 2023)\n\n- Created first version of the design system, with `Avatar`, `Badge`, `Button`, `Icon` and `Link` components.\n\n#### Authors: 1\n\n- [your-username](https://github.com/your-username)\n</code></pre>\n<p>Let‚Äôs add that changelog to git. Note that we use <code>[skip ci]</code> to tell CI platforms to ignore these commits, else we end up in their build and publish loop.</p>\n<pre><code class=\"language-shell\">git add CHANGELOG.md\ngit commit -m \"Changelog for v0.1.0 [skip ci]\"\n</code></pre>\n<p>Now we can publish:</p>\n<pre><code class=\"language-shell\">npm --allow-same-version version 0.1.0 -m \"Bump version to: %s [skip ci]\"\nnpm publish --access=public\n</code></pre>\n<div class=\"aside\">\nüí° Don't forget to adjust the commands accordingly if you're using <a href=\"https://classic.yarnpkg.com/en/docs/cli/\">yarn</a> to publish your package. \n</div>\n<p>And use Auto to create a release on GitHub:</p>\n<pre><code class=\"language-shell\">git push --follow-tags origin main\nyarn release\n</code></pre>\n<p>Yay! We‚Äôve successfully published our package to npm and created a release on GitHub (with luck!).</p>\n<p><img src=\"/tutorials/design-systems-for-developers/npm-published-package.png\" alt=\"Package published on npm\"></p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-published-release.png\" alt=\"Release published to GitHub\"></p>\n<div class=\"aside\">\n<p>üí° Although we modified the initial release notes to make sense for the first version, <code>auto</code> automatically generates the release notes based on the commit messages for future releases.</p>\n</div>\n<p>Now, when we run <code>yarn release</code>, we‚Äôll go through all the steps we ran above (except using the auto-generated changelog) in an automated fashion. All commits to the default branch will be published.</p>\n<p>Congratulations! You set up the infrastructure to manually publish your design system releases. Now learn how to automate releases with continuous integration.</p>\n<h2>Publish releases automatically</h2>\n<p>We use GitHub Actions for continuous integration. But before proceeding, we need to securely store the GitHub and NPM tokens from earlier so that Actions can access them.</p>\n<h4>Add your tokens to GitHub Secrets</h4>\n<p>GitHub Secrets allow us to store sensitive information in our repository. In a browser window, open your GitHub repository.</p>\n<p>Click the ‚öôÔ∏è Settings tab then the <code>Secrets and variables</code> dropdown in the sidebar, followed by the <code>Actions</code> link. You'll see the following screen:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-empty-secrets-page.png\" alt=\"Empty GitHub secrets page\"></p>\n<p>Click the <strong>New repository secret</strong> button. Use <code>NPM_TOKEN</code> for the name and paste the token you got from npm earlier in this chapter.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-secrets-form-filled.png\" alt=\"Filled GitHub secrets form\"></p>\n<p>When you add the npm secret to your repository, you'll be able to access it as <code>secrets.NPM_TOKEN</code>. You don't need to set up another secret for your GitHub token. All GitHub users automatically get a <code>secrets.GITHUB_TOKEN</code> associated with their account.</p>\n<h4>Automate releases with GitHub Actions</h4>\n<p>Every time we merge a pull request, we want to publish the design system automatically. Create a new file called <code>push.yml</code> in the same folder we used earlier to <a href=\"https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/#publish-storybook\">publish Storybook</a> and add the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# Name of our action\nname: Release\n\n# The event that will trigger the action\non:\n  push:\n    branches: [main]\n\n# what the action will do\njobs:\n  release:\n    runs-on: ubuntu-latest\n    if: &quot;!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')&quot;\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n          #üëá npm token, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/distribute/ to obtain it\n          NPM_TOKEN: \\${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn release`, `20695122920383267000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20695122920383267000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.github/workflows/push.yml</div>\n<pre><code class=\"language-yml\"># Name of our action\nname: Release\n\n# The event that will trigger the action\non:\n  push:\n    branches: [main]\n\n# what the action will do\njobs:\n  release:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip') &#x26;&#x26; !contains(github.event.head_commit.message, 'skip ci')\"\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          #üëá npm token, see https://storybook.js.org/tutorials/design-systems-for-developers/react/en/distribute/ to obtain it\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn release\n</code></pre>\n<div class=\"aside\">\nAdditional permissions may be required to allow GitHub Actions to fetch the repository contents and publish the package to npm. See <a href=\"https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs\">GitHub's documentation</a> for more information.\n</div>\n<p>Save and commit your changes to the remote repository.</p>\n<p>Success! Now every time you merge a PR to the default branch, it will automatically publish a new version, incrementing the version number as appropriate due to the labels you‚Äôve added.</p>\n<div class=\"aside\">üí° We didn‚Äôt cover all of Auto‚Äôs many features and integrations that might be useful for growing design systems. Read the docs <a href=\"https://github.com/intuit/auto\">here</a>.</div>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-import.png\" alt=\"Import the design system\"></p>\n<h2>Import the design system in an app</h2>\n<p>Now that our design system lives online installing the dependency and using the UI components is trivial.</p>\n<h4>Get the example app</h4>\n<p>Earlier in this tutorial, we standardized on a popular frontend stack that includes React and Emotion. That means our example app must also use React and Emotion to take full advantage of the design system.</p>\n<div class=\"aside\">\n<p>üí° Although other techniques, such as Svelte or Web Components, can help distribute UI components without relying on a specific framework, we have focused on the most commonly used and extensively documented methods to ensure a quick start in this tutorial. Rest assured, we will explore other methods in upcoming updates.</p>\n</div>\n<p>The example application uses Storybook to facilitate <a href=\"https://www.componentdriven.org/\">Component-Driven Development</a>, an application development methodology for building UIs from the bottom, starting with components ending with pages. We‚Äôll run two Storybooks side-by-side during the demo: one for our example app and one for our design system.</p>\n<p>Run the following commands in your command line to set up the example app:</p>\n<pre><code class=\"language-shell\"># Clones the files locally\nnpx degit chromaui/learnstorybook-design-system-example-app example-app\n\ncd example-app\n\n# Install the dependencies\nyarn install\n\n## Start Storybook\nyarn storybook\n</code></pre>\n<p>You should see the Storybook running with the stories for the simple components the app uses:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-starting-storybook-7-0.png\" alt=\"Initial storybook for example app\"></p>\n<h4>Integrating the design system</h4>\n<p>We have our design system's Storybook published. Let's add it to our example app. We can do that by updating example app‚Äôs <code>.storybook/main.js</code> to the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n refs: {\n   &quot;design-system&quot;: {\n     title: 'My design system',\n     //üëá The url provided by Chromatic when it was deployed\n     url: 'https://your-published-url.chromatic.com',\n   },\n },\n};\nexport default config;`, `99591599390519560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"99591599390519560000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-diff\">/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n+ refs: {\n+   \"design-system\": {\n+     title: 'My design system',\n+     //üëá The url provided by Chromatic when it was deployed\n+     url: 'https://your-published-url.chromatic.com',\n+   },\n+ },\n};\nexport default config;\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/design-systems-for-developers/storybook-composition-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<div class=\"aside\">\nüí° Adding the <code>refs</code> key to <code>.storybook/main.js</code>, allows us to <a href=\"https://storybook.js.org/docs/react/sharing/storybook-composition\">compose</a> multiple Storybooks into one. This is helpful when working with big projects that might spread around multiple repositories or use different tech stacks. \n</div>\n<p>You‚Äôll now be able to browse the design system components and docs while developing the example app. Showcasing the design system during feature development increases the likelihood that developers will reuse existing components instead of wasting time inventing their own.</p>\n<p>We have what we need, time to add our design system and start using it. Run the following command in your terminal:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add @your-npm-username/learnstorybook-design-system`, `37380547344090200000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"37380547344090200000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add @your-npm-username/learnstorybook-design-system\n</code></pre>\n<p>We'll need to use the same global styles defined in the design system, so we'll need to update <a href=\"https://storybook.js.org/docs/react/configure/overview#configure-story-rendering\"><code>.storybook/preview.jsx</code></a> config file and add a <a href=\"https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\">global decorator</a>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Global } from '@emotion/react';\n\n// The styles imported from the design system.\nimport { global as designSystemGlobal } from '@your-npm-username/learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  /*\n  * Adds a global decorator to include the imported styles from the design system.\n  * More on Storybook decorators at:\n  * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n  */\n  decorators: [\n    (Story) => (\n      <>\n        <Global styles={GlobalStyle} />\n        <Story />\n      </>\n    ),\n  ],\n  /*\n  * More on Storybook parameters at:\n  * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n  */\n  parameters: {\n    actions: { argTypesRegex: &quot;^on[A-Z].*&quot; },\n    controls: {\n      matchers: {\n        color: /(background|color)\\$/i,\n        date: /Date\\$/,\n      },\n    },\n  },\n};\n\nexport default preview;`, `24552769941392040000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"24552769941392040000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.jsx</div>\n<pre><code class=\"language-jsx\">import { Global } from '@emotion/react';\n\n// The styles imported from the design system.\nimport { global as designSystemGlobal } from '@your-npm-username/learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  /*\n  * Adds a global decorator to include the imported styles from the design system.\n  * More on Storybook decorators at:\n  * https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators\n  */\n  decorators: [\n    (Story) => (\n      &#x3C;>\n        &#x3C;Global styles={GlobalStyle} />\n        &#x3C;Story />\n      &#x3C;/>\n    ),\n  ],\n  /*\n  * More on Storybook parameters at:\n  * https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\n  */\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-with-design-system-stories-7-0.png\" alt=\"Example app storybook with design system stories\"></p>\n<p>We‚Äôll use the <code>Avatar</code> component from our design system in the example app‚Äôs <code>UserItem</code> component. <code>UserItem</code> should render information about a user, including a name and profile photo.</p>\n<p>In your editor, open the <code>UserItem</code> component located in <code>src/components/UserItem.js</code>. Also, select <code>UserItem</code> in your Storybook to see the code changes we're about to make instantly with hot module reload.</p>\n<p>Import the Avatar component.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from '@your-npm-username/learnstorybook-design-system';`, `40874886968348340000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"40874886968348340000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.jsx</div>\n<pre><code class=\"language-js\">import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n</code></pre>\n<p>We want to render the Avatar beside the username.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import PropTypes from 'prop-types';\n\nimport styled from '@emotion/styled';\n\n import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n\nconst Container = styled.div\\`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n\\`;\n\n\nconst Name = styled.span\\`\n  color: #333;\n  font-size: 16px;\n\\`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  <Container>\n   <Avatar username={name} src={avatarUrl} />\n    <Name>{name}</Name>\n  </Container>\n);\n\nUserItem.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    avatarUrl: PropTypes.string,\n  }),\n};\n`, `51469896255417520000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"51469896255417520000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.jsx</div>\n<pre><code class=\"language-diff\">import PropTypes from 'prop-types';\n\nimport styled from '@emotion/styled';\n\n+ import { Avatar } from '@your-npm-username/learnstorybook-design-system';\n\nconst Container = styled.div`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n`;\n\n- const Avatar = styled.img`\n-   border: 1px solid black;\n-   width: 30px;\n-   height: 30px;\n-   margin-right: 0.5em;\n- `;\n\nconst Name = styled.span`\n  color: #333;\n  font-size: 16px;\n`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  &#x3C;Container>\n+   &#x3C;Avatar username={name} src={avatarUrl} />\n    &#x3C;Name>{name}&#x3C;/Name>\n  &#x3C;/Container>\n);\n\nUserItem.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    avatarUrl: PropTypes.string,\n  }),\n};\n\n</code></pre>\n<p>Upon save, the <code>UserItem</code> component will update in Storybook to show the new Avatar component. Since <code>UserItem</code> is a part of the <code>UserList</code> component, you‚Äôll also see the <code>Avatar</code> in <code>UserList</code>.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-using-design-system-7-0.png\" alt=\"Example app using the Design System\"></p>\n<p>There you have it! You just imported a design system component into the example app. Whenever you publish an update to the Avatar component in the design system, that change will also be reflected in the example app when you update the package.</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation-storybook.png\" alt=\"Distribute design systems\"></p>\n<h2>Master the design system workflow</h2>\n<p>The design system workflow starts with developing UI components in Storybook and ends with distributing them to client apps. That‚Äôs not all though. Design systems must continually evolve to serve ever-changing product requirements, and our work has only just begun.</p>\n<p>Chapter 8 illustrates the end-to-end design system workflow we created in this guide. We‚Äôll see how UI changes ripple outward from the design system.</p>","frontmatter":{"title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps","commit":"dabd221"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/en/distribute/","chapter":"distribute","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/en/distribute/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I‚Äôm learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Ë®≠Ë®à","title":"„Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®à","description":"„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É©„Ç§„Éñ„É©„É™„Éº„Åã„Çâ„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÇíÊäΩÂá∫„Åô„ÇãÊñπÊ≥ï"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÊßãÁØâ","title":"UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÊßãÁØâ„Åô„Çã","description":"Storybook „Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åó„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÊßãÁØâ„Åó„Å¶„Ç´„Çø„É≠„Ç∞Âåñ„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÁµêË´ñ","title":"ÁµêË´ñ","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÊàêÈï∑„ÅåÊôÇÈñì„ÇíÁØÄÁ¥Ñ„ÅóÁîüÁî£ÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÈÖçÂ∏É","title":"ÁµÑÁπî„ÇíÊ®™Êñ≠„Åó„Å¶UI„ÇíÈÖçÂ∏É„Åô„Çã","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„Çí„Éë„ÉÉ„Ç±„Éº„Ç∏„É≥„Ç∞„Åó‰ªñ„ÅÆ„Ç¢„Éó„É™„Å∏„Ç§„É≥„Éù„Éº„Éà„Åô„ÇãÊñπÊ≥ï„ÇíÂ≠¶„Å∂"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„Éâ„Ç≠„É•„É°„É≥„Éà","title":"„Çπ„ÉÜ„Éº„ÇØ„Éõ„É´„ÉÄ„Éº„Å´Âêë„Åë„Åü„Éâ„Ç≠„É•„É°„É≥„Éà","description":"„Éâ„Ç≠„É•„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥„Åß„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÊé°Áî®„ÇíÊé®ÈÄ≤„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„Ç§„É≥„Éà„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥","title":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„É≥„Éà„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Åü„ÇÅ„Å´ÊúÄÊñ∞„ÅÆ„É™„É™„Éº„ÇπÂèØËÉΩ„Å™„ÉÑ„Éº„É´„ÅÆ„Ç¨„Ç§„Éâ"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„É¨„Éì„É•„Éº","title":"„ÉÅ„Éº„É†„Åß„É¨„Éì„É•„Éº„Åô„Çã","description":"Á∂ôÁ∂öÁöÑ„Ç§„É≥„ÉÜ„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Å®„Éì„Ç∏„É•„Ç¢„É´„É¨„Éì„É•„Éº„ÅßÂçîÂÉç„Åô„Çã"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„ÉÜ„Çπ„Éà","title":"ÂìÅË≥™„Çí‰øù„Å§„Åü„ÇÅ„ÅÆ„ÉÜ„Çπ„Éà","description":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆË¶ã„ÅüÁõÆ„ÄÅÊ©üËÉΩÊÄß„ÄÅ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Çí„ÉÜ„Çπ„Éà„Åô„ÇãÊñπÊ≥ï"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"„ÉØ„Éº„ÇØ„Éï„É≠„Éº","title":"„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Åü„ÇÅ„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº","description":"„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫ËÄÖ„ÅÆ„Åü„ÇÅ„ÅÆ„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÊ¶ÇË¶Å"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ÏÑ§Í≥Ñ","title":"ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ","description":"Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨ÏóêÏÑú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ Ï∂îÏ∂úÌïòÎäî Î∞©Î≤ï"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎπåÎìú","title":"UI Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨Ï∂ïÌïòÍ∏∞","description":"Ïä§ÌÜ†Î¶¨Î∂ÅÏóêÏÑú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ïª¥Ìè¨ÎÑåÌä∏Î•º Íµ¨Ï∂ïÌïòÍ≥† Íµ¨Ï°∞ÌôîÌïòÍ∏∞"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"Ïûò Í∞ñÏ∂∞ÎÜìÏùÄ ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏúºÎ°ú ÏãúÍ∞Ñ Ï†àÏïΩÍ≥º ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î∞∞Ìè¨","title":"UI Î∞∞Ìè¨","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ Îã§Î•∏ Ïï±Ïóê Ìå®ÌÇ§ÏßïÌïòÍ≥† importÌïòÎäî Î∞©Î≤ïÏùÑ Î∞∞ÏõÅÎãàÎã§."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î¨∏ÏÑú","title":"Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûêÎ•º ÏúÑÌïú Î¨∏ÏÑú","description":"Î¨∏ÏÑúÌôîÎ•º ÌÜµÌïòÏó¨ ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÎèÑÏûÖÏùÑ Ï¥âÏßÑÌïòÍ∏∞"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÏÜåÍ∞ú","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú ÏµúÏã† Í∞úÎ∞ú Î∞©Î≤ï ÎèÑÍµ¨ Í∞ÄÏù¥Îìú"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Î¶¨Î∑∞","title":"ÌåÄÍ≥º Ìï®Íªò Î¶¨Î∑∞ÌïòÍ∏∞","description":"ÏßÄÏÜçÏ†Å ÌÜµÌï©(CI)Í≥º ÎπÑÏ£ºÏñº Î¶¨Î∑∞Î•º ÌÜµÌïú ÌòëÏóÖ"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÌÖåÏä§Ìä∏","title":"ÌíàÏßà Ïú†ÏßÄÎ•º ÏúÑÌïú ÌÖåÏä§Ìä∏","description":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ïô∏Í¥Ä, Í∏∞Îä•ÏÑ± Î∞è Ï†ëÍ∑ºÏÑ±ÏùÑ ÌÖåÏä§Ìä∏ÌïòÎäî Î∞©Î≤ï"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)","title":"ÎîîÏûêÏù∏ ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)","description":"ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûêÎ•º ÏúÑÌïú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)Ïùò Í∞úÏöî"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Constru√ß√£o","title":"Constru√ß√£o de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclus√£o","title":"Conclus√£o","description":"Sistemas de design pr√≥speros economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribui√ß√£o","title":"Distribuir o IU numa organiza√ß√£o","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplica√ß√µes"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a ado√ß√£o de sistemas de design atrav√©s de documenta√ß√£o"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdu√ß√£o","title":"Introdu√ß√£o aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produ√ß√£o"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revis√£o","title":"Revis√£o com equipas","description":"Colabora√ß√£o atrav√©s de integra√ß√£o cont√≠nua e revis√£o visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a apar√™ncia,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma vis√£o geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Êû∂ÊûÑ","title":"Êû∂ÊûÑÁ≥ªÁªü","description":"Â¶Ç‰Ωï‰ªéÁé∞ÊúâÁöÑÁªÑ‰ª∂Â∫ì‰∏≠ÊèêÂèñÂá∫ËÆæËÆ°Á≥ªÁªü"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂàõÂª∫","title":"ÂàõÂª∫ UI ÁªÑ‰ª∂","description":"‰ΩøÁî® Storybook Êù•ÂàõÂª∫ÂíåÂàÜÁ±ªÊÇ®ËÆæËÆ°Á≥ªÁªü‰∏≠ÁöÑÁªÑ‰ª∂"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊÄªÁªì","title":"ÊÄªÁªì","description":"ÊåÅÁª≠ÂèëÂ±ïÁöÑËÆæËÆ°Á≥ªÁªüÂ∏ÆÊÇ®ËäÇÁúÅÊó∂Èó¥Âπ∂ÊèêÈ´òÊïàÁéá"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂèëÂ∏É","title":"Âú®Êï¥‰∏™ÁªÑÁªá‰∏≠ÂèëÂ∏ÉÊÇ®ÁöÑ UI ÁªÑ‰ª∂","description":"Â≠¶‰π†Â¶Ç‰ΩïÊâìÂåÖÂπ∂Âú®Âà´ÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏≠ÂºïÂÖ•ÊÇ®ÁöÑËÆæËÆ°Á≥ªÁªü"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊñáÊ°£","title":"ÂÜôÁªôÂπ≤Á≥ª‰∫∫ÁöÑÊñáÊ°£","description":"ÈÄöËøáÊñáÊ°£Êé®Âä®ËÆæËÆ°Á≥ªÁªüÁöÑ‰ΩøÁî®"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÁÆÄ‰ªã","title":"ËÆæËÆ°Á≥ªÁªüÁÆÄ‰ªã","description":"ÊúÄÊñ∞ÂèëÂ∏ÉÁöÑËÆæËÆ°Á≥ªÁªüÂ∑•ÂÖ∑ÁöÑÊåáÂçó"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÂÆ°Êü•","title":"‰∏éÂõ¢Èòü‰∏ÄËµ∑ÂÆ°Êü•","description":"ËßÜËßâÂÆ°Êü•‰∏éÊåÅÁª≠ÈõÜÊàêÂπ∂Ëøõ"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"ÊµãËØï","title":"ÈÄöËøáÊµãËØïÊù•‰øùËØÅË¥®Èáè","description":"Â¶Ç‰ΩïÊµãËØïËÆæËÆ°Á≥ªÁªüÁöÑÁïåÈù¢„ÄÅÂäüËÉΩÂíåÊó†ÈöúÁ¢çËÆøÈóÆ"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"Â∑•‰ΩúÊµÅÁ®ã","title":"ËÆæËÆ°Á≥ªÁªüÁöÑÂ∑•‰ΩúÊµÅÁ®ã","description":"Ê¶ÇËø∞ÂâçÁ´ØÂºÄÂèëÂàõÂª∫ËÆæËÆ°Á≥ªÁªüÁöÑÂ∑•‰ΩúÊµÅÁ®ã"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","language":"en","chapter":"distribute","pageType":"chapter"}},"staticQueryHashes":["238248339"]}