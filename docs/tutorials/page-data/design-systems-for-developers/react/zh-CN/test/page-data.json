{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/zh-CN/test/","result":{"data":{"currentPage":{"html":"<p>在第五章，我们将通过自动化脚本来测试设计系统以规避 UI 问题。本章将会深入讨论 UI 组件有哪些属性值得去测试以及如何避免潜在的问题。我们通过研究 Wave、BCC 和 Salesforce 这样的专业团队去寻求在高覆盖范围、低设置难度和低维护成本间之间找到一个平衡点。</p>\n<img src=\"/tutorials/design-systems-for-developers/ui-component.png\" width=\"250\">\n<h2>UI 组件的测试基础</h2>\n<p>在开始之前，我们需要先搞清楚什么样的测试是合理的。设计系统是由 UI 组件组成的，每个 UI 组件都有自己的 stories, 这些 stories 描述了在不同输入值的情况下组件预期的外观是什么样子。然后 Stories 通过浏览器或者其他设备呈现给终端用户。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-test-cases.png\" alt=\"Component states are combinatorial\"></p>\n<p>哇！如您所见，一个组件包含很多的状态。将每个组件的状态乘以在设计系统中组件的数量您就会发现持续关注每个组件是一项不可能完成的任务。实际上，手工审查每个元素的每一个状态不是长久之道，尤其当设计系统越来越庞大。</p>\n<p><strong>现在</strong>我们更需要设置自动测试来节约<strong>以后</strong>的工作时间。</p>\n<h2>测前须知</h2>\n<p>在 <a href=\"https://storybook.js.org/blog/ui-testing-playbook/\">之前的文章</a> 中，我们调查了 10 个参与专业 Storybook 工作流程的前端团队。 他们认为开发故事是一种最佳实践，可以使测试变得简单而全面。</p>\n<p><strong>清楚地将组件支持的状态</strong>表达为 stories 可以阐明不同的输入组合所对应的组件状态，尽可能去忽略不支持的状态来降低干扰。</p>\n<p>使用<strong>一致性的渲染</strong>原则来避免由随机（Math.random）或相对输入（Date.now）而带来的不确定性。</p>\n<blockquote>\n<p>“最好的 stories 应让您可视化您可以体验到的所有的组件状态” – Tim Hingston, Tech lead at Apollo GraphQL</p>\n</blockquote>\n<h2>用视觉测试来测试组件外观</h2>\n<p>设计系统包含了可展示的 UI 组件，这些组件基本上都是可视的。视觉测试验证了渲染后的 UI 组件的视觉效果。</p>\n<p>视觉测试会在一个保持一致的浏览器环境下对每个 UI 组件截图。新的截图将会自动与之前的基准截图进行对比，如果在视觉上有任何不同，您将会被告知。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-visual-testing.gif\" alt=\"Visual test components\"></p>\n<p>如果您在创建现代化 UI，视觉测试可帮助您的前端开发团队节省人工审查的时间，也可以避免昂贵的 UI 回归测试。我们将使用 Storybook 维护者提供的工业级服务 Chromatic 来演示视觉测试。</p>\n<p>在 <a href=\"https://www.learnstorybook.com/design-systems-for-developers/react/zh-cn/review/#publish-storybook\">之前的章节</a> 我们学习到如何使用 <a href=\"https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">Chromatic</a> 去发布一个 Storybook。 我们为 <code>Button</code> 组件添加了一个红色边框并向同事来寻求反馈。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-button-border-change.png\" alt=\"Button red border\"></p>\n<p>现在我们使用 Chromatic 内置的工具 <a href=\"https://www.chromatic.com/features/test/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">testing tools</a> 来看看视觉测试是如何工作的。当合并请求被创建的时候，Chromatic 获取到我们组件和之前组件的变化差异图。有 3 个改动被发现：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-list-of-checks.png\" alt=\"List of checks in the pull request\"></p>\n<p>点击 \"🟡 UI Tests\" 按钮来浏览它们。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-second-build-from-pr.png\" alt=\"Second build in Chromatic with changes\"></p>\n<p>您看！细微的调整导致大量的 UI 发生变化</p>\n<p>审查这些变化来确定是有意（改进）或无意（bugs）而为之的。如果您同意该改动，那么对比基线则会更新为当前最新版本，这意味着之后的版本将会拿该基线来对比和识别 bug。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-review-changes-pr.png\" alt=\"Reviewing changes in Chromatic\"></p>\n<p>在上一章中，因为一些原因，我们的同事不喜欢红色边框的 <code>Button</code> 组件，所以我们需要拒绝修改来表明本次提交需要被撤销。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/chromatic-review-deny.png\" alt=\"Review deny in Chromatic\"></p>\n<p>撤销这些改动并且重新提交代码来发起另一轮视觉审查。</p>\n<h2>用单元测试来测试功能</h2>\n<p>单元测试验证了在给定输入下 UI 代码是否能返回正确的输出值。它与组件并存来帮助您验证特定的功能。</p>\n<p>在像 React、Vue 和 Angular 这样的视图层中任何东西都可以看作一个组件。组件封装了各种功能，从简单的按钮到精致的日期选择器。越错综复杂的组件，越是难以用视觉测试去捕获细微的差别，这就是为什么我们需要单元测试的原因。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/component-unit-testing.gif\" alt=\"Unit test components\"></p>\n<p>例如当与生成系统链接的组件（ReactRouter 中的 “LinkWrappers”、 Gatsby 或 Next.js）结合时，我们的 Link 组件就会变得很复杂。一个错误的实现可能就会导致我们链接没有有效的 href 值。</p>\n<p>从视觉层面上来看，我们是无法判断 <code>href</code> 属性是不是指向一个正确的地方，此时使用单元测试刚好可以避免该问题。</p>\n<h4>用单元测试验证 hrefs</h4>\n<p>让我们为 <code>Link</code> 组件添加一个单元测试。 create-react-app 已经配置好了一个单元测试的运行环境，所以我们只需要创建一个文件 <code>src/Link.test.js</code>：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from './Link';\n\n// A straightforward link wrapper that renders an <a> with the passed props. What we are testing\n// here is that the Link component passes the right props to the wrapper and itselfs\nconst LinkWrapper = (props) => <a {...props} />; // eslint-disable-line jsx-a11y/anchor-has-content\n\nit('has a href attribute when rendering with linkWrapper', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(\n    <Link href=&quot;https://learnstorybook.com&quot; LinkWrapper={LinkWrapper}>\n      Link Text\n    </Link>,\n    div\n  );\n\n  expect(div.querySelector('a[href=&quot;https://learnstorybook.com&quot;]')).not.toBeNull();\n  expect(div.textContent).toEqual('Link Text');\n\n  ReactDOM.unmountComponentAtNode(div);\n});`, `48915275615849470000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"48915275615849470000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Link.test.js</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from './Link';\n\n// A straightforward link wrapper that renders an &#x3C;a> with the passed props. What we are testing\n// here is that the Link component passes the right props to the wrapper and itselfs\nconst LinkWrapper = (props) => &#x3C;a {...props} />; // eslint-disable-line jsx-a11y/anchor-has-content\n\nit('has a href attribute when rendering with linkWrapper', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(\n    &#x3C;Link href=\"https://learnstorybook.com\" LinkWrapper={LinkWrapper}>\n      Link Text\n    &#x3C;/Link>,\n    div\n  );\n\n  expect(div.querySelector('a[href=\"https://learnstorybook.com\"]')).not.toBeNull();\n  expect(div.textContent).toEqual('Link Text');\n\n  ReactDOM.unmountComponentAtNode(div);\n});\n</code></pre>\n<p>我们可以通过执行 <code>yarn test</code> 来运行上述测试</p>\n<p><img src=\"/tutorials/design-systems-for-developers/jest-test.png\" alt=\"Running a single Jest test\"></p>\n<p>之前我们已经配置了我们的 GitHub action 来部署 Storybook。现在我们可以修改它来让它帮助我们运行测试。代码贡献者也会从中获益，我们也会对强大的 Link 组件保持信心。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# ... same as before\njobs:\n  test:\n    # the operating system it will run on\n    runs-on: ubuntu-latest\n    # the list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v1\n      - run: yarn\n      - run: yarn test # adds the test command\n      - uses: chromaui/action@v1\n        # options required to the GitHub chromatic action\n        with:\n          # our project token, to see how to obtain it\n          # refer to https://www.learnstorybook.com/intro-to-storybook/react/en/deploy/ (update link)\n          projectToken: project-token\n          token: \\${{ secrets.GITHUB_TOKEN }}`, `71374121384244840000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"71374121384244840000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.github/workflows/chromatic.yml</div>\n<pre><code class=\"language-yaml\"># ... same as before\njobs:\n  test:\n    # the operating system it will run on\n    runs-on: ubuntu-latest\n    # the list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v1\n      - run: yarn\n      - run: yarn test # adds the test command\n      - uses: chromaui/action@v1\n        # options required to the GitHub chromatic action\n        with:\n          # our project token, to see how to obtain it\n          # refer to https://www.learnstorybook.com/intro-to-storybook/react/en/deploy/ (update link)\n          projectToken: project-token\n          token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/gh-action-with-test-successful-build.png\" alt=\"Successful circle build\"></p>\n<div class=\"aside\"> 请注意: 过多的单元测试可能会导致更新组件变得更复杂，所以建议您在设计系统中适度的使用单元测试。</div>\n<blockquote>\n<p>\"越来越强大的自动化测试套件使我们团队更有信心的加快开发脚步\" – Dan Green-Leipciger, Senior software engineer at Wave</p>\n</blockquote>\n<h2>无障碍访问测试</h2>\n<p>“无障碍访问意味着所有的人（包括残疾人）都可以理解、导航并与您的应用进行交互......在线[示例包括]访问内容的其他替代方案，例如使用 Tab 键和屏幕阅读器来遍历整个网站内容”。作者：<a href=\"https://medium.com/storybookjs/instant-accessibility-qa-linting-in-storybook-4a474b0f5347\">Alex Wilson from T.Rowe Price</a>.</p>\n<p>根据<a href=\"https://www.who.int/disabilities/world_report/2011/report/en/\">世界卫生组织</a>统计，目前全球有 15%的残疾人。由于囊括了用户界面的 UI，所以设计系统对无障碍访问的影响很大。提高哪怕单个组件的可访问性就意味着整个公司的每个用到该实例的地方都会收益。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-accessibility-addon.png\" alt=\"Storybook accessibility addon\"></p>\n<p>为相关的 UI 组件添加 Storybook 的无障碍访问插件，它是一个实时验证 Web 可访问性标准（WCAG）的工具</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @storybook/addon-a11y\n`, `57461277795497280000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"57461277795497280000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @storybook/addon-a11y\n\n</code></pre>\n<p>在文件 <code>.storybook/main.js</code> 中添加插件:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n    '@storybook/addon-knobs',\n    '@storybook/addon-a11y',\n  ],\n};`, `66876203502309190000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"66876203502309190000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-js\">module.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n    '@storybook/addon-knobs',\n    '@storybook/addon-a11y',\n  ],\n};\n</code></pre>\n<p>并且在文件 <code>.storybook/preview.js</code> 添加 <code>withA11y</code> 修饰器</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { withA11y } from '@storybook/addon-a11y';\n\nimport { GlobalStyle } from '../src/components/shared/global';\n\naddDecorator(withA11y);\naddDecorator((story) => (\n  <>\n    <GlobalStyle />\n    {story()}\n  </>\n));`, `88729475208592230000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"88729475208592230000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { withA11y } from '@storybook/addon-a11y';\n\nimport { GlobalStyle } from '../src/components/shared/global';\n\naddDecorator(withA11y);\naddDecorator((story) => (\n  &#x3C;>\n    &#x3C;GlobalStyle />\n    {story()}\n  &#x3C;/>\n));\n</code></pre>\n<p>当您完成安装后， “Accessibility” 页签将会出现在 Storybook 的插件面板中。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-a11y.png\" alt=\"Storybook a11y addon\"></p>\n<p>它会告诉您 DOM 元素的无障碍访问等级（违反标准或通过标准）。单击 “highlight results” 选择框便会可视化您 UI 组件不符合标准的设置。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-a11y-highlighted.png\" alt=\"Storybook a11y addon with passes highlighted\"></p>\n<p>然后我们只需遵循插件给出的关于无障碍访问的建议即可。</p>\n<h2>其他测试策略</h2>\n<p>矛盾的是，测试可以节省时间但也会降低维护速度。您需要自己判断做正确的“测试”，而不是“全部”测试。即使软件开发有很多测试策略，我们还是发现有一些不适合设计系统的。</p>\n<h4>快照测试 (Jest)</h4>\n<p>这个技术会捕捉 UI 组件实际的输出代码，并将其与以前的版本进行比较。它并不会测试 UI 组件在浏览器中的具体表现，而是通过对比 UI 组件生成的标记代码来测试代码实现细节是否发生变化。</p>\n<p>利用快照来对比代码差异是不可预测的，容易产生误报。在组件级别，代码快照是无法兼顾到设计变量、css 和 第三方 API 更新（网络字体， stripe 表单，Google Maps 等）等全局上的更改。实际上，开发人员往往会重新生成快照或直接忽略快照测试。</p>\n<blockquote>\n<p>大多数情况下的组件快照测试只是低配版的截图测试。测试您的输出，应更加关注在内容上面而不是底层的标记代码（很容易改变！）。 – Mark Dalgliesh, Frontend infrastructure at SEEK, CSS modules creator</p>\n</blockquote>\n<h4>端到端测试 (Selenium, Cypress)</h4>\n<p>端到端测试用来模拟用户的操作，它们比较适合应用在应用程序的一个流程上（比如：注册或者结账流程），功能越复杂该测试策略越有效。</p>\n<p>设计系统大多由功能相对简单的原子组件构成，往往不需要验证用户流程，而且创建测试其实是比较耗时的，也需要经常维护。但是，在极少数情况下，端到端测试可能会帮助到组件，例如，验证复杂的 UI 组件（如：日期选择器或付款表单）。</p>\n<h2>使用文档推动组件的使用</h2>\n<p>由于设计系统为整个组织的干系人服务，所以不仅仅只有测试，我们需要教别人如果使用经过良好测试的 UI 组件。</p>\n<p>在第六章，我们将学习如何通过文档来推动组件的使用，深入了解为什么说用较少的工作就能创建比较全面的文档的 Storybook Docs 插件是一个秘密武器。</p>","frontmatter":{"title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问","commit":"5f69e5c"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/test/","chapter":"test","framework":"react","language":"zh-CN","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/zh-CN/test/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","language":"zh-CN","chapter":"test","pageType":"chapter"}},"staticQueryHashes":["238248339"]}