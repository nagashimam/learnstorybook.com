{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/zh-CN/build/","result":{"data":{"currentPage":{"html":"<p>在第三章中，我们将使用最受欢迎的组件资源管理器 Storybook 来创建我们的设计系统。 本指南目的是向您展示专业团队如何构建他们的设计系统。和他们一样，我们也会详细关注：代码整洁、帮助节省时间的 Storybook 插件和目录结构。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-framework-storybook.jpg\" alt=\"Where Storybook fits in\"></p>\n<h2>代码格式和代码整洁</h2>\n<p>设计系统是需要协作的，所以使用工具来修复错误语法、标准化代码格式对于提高文档质量至关重要。而且使用工具去管理代码一致性的工作量远远小于手动管理代码，因此这对于设计系统的开发者来说是一个非常明智的选择。</p>\n<p>在本指南中，我们将使用 VSCode 作为我们的编辑器，您同样可以使用 Atom、Sublime 或者 Intellij。</p>\n<p>如果我们将 Prettier 添加到我们的项目中并且正确的配置了编辑器，那么 Prettier 会保证我们所有人的代码格式一致。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev prettier`, `21239834322258088000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"21239834322258088000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev prettier\n</code></pre>\n<p>如果您是第一次使用 Prettier， 你可能需要设置您的编辑器。在 VSCode 中，安装 Prettier 的插件：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/prettier-addon.png\" alt=\"Prettier addon for VSCode\"></p>\n<p>启用保存时自动格式化 <code>editor.formatOnSave</code> 如果您之前是禁用的。 当你安装完 Prettier 后，每当你保存修改时你就会发现你的代码会被自动格式化。</p>\n<h2>安装 Storybook</h2>\n<p>Storybook <a href=\"https://www.chromatic.com/blog/ui-component-explorers---your-new-favorite-tool/\">组件资源管理器</a> 是用于独立开发 UI 组件的行业标准。由于设计系统专注于 UI 组件，因此使用 Storybook 在此场景下是非常合适的。我们将使用以下功能：</p>\n<ul>\n<li>📕 对 UI 组件进行分类</li>\n<li>📄 将所有组件转换成 stories</li>\n<li>⚡️ 开发提升开发体验的工具，如模块热替换</li>\n<li>🛠 支持包含 React 在内的各种视图层框架</li>\n</ul>\n<p>安装并运行 Storybook</p>\n<pre><code class=\"language-shell\"># Installs Storybook\nnpx storybook init\n\n# Starts Storybook in development mode\nyarn storybook\n</code></pre>\n<p>安装完成后您应该可以看到下图:</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-initial.png\" alt=\"Initial Storybook UI\"></p>\n<p>赞，我们已经设置好了组件资源浏览器！</p>\n<p>您的 Storybook 应该重新加载成下图的样子（请注意，字体的样式可能会有一些偏差，参照：\"Initials\"。译者注：字体和示例中的不一样）</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-initial-stories.png\" alt=\"Initial set of stories\"></p>\n<h4>添加全局样式</h4>\n<p>我们的设计系统需要一些全局样式（CSS 样式重载） 应用于整个文档以保证组件可以被正常的显示出来。您可以通过全局通用标签的形式轻易的添加全局样式。在该文件中 <code>src/shared/global.js</code> 调整您的全局样式：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { createGlobalStyle, css } from 'styled-components';\nimport { color, typography } from './styles';\n\nexport const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css\\`\n  /* same as before */\n\\`;\n\nexport const GlobalStyle = createGlobalStyle\\`\n body {\n   \\${bodyStyles}\n }\n\\`;`, `10245828945624824000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"10245828945624824000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/shared/global.js</div>\n<pre><code class=\"language-js\">import { createGlobalStyle, css } from 'styled-components';\nimport { color, typography } from './styles';\n\nexport const fontUrl = 'https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900';\n\nexport const bodyStyles = css`\n  /* same as before */\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n body {\n   ${bodyStyles}\n }\n`;\n</code></pre>\n<p>为了在 Storybook 的组件中使用 <code>GlobalStyle</code>，我们可以使用修饰器（一个组件的封装）。如果在一个应用程序中，我们需要将该样式放在顶层组件中，在 Storybook 中我们可以通过修改预配置文件 <code>.storybook/preview.js</code> 来封装所有的组件。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { GlobalStyle } from '../src/shared/global';\n\naddDecorator((story) => (\n  <>\n    <GlobalStyle />\n    {story()}\n  </>\n));`, `14016474015949187000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"14016474015949187000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { GlobalStyle } from '../src/shared/global';\n\naddDecorator((story) => (\n  &#x3C;>\n    &#x3C;GlobalStyle />\n    {story()}\n  &#x3C;/>\n));\n</code></pre>\n<p>修饰器将会确保无论你选择哪一个 story 的时候 <code>GlobalStyle</code> 都能被提前渲染。</p>\n<div class=\"aside\">在修饰器的代码中，<code><></code> 并不是一个拼写错误的符号  -- 它是一个 <a href=\"https://reactjs.org/docs/fragments.html\">React Fragment</a> 我们可以使用它来避免给我们输出的 HTML 额外添加不必要的标签</div>\n<h4>添加字体标签</h4>\n<p>我们的设计系统也需要将 Nunito Sans 字体加载到应用程序中。实现此目标的方式取决于我们采用怎样的应用程序框架（详情可阅读<a href=\"https://github.com/storybookjs/design-system#font-loading\">此篇文章</a>)，但是在 Storybook 中最简单的实现方式是在配置文件 <code>.storybook/preview-head.html</code> 中添加一个 <code>&#x3C;link></code> 标签：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`<link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900&quot;>`, `55155679067261534000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"55155679067261534000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview-head.html</div>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Nunito+Sans:400,700,800,900\">\n</code></pre>\n<p>您的 Storybook 应该看起来像下图一样。由于我们添加了字体样式，您应该可以发现此时的 “T” 变为 sans-serif 的字体。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-global-styles.png\" alt=\"Storybook with global styles loaded\"></p>\n<h2>使用插件来增强 Storybook</h2>\n<p>Storybook 的插件是由一个庞大的社区生态系统来共同维护的。对于务实的开发人员而言，使用生态系统帮我们构建的工作流要比自己创建一个更加容易。（自己创建往往比较费时）</p>\n<h4>用于验证交互的 Actions 插件</h4>\n<p>当您与 Button 或 Link 之类的交互式组件进行交互时，<a href=\"https://github.com/storybookjs/storybook/tree/next/code/addons/actions\">actions 插件</a> 可以在 Storybook 中为您的组件提供 UI 反馈。默认情况下，Actions 应该已经安装在您的 Storybook 中了，您只需要将 “action” 作为回调传给您的组件即可。</p>\n<p>让我们看看如何在 Button 组件中使用它，该 Button 组件接受一个封装的组件来响应它的点击事件。我们的 story 给封装组件的 click 事件上传入了 action 回调：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport styled from 'styled-components';\nimport { action } from '@storybook/addon-actions';\n\n// When the user clicks a button, it will trigger the \\`action()\\`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\nreturn <CustomButton onClick={action('button action click')} {...props} />;\n}\n\nexport const buttonWrapper = () => (\n<Button ButtonWrapper={ButtonWrapper} appearance=&quot;primary&quot;>\n// … etc ..\n)`, `67617619214195360000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"67617619214195360000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">null</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport styled from 'styled-components';\nimport { action } from '@storybook/addon-actions';\n\n// When the user clicks a button, it will trigger the `action()`,\n// ultimately showing up in Storybook's addon panel.\nfunction ButtonWrapper(props) {\nreturn &#x3C;CustomButton onClick={action('button action click')} {...props} />;\n}\n\nexport const buttonWrapper = () => (\n&#x3C;Button ButtonWrapper={ButtonWrapper} appearance=\"primary\">\n// … etc ..\n)\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-actions.gif\" alt=\"Using the actions addon\"></p>\n<h4>通过 Source 去查看和复制代码</h4>\n<p>当您浏览一个 story 时，您常常希望查看该 story 的源代码以了解其工作原理并将其粘贴到您的项目中。Storysource 插件在插件面板中为您显示了当前您所选 story 的源代码。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev  @storybook/addon-storysource`, `1234556874661807400`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"1234556874661807400\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev  @storybook/addon-storysource\n</code></pre>\n<p>在配置文件 <code>.storybook/main.js</code> 中加载插件:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`//.storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n  ],\n};`, `94223122253369150000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"94223122253369150000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-js\">//.storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n  ],\n};\n</code></pre>\n<p>Storybook 的 storysource 如下图所示：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-storysource.png\" alt=\"The Storysource addon\"></p>\n<h4>使用 Knobs 插件测试组件交互性</h4>\n<p>在 Storybook UI 中， <a href=\"https://github.com/storybookjs/addon-knobs\">knobs 插件</a> 可以帮助您动态的与您的组件进行交互。Knobs 允许你传递不同的值给组件并在 UI 上表现出相应的变化。这可以让开发设计系统的人调整不同的值去对组件进行交互测试。而且它也让使用设计系统的人在集成组件到自己的项目之前就可以了解到组件的每个属性是如何去影响它的显示的。</p>\n<p>让我们来看看如何给 <code>Avatar</code> 组件设置 knobs 插件：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @storybook/addon-knobs`, `10752164274518417000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"10752164274518417000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @storybook/addon-knobs\n</code></pre>\n<p>将插件添加到 <code>.storybook/main.js</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n    '@storybook/addon-knobs',\n  ],\n};`, `89292836848125150000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"89292836848125150000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-js\">module.exports = {\n  stories: ['../src/**/*.stories.js'],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n    '@storybook/addon-storysource',\n    '@storybook/addon-knobs',\n  ],\n};\n</code></pre>\n<p>在文件 <code>src/Avatar.stories.js</code> 中添加一个使用 knobs 插件的组件:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport { withKnobs, select, boolean } from '@storybook/addon-knobs';\n\n// …\n\nexport const knobs = () => (\n  <Avatar\n    loading={boolean('Loading')}\n    size={select('Size', ['tiny', 'small', 'medium', 'large'])}\n    username=&quot;Dominic Nguyen&quot;\n    src=&quot;https://avatars2.githubusercontent.com/u/263385&quot;\n  />\n);\n\nknobs.story = {\n  decorators: [withKnobs],\n};`, `31647392272939446000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"31647392272939446000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/Avatar.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport { withKnobs, select, boolean } from '@storybook/addon-knobs';\n\n// …\n\nexport const knobs = () => (\n  &#x3C;Avatar\n    loading={boolean('Loading')}\n    size={select('Size', ['tiny', 'small', 'medium', 'large'])}\n    username=\"Dominic Nguyen\"\n    src=\"https://avatars2.githubusercontent.com/u/263385\"\n  />\n);\n\nknobs.story = {\n  decorators: [withKnobs],\n};\n</code></pre>\n<p>请注意插件面板上的 Knobs 选项，我们添加了 Size 选项，用户可以随意选择 Avatar 组件支持的尺寸： <code>tiny</code>, <code>small</code>, <code>medium</code> 和 <code>large</code>。您也可以使用 knobs 为组件的其他属性添加交互功能。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/storybook-addon-knobs.gif\" alt=\"Storybook knobs addon\"></p>\n<p>也就是说， knobs 并不是替代 stories， knobs 是为了让你更方便的去探索您组件的边界情况。 Stories 是用来展示预期的效果。</p>\n<p>在后面的章节中我们将提到无障碍访问相关的文档和插件。</p>\n<blockquote>\n<p>“Storybook 是一个强大的前端工作平台工具，它帮助团队摆脱繁杂的业务逻辑，更加的关注到设计、构建并且组织 UI 组件（甚至是整个页面）” – Brad Frost, Author of Atomic Design</p>\n</blockquote>\n<h2>学习如何自动维护</h2>\n<p>到目前位置，我们已经将组件加入到了 Storybook，在创建行业标准地设计系统中，我们又迈出了坚实的一步。现在正是一个将我们的代码提交到远程仓库的好时机。 接下来我们就可以思考如何去设置自动化工具以简化正在进行的维护工作。</p>\n<p>一个设计系统，像所有的软件一样， 也需要持续改进，而难点是在于在持续发布的同时，我们仍要确保 UI 组件的外观和表现仍和之前预期的一样。</p>\n<p>为方便协作起见，在第四章中我们将学习如何去搭建一个持续集成并且自动发布的设计系统。</p>","frontmatter":{"title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件","commit":"f4c9bb5"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/build/","chapter":"build","framework":"react","language":"zh-CN","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/zh-CN/build/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","language":"zh-CN","chapter":"build","pageType":"chapter"}},"staticQueryHashes":["238248339"]}