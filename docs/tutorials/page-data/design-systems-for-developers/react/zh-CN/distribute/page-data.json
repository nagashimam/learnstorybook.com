{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/design-systems-for-developers/react/zh-CN/distribute/","result":{"data":{"currentPage":{"html":"<p>从软件架构的角度来看，设计系统就是一个前端的依赖项。它和一些流行的依赖项（moment 或 lodash）没有什么区别。UI 组件也是代码，所以我们大可以依赖已有的前端技术来重用这些代码。</p>\n<p>在本章我们将一起来探讨如何打包设计系统中的 UI 组件并发布给其他应用程序去引入。我们也会涵盖到使用更节省时间的技术去简化版本控制和发布。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation.png\" alt=\"Propagate components to sites\"></p>\n<h2>打包设计系统</h2>\n<p>一个组织会有成千上万的 UI 组件散布在不同的应用程序中。之前，我们将最常用的组件提取到我们的设计系统中，现在我们需要将这些组件重新引入到应用程序中。</p>\n<p>我们的设计系统使用 JavaScript 包管理工具（npm）来发布、版本控制和管理依赖。</p>\n<p>有很多有效的方法可以去打包设计系统，纵观 Lonely Planet、Auth0、Salesforce、GitHub 和 Microsoft 的设计系统，我们可以了解到各种不同的方法。有些人将每个组件作为单独的软件包提供给使用者，有的则将所有的组件打包在一起。</p>\n<p>对于新生的设计系统，最直接的方法就是发布一个封装了以下内容且版本单一的软件包：</p>\n<ul>\n<li>🏗 通用 UI 组件</li>\n<li>🎨 设计变量 (又称： 样式变量)</li>\n<li>📕 文档</li>\n</ul>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-package.jpg\" alt=\"Package a design system\"></p>\n<h2>为导出设计系统作准备</h2>\n<p>由于我们使用 create-react-app 作为我们设计系统的起点，在我们的项目中仍然残存一些脚手架自动生成的代码，我们需要先清理掉这些代码：</p>\n<p>首先我们需要添加一个基本的 README.md:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# The Learn Storybook design system\n\nThe Learn Storybook design system is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more at [Learn Storybook](https://learnstorybook.com).`, `62741650131033340000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"62741650131033340000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-markdown\"># The Learn Storybook design system\n\nThe Learn Storybook design system is a subset of the full [Storybook design system](https://github.com/storybookjs/design-system/), created as a learning resource for those interested in learning how to write and publish a design system using best in practice techniques.\n\nLearn more at [Learn Storybook](https://learnstorybook.com).\n</code></pre>\n<p>然后我们需要创建一个名为 <code>src/index.js</code> 的文件作为设计系统的入口，从这个文件中我们将导出我们所有的设计变量和组件：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import * as styles from './shared/styles';\nimport * as global from './shared/global';\nimport * as animation from './shared/animation';\nimport * as icons from './shared/icons';\n\nexport { styles, global, animation, icons };\n\nexport * from './Avatar';\nexport * from './Badge';\nexport * from './Button';\nexport * from './Icon';\nexport * from './Link';`, `96243405713242390000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"96243405713242390000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/index.js</div>\n<pre><code class=\"language-js\">import * as styles from './shared/styles';\nimport * as global from './shared/global';\nimport * as animation from './shared/animation';\nimport * as icons from './shared/icons';\n\nexport { styles, global, animation, icons };\n\nexport * from './Avatar';\nexport * from './Badge';\nexport * from './Button';\nexport * from './Icon';\nexport * from './Link';\n</code></pre>\n<p>让我们在开发环境依赖项中添加 <code>@babel/cli</code> 和 <code>cross-env</code> 这两个库来帮助我们构建发布版本：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev @babel/cli cross-env`, `47209121945815876000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"47209121945815876000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev @babel/cli cross-env\n</code></pre>\n<p>我们需要在 <code>package.json</code> 文件中添加一些命令来帮助我们将设计系统打包到 <code>dist</code> 文件夹：</p>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"build\": \"cross-env BABEL_ENV=production babel src -d dist\",\n      ...\n  },\n  \"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ]\n  }\n}\n</code></pre>\n<p>现在我们可以运行 <code>yarn build</code> 命令去构建我们的代码到 <code>dist</code> 文件夹了 —— 我们也应该将 <code>dist</code> 文件夹添加到 <code>.gitignore</code> 中：</p>\n<pre><code>// ..\nstorybook-static\ndist\n</code></pre>\n<h4>添加软件包元数据以进行发布</h4>\n<p>最终，我们需要对文件 <code>package.json</code> 做一些修改来保证使用者获得所有他们所需的信息。最简单的方法是通过运行 <code>yarn init</code> —— 一个发布软件包的初始化命令：</p>\n<pre><code class=\"language-shell\">yarn init\n\nyarn init v1.16.0\nquestion name (learnstorybook-design-system):\nquestion version (0.1.0):\nquestion description (Learn Storybook design system):\nquestion entry point (dist/index.js):\nquestion repository url (https://github.com/chromaui/learnstorybook-design-system.git):\nquestion author (Tom Coleman &#x3C;tom@thesnail.org>):\nquestion license (MIT):\nquestion private: no\n</code></pre>\n<p>该命令会问一些预先设置好的问题，一些问题会提前填好答案，而另一些需要我们来给出答案。您需要在 npm 中为您的软件包起一个独一无二的名字（您不能使用 <code>learnstorybook-design-system</code> 这个名字因为它已经存在了 —— 推荐使用类似 <code>&#x3C;your-username>-learnstorybook-design-system</code> 的名字）。</p>\n<p>总而言之, 上述步骤将会用问题中输入的新值来替换 <code>package.json</code> 中原来的值:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"learnstorybook-design-system\",\n  \"description\": \"Learn Storybook design system\",\n  \"version\": \"0.1.0\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/index.js\",\n  \"repository\": \"https://github.com/chromaui/learnstorybook-design-system.git\"\n  // ...\n}\n</code></pre>\n<p>到目前为止，我们已经准备好打包我们的程序并将它首次发布到 npm!</p>\n<h2>使用 Auto 来做发布管理</h2>\n<p>要将打包好的包发布到 npm，我们需要经历修改变更日志、设置合理的版本号和创建 git 标签这些过程。上述步骤便于我们将该版本号链接到我们 git 仓库中的提交。为了帮助解决这些问题，我们将使用一个名为 <a href=\"https://github.com/intuit/auto\">Auto</a> 的开源工具。</p>\n<p>让我们安装 Auto:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev auto`, `91851358376720680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"91851358376720680000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev auto\n</code></pre>\n<p>Auto 是一个命令行工具，它用于 release 管理相关的各种常见任务。您可以通过学习<a href=\"https://intuit.github.io/auto/\">它们的文档</a>来了解更多关于 Auto 的使用方法。</p>\n<h4>获取 GitHub 和 npm 令牌</h4>\n<p>在接下来的步骤中，Auto 将访问 GitHub 和 npm，为了保证有正确的访问权限，我们需要一个私人访问令牌。您可以通过<a href=\"https://github.com/settings/tokens\">这篇文章</a>来获取 GitHub 的令牌。令牌应该只限于访问您当前的 <code>GitHhb 仓库</code>。</p>\n<p>您可以通过访问 <a href=\"https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens\">https://www.npmjs.com/settings/&#x26;lt;your-username&#x26;gt;/tokens</a> 来创建一个 npm 的令牌。</p>\n<p>该令牌需要有 “读取和发布” 的权限。</p>\n<p>让我们在项目中的 <code>.env</code> 文件中添加令牌信息：</p>\n<pre><code>GH_TOKEN=&#x3C;value you just got from GitHub>\nNPM_TOKEN=&#x3C;value you just got from npm>\n</code></pre>\n<p>通过添加上述文件到 <code>.gitignore</code> 来保证我们不会不经意的将令牌信息发布到所有用户都可以看到的开源仓库中。需要特别注意的是，如果其他维护者需要从本地发布软件包（之后我们会将设置当提交请求被合并到主分支后会自动发布），也应该按照上述的过程去设置自己的 <code>.env</code> 文件。</p>\n<pre><code>dist\n.env\n</code></pre>\n<h4>在 GitHub 中创建标签</h4>\n<p>我们要对 Auto 做的第一件事情是在 GitHub 中创建一组标签，将来我们在对软件包进行更改时将使用这些标签（请参阅下一章）来帮助 <code>auto</code> 合理的更新软件包的版本，并创建更改日志和发行说明。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto create-labels`, `13101013863504951000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"13101013863504951000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn auto create-labels\n</code></pre>\n<p>如果您查看 GitHub, 现在则会看到 <code>auto</code> 推荐我们使用的一组标签：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-auto-labels.png\" alt=\"Set of labels created on GitHub by auto\"></p>\n<p>我们需要在我们所有的合并提交被合并之前为他们打上以下之一的标签：<code>major</code>, <code>minor</code>, <code>patch</code>, <code>skip-release</code>, <code>prerelease</code>, <code>internal</code>, <code>documentation</code>。</p>\n<h4>手动使用 Auto 发布我们第一个版本</h4>\n<p>在未来，我们将使用 <code>auto</code> 通过脚本来计算新的版本号。但是在第一次发布的时候，让我们手动运行命令来理解它是如何做的。让我们来创建我们第一个修改日志条目：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn auto changelog`, `2954170723793514500`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"2954170723793514500\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn auto changelog\n</code></pre>\n<p>这将根据我们创建的每一次提交来生成一个很长的修改条目（还有一条我们一直将代码直接发布到主分支的警告，我们应该尽快停止这么做）。</p>\n<p>自动生成改动日志也是很有用的，这样您就不会错过任何东西，而且我们也推荐手动去修改和编写成对用户更有用的消息，这样一来，用户则不用知道所有的提交内容。让我们来为第一个版本 v0.1.0 写一个简单的信息。首先撤销 Auto 刚刚创建的提交（但是保留更改）：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git reset HEAD^`, `72393961218383240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"72393961218383240000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git reset HEAD^\n</code></pre>\n<p>然后我们修改更新日志并提交它：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`# v0.1.0 (Tue Sep 03 2019)\n\n- Created first version of the design system, with \\`Avatar\\`, \\`Badge\\`, \\`Button\\`, \\`Icon\\` and \\`Link\\` components.\n\n#### Authors: 1\n- Tom Coleman ([@tmeasday](https://github.com/tmeasday))`, `21943563544596767000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"21943563544596767000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">null</div>\n<pre><code class=\"language-markdown\"># v0.1.0 (Tue Sep 03 2019)\n\n- Created first version of the design system, with `Avatar`, `Badge`, `Button`, `Icon` and `Link` components.\n\n#### Authors: 1\n- Tom Coleman ([@tmeasday](https://github.com/tmeasday))\n</code></pre>\n<p>让我们添加更新日志到 git。请注意：我们需要使用 <code>[skip ci]</code> 来告诉 CI 平台忽略本次提交，否则我们将会触发构建和发布。</p>\n<pre><code class=\"language-shell\">git add CHANGELOG.md\ngit commit -m \"Changelog for v0.1.0 [skip ci]\"\n</code></pre>\n<p>现在我们可以发布了:</p>\n<pre><code class=\"language-shell\">npm version 0.1.0 -m \"Bump version to: %s [skip ci]\"\nnpm publish\n</code></pre>\n<p>并且使用 Auto 工具在 GitHub 上创建一个 release：</p>\n<pre><code class=\"language-shell\">git push --follow-tags origin master\nyarn auto release\n</code></pre>\n<p>赞! 我们已经成功的在 npm 中发布了我们的软件包并且在 GitHub 上创建了一个 release (祝好运!)。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/npm-published-package.png\" alt=\"Package published on npm\"></p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-published-release.png\" alt=\"Release published to GitHub\"></p>\n<p>（注意：虽然 <code>auto</code> 在第一次发布的时候帮我们自动生成了发布日志，我们仍然还是修改了它来保证第一个版本更加通俗易懂）</p>\n<h4>创建使用 Auto 的命令</h4>\n<p>让我们对 Auto 进行配置，保证之后我们在发布软件包的时候遵循一样的流程。我们将在 <code>package.json</code> 中添加如下代码：</p>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"release\": \"auto shipit\"\n  }\n}\n</code></pre>\n<p>现在当我们执行命令 <code>yarn release</code>, 我们将以自动化的方式逐步执行上述所有的步骤（自动生成变更日志除外）。我们需要保证所有提交到主分支的代码会被自动发布：</p>\n<p>恭喜您！现在您已经配置好了发布您设计系统的基础设施，现在是时候将他升级为持续集成的设计系统了。</p>\n<p>但是在开始之前，为了让我们的令牌信息更安全的存储起来，我们需要一些额外的步骤。在该场景下我们将引入 Github “密令”。</p>\n<h4>设置 “密令”</h4>\n<p>在浏览器中打开您的 Github 仓库。</p>\n<p>点击 ⚙️ Settings 页签中的 Secrets 按钮， 您将看到该页面：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-empty-secrets-page.png\" alt=\"Empty GitHub secrets page\"></p>\n<p>点击 <code>New secret</code> 并填写相关的必填项，为方便和保持一致起见，请将 “密令” 的名字设置为 <code>NPM_TOKEN</code> 并将 “密令” 的值设置为之前章节中提到的 npm 令牌。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/github-secrets-form-filled.png\" alt=\"Filled GitHub secrets form\"></p>\n<p>点击 \"Add secret\" 按钮将该 “密令” 添加到您的仓库中。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/gh-npm-token-added.png\" alt=\"npm token in GitHub\"></p>\n<p>成功了！我们通过安全的方式将我们的令牌存储起来了， 现在我们可以添加一个新的 Github action 来帮助我们发布我们自己的设计系统当我们每一次的合并请求被合并到主分支后。</p>\n<h2>使用 GitHub actions 来自动发布</h2>\n<p>在与之前提到的<a href=\"https://storybook.js.org/tutorials/design-systems-for-developers/react/zh-cn/review/#publish-storybook\">发布 Storybook</a>章节的相同文件夹下， 我们可以添加一个名为 <code>push.yml</code> 的 Github action 文件：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`## name of our action\nname: Release\n# the event that will trigger the action\non:\n  push:\n    branches: [master]\n# what the action will do\njobs:\n  release:\n    # the operating system it will run on\n    runs-on: ubuntu-latest\n    # this check needs to be in place to prevent a publish loop with auto and github actions\n    if: &quot;!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')&quot;\n    # the list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v2\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 12.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n      - name: Cache node modules\n        uses: actions/cache@v1\n        with:\n          path: node_modules\n          key: yarn-deps-\\${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            yarn-deps-\\${{ hashFiles('yarn.lock') }}\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: \\${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n          yarn release`, `2531117527268756000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"2531117527268756000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.github/workflows/push.yml</div>\n<pre><code class=\"language-yml\">## name of our action\nname: Release\n# the event that will trigger the action\non:\n  push:\n    branches: [master]\n# what the action will do\njobs:\n  release:\n    # the operating system it will run on\n    runs-on: ubuntu-latest\n    # this check needs to be in place to prevent a publish loop with auto and github actions\n    if: \"!contains(github.event.head_commit.message, 'ci skip') &#x26;&#x26; !contains(github.event.head_commit.message, 'skip ci')\"\n    # the list of steps that the action will go through\n    steps:\n      - uses: actions/checkout@v2\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n      - name: Use Node.js 12.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n      - name: Cache node modules\n        uses: actions/cache@v1\n        with:\n          path: node_modules\n          key: yarn-deps-${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            yarn-deps-${{ hashFiles('yarn.lock') }}\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n          yarn release\n</code></pre>\n<p>别忘了我们也需要将 npm 令牌添加至我们的项目中。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/gh-npm-token-added.png\" alt=\"Setting secrets in GitHub\"></p>\n<div class=\"aside\"><p>为简洁起见，我们没有提到<a href=\"https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets\">GitHub “密令”</a>。 “密令” 是 Github 提供的一个安全访问环境变量的方式，因此我们不需要将任何敏感信息硬编码到代码中。</p></div>\n<p>现在每当您合并一个 pull request 到主分支，它将自动发布一个新的版本，并且根据您添加的标签适当增加版本号。</p>\n<div class=\"aside\">我们并没有涵盖 Auto 很多对持续增长的设计系统有用的功能。阅读<a href=\"https://github.com/intuit/auto\">此文档</a>了解更多。</div>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-import.png\" alt=\"Import the design system\"></p>\n<h2>在一个应用程序中导入设计系统</h2>\n<p>现在我们的设计系统已经在线运行，安装依赖项并开始使用它将会变得非常简单。</p>\n<h4>获取示例应用</h4>\n<p>在本教程前面的部分，我们标准化了一个流行的技术框架（React 和 styled-components），这意味着为了充分利用设计系统，我们的示例应用程序也必须使用 React 和 styled-components。</p>\n<div class=\"aside\">其他的方法如 Svelte 和 web components 也许允许您采用与框架无关的 UI 组件。 但是，他们相对较新、文档不足或者缺乏广泛使用。因此本指南中未包含这些部分。</div>\n<p>该示例应用程序采用 Storybook 去简化<a href=\"https://www.chromatic.com/blog/component-driven-development/\">组件驱动开发</a>（一种软件开发方法，采用自下而上的方式，先构建组件再构建页面）。在演示过程中，我们将运行两个 Storybook，一个用于示例应用程序，另一个用于设计系统。</p>\n<p>从 GitHub 上克隆示例应用程序的代码仓库到本地：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git clone https://github.com/chromaui/learnstorybook-design-system-example-app.git`, `52306696572040570000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"52306696572040570000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git clone https://github.com/chromaui/learnstorybook-design-system-example-app.git\n</code></pre>\n<p>安装依赖项并且启动程序的 Storybook：</p>\n<pre><code class=\"language-shell\">yarn install\nyarn storybook\n</code></pre>\n<p>您应该可以看到 Storybook 中包含了应用程序使用的简单组件的 stories：</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-starting-storybook.png\" alt=\"Initial storybook for example app\"></p>\n<h4>集成设计系统</h4>\n<p>将您发布的设计系统添加为依赖项：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add <your-username>-learnstorybook-design-system`, `2792531472210125000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"2792531472210125000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add &#x3C;your-username>-learnstorybook-design-system\n</code></pre>\n<p>现在，让我们更新示例程序的 <code>.storybook/main.js</code> 文件来引入设计系统的组件：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`module.exports = {\n  stories: [\n    '../src/**/*.stories.js',\n    '../node_modules/<your-username>-learnstorybook-design-system/dist/**/*.stories.(js|mdx)',\n  ],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n  ],\n};`, `34389517958408544000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"34389517958408544000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-js\">module.exports = {\n  stories: [\n    '../src/**/*.stories.js',\n    '../node_modules/&#x3C;your-username>-learnstorybook-design-system/dist/**/*.stories.(js|mdx)',\n  ],\n  addons: [\n    '@storybook/preset-create-react-app',\n    '@storybook/addon-actions',\n    '@storybook/addon-links',\n  ],\n};\n</code></pre>\n<p>同样的我们可以在新配置文件 <code>.storybook/preview.js</code> 中添加全局修饰器来使用设计系统定义的全局样式。在文件中做如下修改：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`\nimport React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { global as designSystemGlobal } from '<your-username>-learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\naddDecorator((story) => (\n  <>\n    <GlobalStyle />\n    {story()}\n  </>\n));`, `28031576840560767000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"28031576840560767000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-js\">\nimport React from 'react';\nimport { addDecorator } from '@storybook/react';\nimport { global as designSystemGlobal } from '&#x3C;your-username>-learnstorybook-design-system';\n\nconst { GlobalStyle } = designSystemGlobal;\n\naddDecorator((story) => (\n  &#x3C;>\n    &#x3C;GlobalStyle />\n    {story()}\n  &#x3C;/>\n));\n</code></pre>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-with-design-system-stories.png\" alt=\"Example app storybook with design system stories\"></p>\n<p>现在在您的开发过程中，您将可以通过浏览器去浏览您的设计系统和文档。在开发功能的过程中展示设计系统会增加开发人员重用现有组件的可能性，而不是浪费时间开发自己组件。</p>\n<p>另外，如果您之前已经在 <a href=\"https://storybook.js.org/tutorials/design-systems-for-developers/react/zh-cn/review/#publish-storybook\">Chromatic</a> 中部署了您的设计系统（请参阅第四章），您可以在线浏览您设计系统的 Storybook。</p>\n<p>我们将在示例应用程序的 UserItem 组件中使用设计系统中的 Avatar 组件。UserItem 应该渲染包含用户名和头像的信息。</p>\n<p>在您的编辑器中打开 UserItem.js 文件，另外，当您更改了代码之后，热加载模块可以保证您在 Storybook 的边栏中的 UserItem 中立即查看到更新后的界面。</p>\n<p>引入 Avatar 组件：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { Avatar } from '<your-username>-learnstorybook-design-system';`, `57812983346795040000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"57812983346795040000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.js</div>\n<pre><code class=\"language-js\">import { Avatar } from '&#x3C;your-username>-learnstorybook-design-system';\n</code></pre>\n<p>我们要在用户名的旁边显示头像：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\nimport styled from 'styled-components';\nimport { Avatar } from 'learnstorybook-design-system';\n\nconst Container = styled.div\\`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n\\`;\n\nconst Name = styled.span\\`\n  color: #333;\n  font-size: 16px;\n\\`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  <Container>\n    <Avatar username={name} src={avatarUrl} />\n    <Name>{name}</Name>\n  </Container>\n);`, `75150109251375420000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"75150109251375420000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/UserItem.js</div>\n<pre><code class=\"language-js\">import React from 'react';\nimport styled from 'styled-components';\nimport { Avatar } from 'learnstorybook-design-system';\n\nconst Container = styled.div`\n  background: #eee;\n  margin-bottom: 1em;\n  padding: 0.5em;\n`;\n\nconst Name = styled.span`\n  color: #333;\n  font-size: 16px;\n`;\n\nexport default ({ user: { name, avatarUrl } }) => (\n  &#x3C;Container>\n    &#x3C;Avatar username={name} src={avatarUrl} />\n    &#x3C;Name>{name}&#x3C;/Name>\n  &#x3C;/Container>\n);\n</code></pre>\n<p>保存之后，UserItem 组件将会在 Storybook 中更新并显示新的 Avatar 组件。因为 UserItem 组件是 UserList 组件的一部分，所以您也将在 UserList 组件中看到 Avatar 组件。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/example-app-storybook-using-design-system.png\" alt=\"Example app using the Design System\"></p>\n<p>现在您可以看到它了！ 您刚刚成功到将设计系统组件导入到示例应用程序中。每当您在设计系统中发布 Avatar 组件的新版本时，如果您更新程序包，新版本也将反映在您的示例应用程序中。</p>\n<p><img src=\"/tutorials/design-systems-for-developers/design-system-propagation-storybook.png\" alt=\"Distribute design systems\"></p>\n<h2>掌握设计系统的工作流程</h2>\n<p>设计系统的工作流程始于在 Storybook 中开发 UI 组件，终于发布给客户端的应用程序。然而这并不是全部，设计系统必须不断进步来满足不断变化的产品需求。我们的工作才刚刚开始。</p>\n<p>第八章详述了本指南中我们创建的端到端设计系统的工作流程，我们将看到 UI 的变化如何从设计系统开始向外扩散。</p>","frontmatter":{"title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统","commit":"dabd221"},"fields":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/distribute/","chapter":"distribute","framework":"react","language":"zh-CN","permalink":"https://storybook.js.org/tutorials/design-systems-for-developers/react/zh-CN/distribute/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-design-system","toc":["introduction","architecture","build","review","test","document","distribute","workflow","conclusion"],"title":"Design Systems for Developers","twitterShareText":"I’m learning about building design systems! They're great for scaling frontend code on large teams."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Architecture","title":"Architecting systems","description":"How to extract a design system from component libraries"},"fields":{"slug":"/design-systems-for-developers/react/en/architecture/","framework":"react","chapter":"architecture","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Build","title":"Build UI components","description":"Set up Storybook to build and catalog design system components"},"fields":{"slug":"/design-systems-for-developers/react/en/build/","framework":"react","chapter":"build","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Thriving design systems save time and increase productivity"},"fields":{"slug":"/design-systems-for-developers/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Distribute","title":"Distribute UI across an organization","description":"Learn to package and import your design system into other apps"},"fields":{"slug":"/design-systems-for-developers/react/en/distribute/","framework":"react","chapter":"distribute","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Document","title":"Document for stakeholders","description":"Drive design system adoption with documentation"},"fields":{"slug":"/design-systems-for-developers/react/en/document/","framework":"react","chapter":"document","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to design systems","description":"A guide to the latest production-ready tools for design systems"},"fields":{"slug":"/design-systems-for-developers/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Review","title":"Review with teams","description":"Collaborate with continuous integration and visual review"},"fields":{"slug":"/design-systems-for-developers/react/en/review/","framework":"react","chapter":"review","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Test","title":"Test to maintain quality","description":"How to test design system appearance, functionality, and accessibility"},"fields":{"slug":"/design-systems-for-developers/react/en/test/","framework":"react","chapter":"test","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"Workflow for design systems","description":"An overview of the design system workflow for frontend developers"},"fields":{"slug":"/design-systems-for-developers/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"設計","title":"システム設計","description":"コンポーネントライブラリーからデザインシステムを抽出する方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/architecture/","framework":"react","chapter":"architecture","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"構築","title":"UIコンポーネントを構築する","description":"Storybook をセットアップしデザインシステムコンポーネントを構築してカタログ化する"},"fields":{"slug":"/design-systems-for-developers/react/ja/build/","framework":"react","chapter":"build","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"結論","title":"結論","description":"デザインシステムの成長が時間を節約し生産性を向上させる"},"fields":{"slug":"/design-systems-for-developers/react/ja/conclusion/","framework":"react","chapter":"conclusion","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"配布","title":"組織を横断してUIを配布する","description":"デザインシステムをパッケージングし他のアプリへインポートする方法を学ぶ"},"fields":{"slug":"/design-systems-for-developers/react/ja/distribute/","framework":"react","chapter":"distribute","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ドキュメント","title":"ステークホルダーに向けたドキュメント","description":"ドキュメンテーションでデザインシステムの採用を推進する"},"fields":{"slug":"/design-systems-for-developers/react/ja/document/","framework":"react","chapter":"document","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"イントロダクション","title":"デザインシステムのイントロダクション","description":"デザインシステムのために最新のリリース可能なツールのガイド"},"fields":{"slug":"/design-systems-for-developers/react/ja/introduction/","framework":"react","chapter":"introduction","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"レビュー","title":"チームでレビューする","description":"継続的インテグレーションとビジュアルレビューで協働する"},"fields":{"slug":"/design-systems-for-developers/react/ja/review/","framework":"react","chapter":"review","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"テスト","title":"品質を保つためのテスト","description":"デザインシステムの見た目、機能性、アクセシビリティをテストする方法"},"fields":{"slug":"/design-systems-for-developers/react/ja/test/","framework":"react","chapter":"test","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"ワークフロー","title":"デザインシステムのためのワークフロー","description":"フロントエンド開発者のためのデザインシステムワークフローの概要"},"fields":{"slug":"/design-systems-for-developers/react/ja/workflow/","framework":"react","chapter":"workflow","language":"ja"}}},{"node":{"frontmatter":{"tocTitle":"설계","title":"시스템 설계","description":"컴포넌트 라이브러리에서 디자인 시스템을 추출하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/architecture/","framework":"react","chapter":"architecture","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"빌드","title":"UI 컴포넌트 구축하기","description":"스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/build/","framework":"react","chapter":"build","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"잘 갖춰놓은 디자인 시스템으로 시간 절약과 생산성 향상"},"fields":{"slug":"/design-systems-for-developers/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"배포","title":"UI 배포","description":"디자인 시스템을 다른 앱에 패키징하고 import하는 방법을 배웁니다."},"fields":{"slug":"/design-systems-for-developers/react/ko/distribute/","framework":"react","chapter":"distribute","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"문서","title":"이해관계자를 위한 문서","description":"문서화를 통하여 디자인 시스템 도입을 촉진하기"},"fields":{"slug":"/design-systems-for-developers/react/ko/document/","framework":"react","chapter":"document","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"디자인 시스템 소개","description":"디자인 시스템을 위한 최신 개발 방법 도구 가이드"},"fields":{"slug":"/design-systems-for-developers/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"리뷰","title":"팀과 함께 리뷰하기","description":"지속적 통합(CI)과 비주얼 리뷰를 통한 협업"},"fields":{"slug":"/design-systems-for-developers/react/ko/review/","framework":"react","chapter":"review","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"테스트","title":"품질 유지를 위한 테스트","description":"디자인 시스템 외관, 기능성 및 접근성을 테스트하는 방법"},"fields":{"slug":"/design-systems-for-developers/react/ko/test/","framework":"react","chapter":"test","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(workflow)","title":"디자인 시스템을 위한 작업 흐름(workflow)","description":"프론트엔드 개발자를 위한 디자인 시스템 작업 흐름(workflow)의 개요"},"fields":{"slug":"/design-systems-for-developers/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Arquitetura","title":"Arquitetar sistemas","description":"Como extrair um sistema de design a partir de bibliotecas de componentes"},"fields":{"slug":"/design-systems-for-developers/react/pt/architecture/","framework":"react","chapter":"architecture","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Construção","title":"Construção de componentes IU","description":"Configurar o Storybook para catalogar e construir componentes do sistemas de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/build/","framework":"react","chapter":"build","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Conclusão","title":"Conclusão","description":"Sistemas de design prósperos economizam tem e aumentam produtividade"},"fields":{"slug":"/design-systems-for-developers/react/pt/conclusion/","framework":"react","chapter":"conclusion","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Distribuição","title":"Distribuir o IU numa organização","description":"Aprenda como empacotar e importar o seu sistema de design para outras aplicações"},"fields":{"slug":"/design-systems-for-developers/react/pt/distribute/","framework":"react","chapter":"distribute","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Documentar","title":"Documentar para as partes interessadas","description":"Acelere a adoção de sistemas de design através de documentação"},"fields":{"slug":"/design-systems-for-developers/react/pt/document/","framework":"react","chapter":"document","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Introdução","title":"Introdução aos sistemas de design","description":"Um guia para as ferramentas mais recentes orientadas para sistemas de design prontas para produção"},"fields":{"slug":"/design-systems-for-developers/react/pt/introduction/","framework":"react","chapter":"introduction","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Revisão","title":"Revisão com equipas","description":"Colaboração através de integração contínua e revisão visual"},"fields":{"slug":"/design-systems-for-developers/react/pt/review/","framework":"react","chapter":"review","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Testar","title":"Testar para manter a qualidade","description":"Como testar a aparência,funcionalidade e acessibilidade do sistema de design"},"fields":{"slug":"/design-systems-for-developers/react/pt/test/","framework":"react","chapter":"test","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"Fluxo de trabalho","title":"Fluxo de trabalho associado ao sistema de design","description":"Uma visão geral do fluxo de trabalho associado ao sistema de design para programadores frontend"},"fields":{"slug":"/design-systems-for-developers/react/pt/workflow/","framework":"react","chapter":"workflow","language":"pt"}}},{"node":{"frontmatter":{"tocTitle":"架构","title":"架构系统","description":"如何从现有的组件库中提取出设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/architecture/","framework":"react","chapter":"architecture","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"创建","title":"创建 UI 组件","description":"使用 Storybook 来创建和分类您设计系统中的组件"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/build/","framework":"react","chapter":"build","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"总结","title":"总结","description":"持续发展的设计系统帮您节省时间并提高效率"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/conclusion/","framework":"react","chapter":"conclusion","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"发布","title":"在整个组织中发布您的 UI 组件","description":"学习如何打包并在别的应用程序中引入您的设计系统"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","chapter":"distribute","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"文档","title":"写给干系人的文档","description":"通过文档推动设计系统的使用"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/document/","framework":"react","chapter":"document","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"简介","title":"设计系统简介","description":"最新发布的设计系统工具的指南"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/introduction/","framework":"react","chapter":"introduction","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"审查","title":"与团队一起审查","description":"视觉审查与持续集成并进"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/review/","framework":"react","chapter":"review","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"测试","title":"通过测试来保证质量","description":"如何测试设计系统的界面、功能和无障碍访问"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/test/","framework":"react","chapter":"test","language":"zh-CN"}}},{"node":{"frontmatter":{"tocTitle":"工作流程","title":"设计系统的工作流程","description":"概述前端开发创建设计系统的工作流程"},"fields":{"slug":"/design-systems-for-developers/react/zh-CN/workflow/","framework":"react","chapter":"workflow","language":"zh-CN"}}}]}},"pageContext":{"guide":"design-systems-for-developers","slug":"/design-systems-for-developers/react/zh-CN/distribute/","framework":"react","language":"zh-CN","chapter":"distribute","pageType":"chapter"}},"staticQueryHashes":["238248339"]}