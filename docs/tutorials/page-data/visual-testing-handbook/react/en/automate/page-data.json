{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/en/automate/","result":{"data":{"currentPage":{"html":"<p>Over the natural course of development, bugs are inevitable. Visual test automation uses machines to detect changes in UI appearance for a human to review.</p>\n<p>In a nutshell, an image snapshot is taken of every component variation. This serves as the visual test \"baseline\". With each commit, new snapshots are captured then compared pixel-by-pixel to the baselines. If there are UI changes, you get notified to review whether they're bugs or intentional updates.</p>\n<video autoPlay muted playsInline loop >\n  <source\n    src=\"/tutorials/visual-testing-handbook/automate-visual-workflow-test-diff.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h2>Set up a repository in GitHub</h2>\n<p>Before we start, our local <code>CommentList</code> code needs to sync with a remote version control service.</p>\n<p>Go to GitHub and create a new repository for the project <a href=\"https://github.com/new\">here</a>. Name the repo \"commentlist\", same as our local project.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/commentlist-gh-repo-optimized.png\" alt=\"Set up comment list repo in GitHub\"></p>\n<p>Then follow the instructions to set up the repository. Replace <code>your-username</code> with your GitHub account name.</p>\n<pre><code class=\"language-shell\">git init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/your-username/commentlist.git\ngit push -u origin main\n</code></pre>\n<h2>Set up Chromatic</h2>\n<p>We'll use Chromatic by Storybook maintainers to demonstrate the image snapshotting process. Go to <a href=\"https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">chromatic.com</a> and signup with your GitHub account.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/chromatic-sign-in-optimized.png\" alt=\"Chromatic sign in\"></p>\n<p>From there, choose the repository you've just created.</p>\n<video autoPlay muted playsInline loop>\n  <source src=\"/tutorials/visual-testing-handbook/chromatic-create-project-optimized.mp4\"\n    type=\"video/mp4\" />\n</video>\n<p>UI tests capture an image snapshot of every story in a cloud browser environment. Whenever you push code, Chromatic generates a new set of snapshots and compares them against baselines. If there are visual changes, you verify if they’re intentional.</p>\n<h3>Establish baselines</h3>\n<p>Add Chromatic as a development package to your project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add -D chromatic`, `5732987204296869000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"5732987204296869000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add -D chromatic\n</code></pre>\n<p>Once it’s finished installing, we have all that we need. Now is an excellent time to commit and push the changes to the remote repository.</p>\n<pre><code class=\"language-shell\">git add .\ngit commit -m \"Added Chromatic\"\ngit push\n</code></pre>\n<p>Build and publish our Storybook with the <code>chromatic</code> command. Don't forget to replace the <code>project-token</code> with one Chromatic supplies on the website.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn chromatic --project-token=<project-token>`, `20609564242987786000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20609564242987786000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn chromatic --project-token=&#x3C;project-token>\n</code></pre>\n<p><img src=\"/tutorials/intro-to-storybook/chromatic-manual-storybook-console-log.png\" alt=\"Chromatic running\"></p>\n<p>With this one command, you published your Storybook, triggered Chromatic to capture an image snapshot of each story (in a standardized cloud browser), and set the snapshot as the baseline.</p>\n<p>Subsequent builds will generate new snapshots that are compared against existing baselines to detect UI changes.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/commentlist-accepted-baselines-optimized.png\" alt=\"Baselines in Chromatic\"></p>\n<h3>Run tests</h3>\n<p>Every time a pull request contains UI changes, big or small, it's helpful to run the visual tests. Chromatic compares new snapshots to existing baselines from previous builds.</p>\n<p>Let's make a small UI change to demonstrate this concept.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`git checkout -b change-commentlist-outline`, `88896093982731500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"88896093982731500000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">git checkout -b change-commentlist-outline\n</code></pre>\n<p>Tweak the <code>CommentList</code> component</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nconst CommentListDiv = styled.div\\`\n  font-family: &quot;Nunito Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\n  color: #333;\n  display: inline-block;\n  vertical-align: top;\n  width: 265px;\n\\`;\n\nconst CommentItemDiv = styled.div\\`\n  font-size: 12px;\n  line-height: 14px;\n  clear: both;\n  height: 48px;\n  margin-bottom: 10px;\n  box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n  background: linear-gradient(\n    120deg,\n    rgba(248, 248, 254, 0.95),\n    rgba(250, 250, 250, 0.95)\n  );\n  border-radius: 48px;\n border: 4px solid red;\n font-weight: bold;\n\\`;\n\nconst AvatarDiv = styled.div\\`\n  float: left;\n  position: relative;\n  overflow: hidden;\n  height: 48px;\n  width: 48px;\n  margin-right: 14px;\n  background: #dfecf2;\n  border-radius: 48px;\n\\`;\n\nconst AvatarImg = styled.img\\`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n  z-index: 1;\n  background: #999;\n\\`;\n\nconst MessageDiv = styled.div\\`\n  overflow: hidden;\n  padding-top: 10px;\n  padding-right: 20px;\n\\`;\n\nconst AuthorSpan = styled.span\\`\n  font-weight: bold;\n\\`;\nconst TextSpan = styled.span\\`\\`;\n\nconst GlobalStyle = createGlobalStyle\\`\n@import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n\\`;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return <div>loading</div>;\n  }\n  if (comments.length === 0) {\n    return <div>empty</div>;\n  }\n  return (\n    <>\n    <GlobalStyle/>\n    <CommentListDiv>\n      {comments.map(({ text, author: { name, avatar } }) => (\n        <CommentItemDiv key={\\`comment_\\${name}\\`}>\n          <AvatarDiv>\n            <AvatarImg src={avatar} />\n          </AvatarDiv>\n          <MessageDiv>\n            <AuthorSpan>{name}</AuthorSpan> <TextSpan>{text}</TextSpan>\n          </MessageDiv>\n        </CommentItemDiv>\n      ))}\n    </CommentListDiv>\n    </>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};`, `79752363054051770000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"79752363054051770000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nconst CommentListDiv = styled.div`\n  font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  color: #333;\n  display: inline-block;\n  vertical-align: top;\n  width: 265px;\n`;\n\nconst CommentItemDiv = styled.div`\n  font-size: 12px;\n  line-height: 14px;\n  clear: both;\n  height: 48px;\n  margin-bottom: 10px;\n  box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n  background: linear-gradient(\n    120deg,\n    rgba(248, 248, 254, 0.95),\n    rgba(250, 250, 250, 0.95)\n  );\n  border-radius: 48px;\n+ border: 4px solid red;\n+ font-weight: bold;\n`;\n\nconst AvatarDiv = styled.div`\n  float: left;\n  position: relative;\n  overflow: hidden;\n  height: 48px;\n  width: 48px;\n  margin-right: 14px;\n  background: #dfecf2;\n  border-radius: 48px;\n`;\n\nconst AvatarImg = styled.img`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n  z-index: 1;\n  background: #999;\n`;\n\nconst MessageDiv = styled.div`\n  overflow: hidden;\n  padding-top: 10px;\n  padding-right: 20px;\n`;\n\nconst AuthorSpan = styled.span`\n  font-weight: bold;\n`;\nconst TextSpan = styled.span``;\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n`;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return &#x3C;div>loading&#x3C;/div>;\n  }\n  if (comments.length === 0) {\n    return &#x3C;div>empty&#x3C;/div>;\n  }\n  return (\n    &#x3C;>\n    &#x3C;GlobalStyle/>\n    &#x3C;CommentListDiv>\n      {comments.map(({ text, author: { name, avatar } }) => (\n        &#x3C;CommentItemDiv key={`comment_${name}`}>\n          &#x3C;AvatarDiv>\n            &#x3C;AvatarImg src={avatar} />\n          &#x3C;/AvatarDiv>\n          &#x3C;MessageDiv>\n            &#x3C;AuthorSpan>{name}&#x3C;/AuthorSpan> &#x3C;TextSpan>{text}&#x3C;/TextSpan>\n          &#x3C;/MessageDiv>\n        &#x3C;/CommentItemDiv>\n      ))}\n    &#x3C;/CommentListDiv>\n    &#x3C;/>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};\n</code></pre>\n<p>Commit the change, push it to the repo and run Chromatic:</p>\n<pre><code class=\"language-shell\">git commit -am \"make CommentList sparkle\"\ngit push -u origin change-commentlist-outline\nyarn chromatic --project-token=&#x3C;project-token>\n</code></pre>\n<p>Open a pull request for the new branch in your GitHub repository.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/commentlist-gh-pullrequest-optimized.png\" alt=\"Comment list pull requested opened in GitHub\"></p>\n<p>Chromatic detected UI changes for you to review! Go to the PR checks and click \"🟡 UI Test\" to see the list of changes. The build will be marked “unreviewed” and the changes listed in the “Tests” table.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/commentlist-ui-tests-chromatic-optimized.png\" alt=\"New changes published to Chromatic\"></p>\n<h3>Review changes</h3>\n<p>Automating visual testing ensures components don’t change by accident. But it’s still up to developers to determine whether changes are intentional or not.</p>\n<p>If a change is intentional, we accept the snapshot to update the baseline. That means future tests will be compared to the <code>CommentList</code> with red borders.</p>\n<p>If a change is unintentional, it needs fixing. Our designer thinks the ✨majestic✨ red border is horrendous so let's undo it.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/chromatic-test-screen-optimized.png\" alt=\"Chromatic test screen\"></p>\n<h3>Merge changes</h3>\n<p>Once bugs are fixed and baselines are up to date, you're ready to merge code back into the target branch. Chromatic will transfer any accepted baselines between branches so that you only need to accept baselines once.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/workflow-uitest.png\" alt=\"visual testing workflow\"></p>\n<h3>Continuous integration</h3>\n<p>Running this command locally each time we make a change is tiresome. Productions teams trigger visual test runs when code is pushed in their CI/CD pipeline. While we won't set that up in this tutorial, you can learn more in <a href=\"https://www.chromatic.com/docs/ci?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">Chromatic's CI docs</a>.</p>\n<h2>Your journey begins</h2>\n<p>Visual Testing Handbook showcases the how leading frontend teams test UI appearance. It's a practical way to verify that UI matches the intended design and remains bug free over time.</p>\n<p>We hope this guide inspires your own visual test strategy. The final chapter concludes with the complete sample code and helpful resources.</p>","frontmatter":{"title":"Automate visual testing","description":"Automate visual testing to catch regressions","commit":"2c4f211"},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/en/automate/","chapter":"automate","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/en/automate/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I’m learning how to visual test UIs with Storybook! It’s great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"자동화","title":"시각적 테스트 자동화","description":"회귀 오류를 잡기 위해 시각적 테스트를 자동화하기"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"컴포넌트 탐색기","title":"컴포넌트 탐색기","description":"UI 개발과 시각적 테스팅을 위한 도구"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"시각적 버그들에 안녕을"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"시각적 테스팅 소개","description":"UI를 테스트하는 실용적인 방법"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"작업 흐름(Work Flow)","description":"컴포넌트 설계를 위한 테스트 주도(test-driven) 작업 흐름(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/en/automate/","framework":"react","language":"en","chapter":"automate","pageType":"chapter"}},"staticQueryHashes":["238248339"]}