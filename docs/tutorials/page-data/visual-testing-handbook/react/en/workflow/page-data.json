{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/en/workflow/","result":{"data":{"currentPage":{"html":"<p>Developing user interfaces has always been ill-defined. The subjective nature of UI leads to ad-hoc development workflows and buggy UIs. This chapter shares how professional teams build UI in a rigorous, visual test-driven fashion.</p>\n<h2>Test-driven development</h2>\n<p>Before we begin, let's recap <strong><a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven development (TDD)</a></strong>, a popular engineering practice. The core idea behind TDD is that you write your tests before developing the functionality under test.</p>\n<ol>\n<li>Construct a set of automated unit tests for your code</li>\n<li>Write the code itself to ‚Äúturn the tests green‚Äù</li>\n</ol>\n<p>TDD allows you to think clearly about what your code needs to do in terms of concrete inputs (for components, we refer to these as ‚Äústates‚Äù). That way, you can cover all use cases of your module.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/test-driven-development.mp4\"\n    type=\"video/mp4\">\n</video>\n<p>Let's look at an example. Assume we have a <code>relativize</code> function that converts a raw date object to the relative date format of the form \"2 weeks ago\". It's pretty straightforward to outline all the various types of input you want to cover. And then, just hit the \"test\" button each time you think you've made progress toward a solution.</p>\n<p>Your test framework allows you to run the <code>relativize</code> function in isolation without needing to provide input for your entire application just to test that one part.</p>\n<p>However, TDD falls down when developing UIs because it's hard to define tests ahead of time, modules are hard to isolate, and the outputs are subjective. These shortcomings are solved by visual testing components in isolation.</p>\n<h2>Visual testing</h2>\n<p>The tricky part of UI testing is that it‚Äôs not possible to verify the relevant visual details with code alone. Visual testing bypasses this by involving a human‚Äôs judgment in a quick and focused way.</p>\n<h4>Visual testing workflow</h4>\n<p>In practice, visual testing uses Storybook to ‚Äúvisually‚Äù test a component across a set of defined test states. Visual tests share the same setup, execute, and teardown steps as any other type of testing, but the verification step falls to the user.</p>\n<pre><code class=\"language-shell\">test do\n  setup\n  execute üëà Storybook renders stories\n  verify üëà you look at stories\n  teardown\nend\n</code></pre>\n<p>And subsequently, any regressions are caught by automatically capturing and comparing image snapshots.</p>\n<pre><code class=\"language-shell\">test do\n  setup\n  execute üëà Storybook renders stories\n  verify üëà capture image snapshots and compare them to baselines\n  teardown\nend\n</code></pre>\n<p>The same test case is used in both scenarios, only the method of verification changes.</p>\n<h4>How to write visual test cases</h4>\n<p>Let's focus on that first scenario for now. In Storybook, a test is as simple as rendering a React element. To write a visual test case, a \"story\" in Storybook parlance, we outline the states of the component we're interested in. The code sample below shows how you'd write visual tests for <code>InboxTask</code>, <code>SnoozedTask</code>, and <code>PinnedTask</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n};\n\nexport const InboxTask = {\n  args: {\n    task: {\n      id: '1',\n      title: 'Test Task',\n      state: 'TASK_INBOX',\n      updatedAt: new Date(2023, 0, 1, 9, 0),\n      boardName: 'On Test Board',\n    },\n  },\n};\n\nexport const SnoozedTask = {\n  args: {\n    task: {\n      // Shaping the stories through args composition.\n      ...InboxTask.args.task,\n      state: 'TASK_SNOOZED',\n    },\n  },\n};\n\nexport const PinnedTask = {\n  args: {\n    task: {\n      // Shaping the stories through args composition.\n      ...InboxTask.args.task,\n      state: 'TASK_PINNED',\n    },\n  },\n};`, `87808600367003960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"87808600367003960000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/Task.stories.js</div>\n<pre><code class=\"language-js\">import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n};\n\nexport const InboxTask = {\n  args: {\n    task: {\n      id: '1',\n      title: 'Test Task',\n      state: 'TASK_INBOX',\n      updatedAt: new Date(2023, 0, 1, 9, 0),\n      boardName: 'On Test Board',\n    },\n  },\n};\n\nexport const SnoozedTask = {\n  args: {\n    task: {\n      // Shaping the stories through args composition.\n      ...InboxTask.args.task,\n      state: 'TASK_SNOOZED',\n    },\n  },\n};\n\nexport const PinnedTask = {\n  args: {\n    task: {\n      // Shaping the stories through args composition.\n      ...InboxTask.args.task,\n      state: 'TASK_PINNED',\n    },\n  },\n};\n</code></pre>\n<p>In Storybook, the <code>Task</code> and its variations would appear in the sidebar. This corresponds to the <em>‚Äúexecute‚Äù</em> phase of a test cycle; the <em>‚Äúverify‚Äù</em> phase we do by eye in Storybook.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/task-stories-snoozed-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<p>For testing UI, human verification is a pragmatic approach because it's robust to code changes in the component that don‚Äôt affect the visual appearance. Additionally, because we only need to write our inputs ahead of time and visually check the output, we‚Äôre automatically building UIs in a TDD style.</p>\n<h2>Learn visual test-driven development</h2>\n<p>If you are building an app from a well-thought-out design, the chances are that there are a set of well-specified components with inputs and outputs embedded in the design artifact. Pair this ‚Äúdesign spec‚Äù with the visual testing process, and you can run an exact analogy to TDD.</p>\n<p>In the next chapter, we'll apply what we learned so far by coding an example component using Visual TDD.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/visual-test-driven-development.mp4\"\n    type=\"video/mp4\">\n</video>","frontmatter":{"title":"Workflow","description":"A test-driven workflow for building components","commit":null},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/en/workflow/","chapter":"workflow","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/en/workflow/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I‚Äôm learning how to visual test UIs with Storybook! It‚Äôs great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusi√≥n","title":"Conclusi√≥n","description":"Di adi√≥s a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducci√≥n","title":"Introducci√≥n a las pruebas visuales","description":"La manera pragm√°tica de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcci√≥n de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"ÏûêÎèôÌôî","title":"ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî","description":"ÌöåÍ∑Ä Ïò§Î•òÎ•º Ïû°Í∏∞ ÏúÑÌï¥ ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏Î•º ÏûêÎèôÌôîÌïòÍ∏∞"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Ïª¥Ìè¨ÎÑåÌä∏ ÌÉêÏÉâÍ∏∞","title":"Ïª¥Ìè¨ÎÑåÌä∏ ÌÉêÏÉâÍ∏∞","description":"UI Í∞úÎ∞úÍ≥º ÏãúÍ∞ÅÏ†Å ÌÖåÏä§ÌåÖÏùÑ ÏúÑÌïú ÎèÑÍµ¨"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"ÏãúÍ∞ÅÏ†Å Î≤ÑÍ∑∏Îì§Ïóê ÏïàÎÖïÏùÑ"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"ÏãúÍ∞ÅÏ†Å ÌÖåÏä§ÌåÖ ÏÜåÍ∞ú","description":"UIÎ•º ÌÖåÏä§Ìä∏ÌïòÎäî Ïã§Ïö©Ï†ÅÏù∏ Î∞©Î≤ï"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"ÏãúÍ∞ÅÏ†Å TDD","description":"Ï≤´ Î≤àÏß∏ ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"ÏûëÏóÖ ÌùêÎ¶Ñ(Work Flow)","description":"Ïª¥Ìè¨ÎÑåÌä∏ ÏÑ§Í≥ÑÎ•º ÏúÑÌïú ÌÖåÏä§Ìä∏ Ï£ºÎèÑ(test-driven) ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","language":"en","chapter":"workflow","pageType":"chapter"}},"staticQueryHashes":["238248339"]}