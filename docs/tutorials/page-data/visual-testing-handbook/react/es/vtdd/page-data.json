{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/es/vtdd/","result":{"data":{"currentPage":{"html":"<p>Ahora que los conceptos básicos fueron cubiertos, veamos los detalles. Este ejemplo muestra la construcción de un estado de un componente <code>CommentList</code> usando <strong>TDD Visual</strong> (desarrollo guiado por pruebas visuales) con Storybook.</p>\n<ol>\n<li>Cree casos de prueba visuales</li>\n<li>Consulte las pruebas en Storybook</li>\n<li>Desarrolle la implementación</li>\n<li>Compare la implementación con el diseño.</li>\n<li>Iterar</li>\n</ol>\n<h3>Lo que estamos construyendo</h3>\n<p><code>CommentList</code> es parte de una herramienta de chat para luchadores por la libertad galáctica. Nuestro diseñador nos ha entregado un diseño para las diversas formas en que debe verse la lista de comentarios según los datos y el estado de la aplicación. Nuestro trabajo es garantizar que la lista se muestre correctamente en términos del texto exacto, las imágenes mostradas y el tratamiento visual.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/visual-testing-handbook-commentlist-design-optimized.png\" alt=\"Especificaciones de diseño de Commentlist\"></p>\n<h3>1. Cree casos de prueba visuales</h3>\n<p>Inicie el desarrollo guiado por pruebas visuales mediante la creación de casos de prueba. Crearemos tres casos que coincidan con las tres imágenes de arriba. Un desarrollo guiado por pruebas estricto diría que necesitamos desarrollar e implementar un caso de prueba a la vez; depende de usted si cree que esto ayuda a su proceso.</p>\n<p>Configuremos el proyecto de ejemplo usando <a href=\"https://github.com/Rich-Harris/degit\">degit</a> para descargar las plantillas repetitivas necesarias (aplicaciones parcialmente construidas con alguna configuración predeterminada). Ejecute los siguientes comandos:</p>\n<pre><code class=\"language-shell\"># Clone the template for this tutorial\nnpx degit chromaui/visual-testing-handbook-react-template commentlist\n\ncd commentlist\n\n# Install dependencies\nyarn\n</code></pre>\n<p>A continuación, crearemos la implementación de <code>CommentList</code> más simple posible para que podamos asegurarnos de que nuestras pruebas estén configuradas correctamente.</p>\n<p>Dentro de su directorio <code>src</code>, cree una nueva carpeta llamada<code>components</code>, luego cree un nuevo archivo llamado <code>CommentList.js</code> con el siguiente contenido:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return <div>loading</div>;\n  }\n  if (comments.length === 0) {\n    return <div>empty</div>;\n  }\n  return (\n    <div>\n      {comments.length} of {totalCount}\n    </div>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};`, `35809795769645736000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"35809795769645736000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return &#x3C;div>loading&#x3C;/div>;\n  }\n  if (comments.length === 0) {\n    return &#x3C;div>empty&#x3C;/div>;\n  }\n  return (\n    &#x3C;div>\n      {comments.length} of {totalCount}\n    &#x3C;/div>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};\n</code></pre>\n<p>Ahora que tenemos una implementación básica, podemos construir nuestros estados de prueba. Storybook hace que esto sea rápido y fácil.</p>\n<p>Cree un nuevo archivo llamado <code>CommentList.stories.js</code> en <code>src/components</code> y agregue lo siguiente:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport CommentList from './CommentList';\n\nexport default {\n  component: CommentList,\n  title: 'CommentList',\n};\n\nconst Template = args => <CommentList {...args} />;\n\nexport const Paginated = Template.bind({});\nPaginated.args = {\n  comments: [\n    {\n      text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n      author: {\n        name: 'Luke',\n        avatar: 'luke.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Leah',\n        avatar: 'leah.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Han',\n        avatar: 'han.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Poe',\n        avatar: 'poe.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Finn',\n        avatar: 'finn.jpeg',\n      },\n    },\n  ],\n  totalCount: 10,\n};\n\nexport const HasData = Template.bind({});\nHasData.args = {\n  comments: [...Paginated.args.comments.slice(0, 3)],\n  totalCount: 3,\n};\nexport const Loading = Template.bind({});\nLoading.args = {\n  comments: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  ...Loading.args,\n  loading: false,\n};`, `48055315974563590000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"48055315974563590000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport CommentList from './CommentList';\n\nexport default {\n  component: CommentList,\n  title: 'CommentList',\n};\n\nconst Template = args => &#x3C;CommentList {...args} />;\n\nexport const Paginated = Template.bind({});\nPaginated.args = {\n  comments: [\n    {\n      text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n      author: {\n        name: 'Luke',\n        avatar: 'luke.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Leah',\n        avatar: 'leah.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Han',\n        avatar: 'han.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Poe',\n        avatar: 'poe.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Finn',\n        avatar: 'finn.jpeg',\n      },\n    },\n  ],\n  totalCount: 10,\n};\n\nexport const HasData = Template.bind({});\nHasData.args = {\n  comments: [...Paginated.args.comments.slice(0, 3)],\n  totalCount: 3,\n};\nexport const Loading = Template.bind({});\nLoading.args = {\n  comments: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  ...Loading.args,\n  loading: false,\n};\n</code></pre>\n<h3>2. Consulte las pruebas en Storybook</h3>\n<p>Inicie Storybook para ver los casos de prueba. La implementación de nuestros componentes es básica, pero nos permite confirmar que nuestros casos de prueba se procesan según lo previsto.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn storybook`, `52314658708424040000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"52314658708424040000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn storybook\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/commentlist-initial-state-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<h3>3. Desarrolle la implementación</h3>\n<p>Hasta ahora, edificamos una implementación rudimentaria y luego configuramos Storybook para renderizar nuestros casos de prueba. Es hora de comenzar a construir una implementación de la variación <code>HasData</code> de forma aislada.</p>\n<p>Usamos <a href=\"https://styled-components.com/\"><code>styled-components</code></a> - una biblioteca que encapsula CSS a nivel de componente. Ejecute el siguiente comando:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add styled-components`, `92241812627344230000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"92241812627344230000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add styled-components\n</code></pre>\n<p>Actualice su archivo <code>CommentList.js</code> con lo siguiente:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n import styled, { createGlobalStyle } from 'styled-components';\n\n const CommentListDiv = styled.div\\`\n   font-family: &quot;Nunito Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\n   color: #333;\n   display: inline-block;\n   vertical-align: top;\n   width: 265px;\n \\`;\n\n const CommentItemDiv = styled.div\\`\n   font-size: 12px;\n   line-height: 14px;\n   clear: both;\n   height: 48px;\n   margin-bottom: 10px;\n   box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n   background: linear-gradient(\n    120deg,\n    rgba(248, 248, 254, 0.95),\n    rgba(250, 250, 250, 0.95)\n   );\n   border-radius: 48px;\n \\`;\n\n const AvatarDiv = styled.div\\`\n   float: left;\n   position: relative;\n   overflow: hidden;\n   height: 48px;\n   width: 48px;\n   margin-right: 14px;\n   background: #dfecf2;\n   border-radius: 48px;\n \\`;\n\n const AvatarImg = styled.img\\`\n   position: absolute;\n   height: 100%;\n   width: 100%;\n   left: 0;\n   top: 0;\n   z-index: 1;\n   background: #999;\n \\`;\n\n const MessageDiv = styled.div\\`\n   overflow: hidden;\n   padding-top: 10px;\n   padding-right: 20px;\n \\`;\n\n const AuthorSpan = styled.span\\`\n   font-weight: bold;\n \\`;\n\n const TextSpan = styled.span\\`\\`;\n\n const GlobalStyle = createGlobalStyle\\`\n   @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n \\`;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return <div>loading</div>;\n  }\n  if (comments.length === 0) {\n    return <div>empty</div>;\n  }\n  return (\n   <>\n   <GlobalStyle/>\n   <CommentListDiv>\n     {comments.map(({ text, author: { name, avatar } }) => (\n       <CommentItemDiv key={\\`comment_\\${name}\\`}>\n         <AvatarDiv>\n           <AvatarImg src={avatar} />\n         </AvatarDiv>\n         <MessageDiv>\n           <AuthorSpan>{name}</AuthorSpan> <TextSpan>{text}</TextSpan>\n         </MessageDiv>\n       </CommentItemDiv>\n     ))}\n   </CommentListDiv>\n   </>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};`, `73891673465350110000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"73891673465350110000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.stories.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n+ import styled, { createGlobalStyle } from 'styled-components';\n\n+ const CommentListDiv = styled.div`\n+   font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n+   color: #333;\n+   display: inline-block;\n+   vertical-align: top;\n+   width: 265px;\n+ `;\n\n+ const CommentItemDiv = styled.div`\n+   font-size: 12px;\n+   line-height: 14px;\n+   clear: both;\n+   height: 48px;\n+   margin-bottom: 10px;\n+   box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n+   background: linear-gradient(\n+    120deg,\n+    rgba(248, 248, 254, 0.95),\n+    rgba(250, 250, 250, 0.95)\n+   );\n+   border-radius: 48px;\n+ `;\n\n+ const AvatarDiv = styled.div`\n+   float: left;\n+   position: relative;\n+   overflow: hidden;\n+   height: 48px;\n+   width: 48px;\n+   margin-right: 14px;\n+   background: #dfecf2;\n+   border-radius: 48px;\n+ `;\n\n+ const AvatarImg = styled.img`\n+   position: absolute;\n+   height: 100%;\n+   width: 100%;\n+   left: 0;\n+   top: 0;\n+   z-index: 1;\n+   background: #999;\n+ `;\n\n+ const MessageDiv = styled.div`\n+   overflow: hidden;\n+   padding-top: 10px;\n+   padding-right: 20px;\n+ `;\n\n+ const AuthorSpan = styled.span`\n+   font-weight: bold;\n+ `;\n\n+ const TextSpan = styled.span``;\n\n+ const GlobalStyle = createGlobalStyle`\n+   @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n+ `;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return &#x3C;div>loading&#x3C;/div>;\n  }\n  if (comments.length === 0) {\n    return &#x3C;div>empty&#x3C;/div>;\n  }\n  return (\n+   &#x3C;>\n+   &#x3C;GlobalStyle/>\n+   &#x3C;CommentListDiv>\n+     {comments.map(({ text, author: { name, avatar } }) => (\n+       &#x3C;CommentItemDiv key={`comment_${name}`}>\n+         &#x3C;AvatarDiv>\n+           &#x3C;AvatarImg src={avatar} />\n+         &#x3C;/AvatarDiv>\n+         &#x3C;MessageDiv>\n+           &#x3C;AuthorSpan>{name}&#x3C;/AuthorSpan> &#x3C;TextSpan>{text}&#x3C;/TextSpan>\n+         &#x3C;/MessageDiv>\n+       &#x3C;/CommentItemDiv>\n+     ))}\n+   &#x3C;/CommentListDiv>\n+   &#x3C;/>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};\n</code></pre>\n<h3>4. Compare la implementación con el diseño</h3>\n<p>Compruebe cómo se ve el componente en Storybook. Este ejemplo ya proporcionó el CSS, pero en la práctica, modificaríamos los estilos y los confirmamos en Storybook a medida que avanzamos.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/commentlist-finished-state-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<h3>5. Iterar</h3>\n<p>Si no estamos satisfechos con la implementación en el paso 4, regresaremos al paso 3 y seguiremos trabajando en ello. Si la interfaz de usuario coincide con la especificación, pasaremos a crear la siguiente variación, tal vez agregando el botón \"cargar más\" a la historia <code>Paginada</code>.</p>\n<p>Mientras iteramos a través de este flujo de trabajo, verifique regularmente cada historia para asegurarse de que la implementación final maneje correctamente cada estado de prueba y no solo el último en el que trabajamos.</p>\n<h2>Aprenda a automatizar las pruebas visuales</h2>\n<p>En el próximo capítulo, veremos cómo podemos automatizar el proceso VTDD con <a href=\"https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">Chromatic</a>, un servicio gratuito de prueba visual creado por los mantenedores de Storybook.</p>","frontmatter":{"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales","commit":"d260c8d"},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/vtdd/","chapter":"vtdd","framework":"react","language":"es","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/es/vtdd/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I’m learning how to visual test UIs with Storybook! It’s great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"자동화","title":"시각적 테스트 자동화","description":"회귀 오류를 잡기 위해 시각적 테스트를 자동화하기"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"컴포넌트 탐색기","title":"컴포넌트 탐색기","description":"UI 개발과 시각적 테스팅을 위한 도구"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"시각적 버그들에 안녕을"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"시각적 테스팅 소개","description":"UI를 테스트하는 실용적인 방법"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"작업 흐름(Work Flow)","description":"컴포넌트 설계를 위한 테스트 주도(test-driven) 작업 흐름(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","language":"es","chapter":"vtdd","pageType":"chapter"}},"staticQueryHashes":["238248339"]}