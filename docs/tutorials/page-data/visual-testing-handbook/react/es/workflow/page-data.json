{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/es/workflow/","result":{"data":{"currentPage":{"html":"<p>El desarrollo de interfaces de usuario siempre ha estado mal definido. La naturaleza subjetiva de la interfaz de usuario conduce a flujos de trabajo de desarrollo ad-hoc y a interfaces de usuario con errores. Este cap√≠tulo comparte c√≥mo los equipos profesionales construyen la UI de una manera rigurosa y basada en pruebas visuales.</p>\n<h2>Desarrollo guiado por pruebas</h2>\n<p>Antes de comenzar, recapitulemos <strong><a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven development (TDD)</a></strong>, una pr√°ctica popular de ingenier√≠a. La idea central detr√°s de TDD es que usted escribe sus pruebas antes de desarrollar la funcionalidad bajo prueba.</p>\n<ol>\n<li>Construya un conjunto de pruebas unitarias automatizadas para su c√≥digo</li>\n<li>Escriba el c√≥digo en s√≠ para \"convertir las pruebas en verde\".</li>\n</ol>\n<p>TDD te permite pensar claramente sobre lo que su c√≥digo necesita hacer en t√©rminos de entradas concretas (para los componentes, nos referimos a estos como \"estados\"). De esa manera, puede cubrir todos los casos de uso de su m√≥dulo.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/test-driven-development.mp4\"\n    type=\"video/mp4\">\n</video>\n<p>Veamos un ejemplo. Supongamos que tenemos una funci√≥n <code>relativize</code> que convierte un objeto de fecha sin formato al formato de fecha relativa del formulario \"hace 2 semanas\". Es bastante sencillo delinear todos los diversos tipos de entrada que desea cubrir. Y luego, presione el bot√≥n \"test\" cada vez que crea que ha avanzado hacia una soluci√≥n.</p>\n<p>Su framework de prueba le permite ejecutar la funci√≥n <code>relativize</code> de forma aislada sin necesidad de proporcionar informaci√≥n para toda su aplicaci√≥n solo para probar esa parte.</p>\n<p>Sin embargo, TDD fracasa al desarrollar interfaces de usuario porque es dif√≠cil definir las pruebas con anticipaci√≥n, los m√≥dulos son dif√≠ciles de aislar y los resultados son subjetivos. Estas deficiencias se resuelven mediante componentes de prueba visual de forma aislada.</p>\n<h2>Pruebas visuales</h2>\n<p>La parte complicada de las pruebas de interfaz de usuario es que no es posible verificar los detalles visuales relevantes solo con el c√≥digo. Las pruebas visuales eluden esto al involucrar el juicio de un humano de una manera r√°pida y enfocada.</p>\n<h4>Flujo de trabajo de pruebas visuales</h4>\n<p>En la pr√°ctica, las pruebas visuales utilizan Storybook para probar \"visualmente\" un componente en un conjunto de estados de prueba definidos. Las pruebas visuales comparten los mismos pasos de configuraci√≥n, ejecuci√≥n y desmontaje que cualquier otro tipo de prueba, pero el paso de verificaci√≥n recae en el usuario.</p>\n<pre><code class=\"language-shell\">test do\n  setup\n  execute üëà Storybook renders stories\n  verify üëà you look at stories\n  teardown\nend\n</code></pre>\n<p>Y posteriormente, cualquier regresi√≥n es atrapada, capturando y comparando instant√°neas de im√°genes autom√°ticamente.</p>\n<pre><code class=\"language-shell\">test do\n  setup\n  execute üëà Storybook renders stories\n  verify üëà capture image snapshots and compare them to baselines\n  teardown\nend\n</code></pre>\n<p>Se utiliza el mismo caso de prueba en ambos escenarios, solo cambia el m√©todo de verificaci√≥n.</p>\n<h4>C√≥mo escribir casos de prueba visuales</h4>\n<p>Centr√©monos en ese primer escenario por ahora. En Storybook, una prueba es tan simple como renderizar un elemento React. Para escribir un caso de prueba visual, una \"historia\" en el lenguaje de Storybook, describimos los estados del componente que nos interesa. El siguiente ejemplo de c√≥digo muestra c√≥mo escribir√≠as pruebas visuales para <code>InboxTask</code>,<code> SnoozedTask</code> y <code>PinnedTask</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n};\n\nconst Template = args => <Task {...args} />;\n\nexport const InboxTask = Template.bind({});\nInboxTask.args = {\n  task: {\n    id: '1',\n    title: 'Test Task',\n    state: 'TASK_INBOX',\n    updatedAt: new Date(2021, 0, 1, 9, 0),\n    boardName: 'on Test Board',\n  },\n};\n\nexport const SnoozedTask = Template.bind({});\nSnoozedTask.args = {\n  task: {\n    // Shaping the stories through args composition.\n    ...InboxTask.args.task,\n    state: 'TASK_SNOOZED',\n  },\n};\n\nexport const PinnedTask = Template.bind({});\nPinnedTask.args = {\n  task: {\n    // Shaping the stories through args composition.\n    ...InboxTask.args.task,\n    state: 'TASK_PINNED',\n  },\n};`, `37246025275745760000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"37246025275745760000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/Task.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n};\n\nconst Template = args => &#x3C;Task {...args} />;\n\nexport const InboxTask = Template.bind({});\nInboxTask.args = {\n  task: {\n    id: '1',\n    title: 'Test Task',\n    state: 'TASK_INBOX',\n    updatedAt: new Date(2021, 0, 1, 9, 0),\n    boardName: 'on Test Board',\n  },\n};\n\nexport const SnoozedTask = Template.bind({});\nSnoozedTask.args = {\n  task: {\n    // Shaping the stories through args composition.\n    ...InboxTask.args.task,\n    state: 'TASK_SNOOZED',\n  },\n};\n\nexport const PinnedTask = Template.bind({});\nPinnedTask.args = {\n  task: {\n    // Shaping the stories through args composition.\n    ...InboxTask.args.task,\n    state: 'TASK_PINNED',\n  },\n};\n</code></pre>\n<p>En Storybook,<code>Task</code> y sus variaciones aparecer√°n en la barra lateral. Esto corresponde a la fase <em>‚Äúejecuci√≥n‚Äù</em> de un ciclo de prueba; la fase <em>\"verificar\"</em> la hacemos a ojo en Storybook.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/task-stories-snoozed-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<p>Para probar la interfaz de usuario, la verificaci√≥n humana es un enfoque pragm√°tico porque es robusto para los cambios de c√≥digo en el componente que no afectan la apariencia visual. Adem√°s, debido a que solo necesitamos escribir nuestras entradas con anticipaci√≥n y verificar visualmente la salida, estamos creando interfaces de usuario autom√°ticamente en un estilo TDD.</p>\n<h2>Aprende el desarrollo guiado por pruebas visuales</h2>\n<p>Si est√° creando una aplicaci√≥n a partir de un dise√±o bien pensado, lo m√°s probable es que haya un conjunto de componentes bien especificados con entradas y salidas integradas en el artefacto de dise√±o. Combine esta \"especificaci√≥n de dise√±o\" con el proceso de prueba visual y podr√° ejecutar una analog√≠a exacta con TDD.</p>\n<p>En el pr√≥ximo cap√≠tulo, aplicaremos lo que aprendimos hasta ahora desarrollando un componente de ejemplo usando TDD Visual.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/visual-test-driven-development.mp4\"\n    type=\"video/mp4\">\n</video>","frontmatter":{"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcci√≥n de componentes","commit":null},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/workflow/","chapter":"workflow","framework":"react","language":"es","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/es/workflow/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I‚Äôm learning how to visual test UIs with Storybook! It‚Äôs great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers"}}},{"node":{"frontmatter":{"tocTitle":"Conclusi√≥n","title":"Conclusi√≥n","description":"Di adi√≥s a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Introducci√≥n","title":"Introducci√≥n a las pruebas visuales","description":"La manera pragm√°tica de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcci√≥n de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusi√≥n","title":"Conclusi√≥n","description":"Di adi√≥s a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducci√≥n","title":"Introducci√≥n a las pruebas visuales","description":"La manera pragm√°tica de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcci√≥n de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"ÏûêÎèôÌôî","title":"ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî","description":"ÌöåÍ∑Ä Ïò§Î•òÎ•º Ïû°Í∏∞ ÏúÑÌï¥ ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏Î•º ÏûêÎèôÌôîÌïòÍ∏∞"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Ïª¥Ìè¨ÎÑåÌä∏ ÌÉêÏÉâÍ∏∞","title":"Ïª¥Ìè¨ÎÑåÌä∏ ÌÉêÏÉâÍ∏∞","description":"UI Í∞úÎ∞úÍ≥º ÏãúÍ∞ÅÏ†Å ÌÖåÏä§ÌåÖÏùÑ ÏúÑÌïú ÎèÑÍµ¨"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"ÏãúÍ∞ÅÏ†Å Î≤ÑÍ∑∏Îì§Ïóê ÏïàÎÖïÏùÑ"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"ÏãúÍ∞ÅÏ†Å ÌÖåÏä§ÌåÖ ÏÜåÍ∞ú","description":"UIÎ•º ÌÖåÏä§Ìä∏ÌïòÎäî Ïã§Ïö©Ï†ÅÏù∏ Î∞©Î≤ï"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"ÏãúÍ∞ÅÏ†Å TDD","description":"Ï≤´ Î≤àÏß∏ ÏãúÍ∞ÅÏ†Å ÌÖåÏä§Ìä∏Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"ÏûëÏóÖ ÌùêÎ¶Ñ(Work Flow)","description":"Ïª¥Ìè¨ÎÑåÌä∏ ÏÑ§Í≥ÑÎ•º ÏúÑÌïú ÌÖåÏä§Ìä∏ Ï£ºÎèÑ(test-driven) ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","language":"es","chapter":"workflow","pageType":"chapter"}},"staticQueryHashes":["238248339"]}