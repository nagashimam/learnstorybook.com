{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/es/introduction/","result":{"data":{"currentPage":{"html":"<p>Las interfaces de usuario son subjetivas. La respuesta a \"¿esto se ve bien?\" depende del navegador, del dispositivo, y del gusto personal. Todavía se debe mirar la interfaz de usuario renderizada para verificar su apariencia.</p>\n<p>Pero lleva una eternidad controlar manualmente toda la UI commit a commit. Diferentes enfoques como pruebas unitarias y pruebas de instantáneas intentan automatizar la verificación visual. Usualmente terminan fracasando porque las máquinas no pueden determinar la exactitud de la UI desde la secuencia de las etiquetas de HTML y de las clases de CSS.</p>\n<p>¿Cómo previenen errores visuales los equipos? ¿Qué técnicas utilizan Microsoft, BBC y Shopify para\nenviar UIs a millones de personas? Mi co-autor Tom y yo investigamos equipos líderes para descubrir qué funciona realmente.</p>\n<p>Este manual introduce las pruebas visuales, un enfoque pragmático que combina la precisión del ojo humano con la eficiencia de las máquinas. En lugar de eliminar a las personas de la ecuación de prueba, las pruebas visuales utilizan herramientas para centrar su esfuerzo en los cambios específicos de la interfaz de usuario que requieren atención.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/visual-testing-handbook-vtdd-path-optimized.png\" alt=\"Ruta impulsada por pruebas visuales\"></p>\n<h2>Las pruebas unitarias no poseen globos oculares</h2>\n<p>Para comprender las pruebas visuales, tiene sentido comenzar con pruebas unitarias. Las UIs modernas son <a href=\"https://componentdriven.org/\">component-driven</a> - están compuestas de piezas modulares. La construcción del componente le permite representar la interfaz de usuario en función de las propiedades y el estado. Eso significa que puedes realizar pruebas unitarias de componentes como cualquier otra función.</p>\n<p>Una prueba unitaria aísla un módulo y luego verifica su comportamiento. Proporciona entradas (propiedades, estado, etc.) y compara la salida con un resultado esperado. Las pruebas unitarias son deseables porque probar los módulos de forma aislada facilita cubrir los casos extremos y señalar el origen de las fallas.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/component-unit-testing.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<p>El problema principal es que gran parte de la complejidad inherente de una interfaz de usuario es visual: los detalles de cómo se representan los elementos HTML y CSS generados en la pantalla del usuario.</p>\n<p>Las pruebas unitarias son perfectas para evaluar salidas concretas: <code>2 + 2 === 4</code>. Pero no son buenas para la interfaz de usuario porque es difícil discernir qué detalles de HTML o CSS afectan la apariencia y cómo lo hacen. Por ejemplo, los cambios en HTML no siempre afectan la apariencia de la UI.</p>\n<h2>¿Qué pasa con las pruebas de instantáneas?</h2>\n<p>Las <a href=\"https://reactjs.org/docs/testing-recipes.html#snapshot-testing\">pruebas instantáneas</a> proporcionan un enfoque alternativo para la verificación de la apariencia de la interfaz de usuario. Representan el componente y luego capturan el DOM generado como una \"línea base\". Los cambios posteriores comparan el nuevo DOM con la línea base. Si hay diferencias, el desarrollador debe actualizar explícitamente dicha línea base.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/code-visual-testing-optimized.png\" alt=\"Código de componente minificado\"></p>\n<p>En la práctica, las instantáneas DOM son incómodas porque es complicado determinar cómo se representa una interfaz de usuario mediante la evaluación de un blob de HTML.</p>\n<p>Las pruebas instantáneas sufren de la misma fragilidad que otras pruebas de UI automatizadas. Cualquier cambio en el funcionamiento interno de un componente requiere que se actualice la prueba, independientemente de si cambió la salida renderizada del componente.</p>\n<h2>Las pruebas visuales están hechas para la interfaz de usuario</h2>\n<p>Las pruebas visuales están diseñadas para detectar cambios en la apariencia de la interfaz de usuario. Utilice un explorador de componentes como Storybook para aislar los componentes de la interfaz de usuario, simular sus variaciones y guardar los casos de prueba como \"historias\".</p>\n<p>Durante el desarrollo, “ejecute” una verificación manual rápida de un componente renderizandolo en un navegador para ver cómo se ve. Confirme las variaciones de su componente alternando entre cada caso de prueba enumerado en el explorador de componentes.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/storybook-toggling-stories.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<p>En QA, utilice la automatización para detectar regresiones y reforzar la coherencia de la interfaz de usuario. Herramientas como <a href=\"https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">Chromatic</a> capturan una instantánea de cada caso de prueba, completa con marcado, estilo y otros activos, en un entorno de navegador coherente.</p>\n<p>En cada commit, nuevas instantáneas se comparan automáticamente con instantáneas de línea base aceptadas previamente. Cuando la máquina detecta diferencias visuales, el desarrollador recibe una notificación para aprobar el cambio intencional o corregir el error accidental.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/component-visual-testing.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<h4>Eso suena a mucho trabajo...</h4>\n<p>Eso puede parecer laborioso, pero termina siendo más fácil que examinar los falsos positivos de las pruebas automatizadas, actualizar los casos de prueba para que coincidan con cambios menores en la interfaz de usuario y trabajar horas extras para que las pruebas vuelvan a pasar exitosamente.</p>\n<h2>Aprenda a usar las herramientas</h2>\n<p>Ahora que tenemos conocimiento sobre las pruebas visuales, echemos un vistazo a la herramienta principal que necesitas para habilitarla: un explorador de componentes. En el próximo capítulo, veremos cómo los exploradores de componentes ayudan a los desarrolladores a crear y probar componentes.</p>","frontmatter":{"title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario","commit":null},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/introduction/","chapter":"introduction","framework":"react","language":"es","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/es/introduction/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I’m learning how to visual test UIs with Storybook! It’s great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"자동화","title":"시각적 테스트 자동화","description":"회귀 오류를 잡기 위해 시각적 테스트를 자동화하기"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"컴포넌트 탐색기","title":"컴포넌트 탐색기","description":"UI 개발과 시각적 테스팅을 위한 도구"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"시각적 버그들에 안녕을"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"시각적 테스팅 소개","description":"UI를 테스트하는 실용적인 방법"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"작업 흐름(Work Flow)","description":"컴포넌트 설계를 위한 테스트 주도(test-driven) 작업 흐름(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","language":"es","chapter":"introduction","pageType":"chapter"}},"staticQueryHashes":["238248339"]}