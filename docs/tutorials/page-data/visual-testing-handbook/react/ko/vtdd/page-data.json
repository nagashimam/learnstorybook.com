{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/visual-testing-handbook/react/ko/vtdd/","result":{"data":{"currentPage":{"html":"<p>이제 기본기는 다 다뤘으니, 더 세부적인 이야기로 들어가 봅시다. 이 예시에서는 스토리북(Storybook)의 <strong>Visual TDD</strong>를 이용해 <code>CommentList</code> 하나의 컴포넌트 상태(state)를 만드는 과정을 보여드리겠습니다.</p>\n<ol>\n<li>시각적 테스트 케이스 구축</li>\n<li>스토리북 테스트 검토</li>\n<li>구현 구축</li>\n<li>디자인에 대한 구현 검토</li>\n<li>반복</li>\n</ol>\n<h3>우리가 만들 것</h3>\n<p><code>CommentList</code>는 galactic freedom fighters의 채팅 도구의 일부분입니다. 디자이너는 우리에게 데이터와 앱의 상태를 바탕으로 댓글 목록이 보여야 할 다양한 방법을 디자인해서 넘겨주었습니다. 우리가 할 일은 목록이 정확한 텍스트, 보여지는 이미지, 시각적인 처리 측면에서 올바르게 렌더링되도록 하는 것입니다.</p>\n<p><img src=\"/tutorials/visual-testing-handbook/visual-testing-handbook-commentlist-design-optimized.png\" alt=\"Commentlist 디자인 스펙(spec)\"></p>\n<h3>1. 시각적 테스트 케이스들 구축</h3>\n<p>테스트 케이스들을 만들면서 시각적 TDD를 시작해봅시다. 우리는 위의 세 이미지에 각각 대응하는 세 가지 케이스를 만들 것입니다. 엄격한 TDD 전문가는 한 번에 하나의 테스트 케이스를 개발하고 구현해야 한다고 말하겠지만 - 이게 여러분의 프로세스에 도움이 되는지는 스스로 생각하고 결정하면 됩니다.</p>\n<p>예시 프로젝트를 <a href=\"https://github.com/Rich-Harris/degit\">degit</a>을 이용해서 설정하고, 필요한 보일러 플레이트 템플릿(기본 설정을 가지고 일부만 만들어진 어플리케이션)을 다운로드 하겠습니다. 다음 명령어들을 실행해보세요. -</p>\n<pre><code class=\"language-shell\"># Clone the template for this tutorial\nnpx degit chromaui/visual-testing-handbook-react-template commentlist\n\ncd commentlist\n\n# Install dependencies\nyarn\n</code></pre>\n<p>다음으로, 우리는 가장 간단한 <code>CommentList</code>을 구현해서 테스트가 정확하게 설정되었는지 확인하겠습니다.</p>\n<p><code>src</code> 디렉토리 안에, <code>components</code>라는 새 폴더를 만듭니다, 그리고 <code>CommentList.js</code>라는 이름으로 새 파일을 하나 만들고 다음 내용을 적습니다. -</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return <div>loading</div>;\n  }\n  if (comments.length === 0) {\n    return <div>empty</div>;\n  }\n  return (\n    <div>\n      {comments.length} of {totalCount}\n    </div>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};`, `31686612366404354000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"31686612366404354000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return &#x3C;div>loading&#x3C;/div>;\n  }\n  if (comments.length === 0) {\n    return &#x3C;div>empty&#x3C;/div>;\n  }\n  return (\n    &#x3C;div>\n      {comments.length} of {totalCount}\n    &#x3C;/div>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};\n</code></pre>\n<p>이제 기본적인 구현이 있으니, 테스트 상태를 만들 수 있습니다. 스토리북을 사용하면 이 일을 빠르고 쉽게 할 수 있습니다.</p>\n<p><code>CommentList.stories.js</code>라는 파일을 <code>src/components</code> 폴더에 만들고 다음을 추가합니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport CommentList from './CommentList';\n\nexport default {\n  component: CommentList,\n  title: 'CommentList',\n};\n\nconst Template = args => <CommentList {...args} />;\n\nexport const Paginated = Template.bind({});\nPaginated.args = {\n  comments: [\n    {\n      text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n      author: {\n        name: 'Luke',\n        avatar: 'luke.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Leah',\n        avatar: 'leah.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Han',\n        avatar: 'han.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Poe',\n        avatar: 'poe.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Finn',\n        avatar: 'finn.jpeg',\n      },\n    },\n  ],\n  totalCount: 10,\n};\n\nexport const HasData = Template.bind({});\nHasData.args = {\n  comments: [...Paginated.args.comments.slice(0, 3)],\n  totalCount: 3,\n};\nexport const Loading = Template.bind({});\nLoading.args = {\n  comments: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  ...Loading.args,\n  loading: false,\n};`, `98418834221571100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"98418834221571100000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.stories.js</div>\n<pre><code class=\"language-js\">import React from 'react';\n\nimport CommentList from './CommentList';\n\nexport default {\n  component: CommentList,\n  title: 'CommentList',\n};\n\nconst Template = args => &#x3C;CommentList {...args} />;\n\nexport const Paginated = Template.bind({});\nPaginated.args = {\n  comments: [\n    {\n      text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n      author: {\n        name: 'Luke',\n        avatar: 'luke.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Leah',\n        avatar: 'leah.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Han',\n        avatar: 'han.jpeg',\n      },\n    },\n    {\n      text: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco.',\n      author: {\n        name: 'Poe',\n        avatar: 'poe.jpeg',\n      },\n    },\n    {\n      text: 'Duis aute irure dolor in reprehenderit in voluptate.',\n      author: {\n        name: 'Finn',\n        avatar: 'finn.jpeg',\n      },\n    },\n  ],\n  totalCount: 10,\n};\n\nexport const HasData = Template.bind({});\nHasData.args = {\n  comments: [...Paginated.args.comments.slice(0, 3)],\n  totalCount: 3,\n};\nexport const Loading = Template.bind({});\nLoading.args = {\n  comments: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  ...Loading.args,\n  loading: false,\n};\n</code></pre>\n<h3>2. Storybook에서 테스트를 확인하기</h3>\n<p>테스트 케이스를 보려면 Storybook을 시작하세요. 우리의 컴포넌트 구현은 뼈대 뿐이지만, 테스트 케이스가 의도대로 렌더링되는지 확인할 수는 있습니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn storybook`, `38837144221541450000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"38837144221541450000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn storybook\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/commentlist-initial-state-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<h3>3. 구현을 구축하기</h3>\n<p>일단, 기본적인 구현의 비계(scaffolded)를 세웠고 테스트 케이스를 렌더링하도록 스토리북을 설정했습니다. 이제 <code>HasData</code>의 변화형(variation)의 구현을 독립적으로 만들어볼 시간입니다.</p>\n<p>우리는 <a href=\"https://styled-components.com/\"><code>styled-components</code></a>를 사용합니다. CSS를 컴포넌트 수준에서 캡슐화 시켜주는 라이브러리입니다. 다음 명령어를 실행합니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add styled-components`, `61004221658457180000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"61004221658457180000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add styled-components\n</code></pre>\n<p><code>CommentList.js</code> 파일을 다음과 같이 수정하세요.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n import styled, { createGlobalStyle } from 'styled-components';\n\n const CommentListDiv = styled.div\\`\n   font-family: &quot;Nunito Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\n   color: #333;\n   display: inline-block;\n   vertical-align: top;\n   width: 265px;\n \\`;\n\n const CommentItemDiv = styled.div\\`\n   font-size: 12px;\n   line-height: 14px;\n   clear: both;\n   height: 48px;\n   margin-bottom: 10px;\n   box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n   background: linear-gradient(\n    120deg,\n    rgba(248, 248, 254, 0.95),\n    rgba(250, 250, 250, 0.95)\n   );\n   border-radius: 48px;\n \\`;\n\n const AvatarDiv = styled.div\\`\n   float: left;\n   position: relative;\n   overflow: hidden;\n   height: 48px;\n   width: 48px;\n   margin-right: 14px;\n   background: #dfecf2;\n   border-radius: 48px;\n \\`;\n\n const AvatarImg = styled.img\\`\n   position: absolute;\n   height: 100%;\n   width: 100%;\n   left: 0;\n   top: 0;\n   z-index: 1;\n   background: #999;\n \\`;\n\n const MessageDiv = styled.div\\`\n   overflow: hidden;\n   padding-top: 10px;\n   padding-right: 20px;\n \\`;\n\n const AuthorSpan = styled.span\\`\n   font-weight: bold;\n \\`;\n\n const TextSpan = styled.span\\`\\`;\n\n const GlobalStyle = createGlobalStyle\\`\n   @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n \\`;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return <div>loading</div>;\n  }\n  if (comments.length === 0) {\n    return <div>empty</div>;\n  }\n  return (\n   <>\n   <GlobalStyle/>\n   <CommentListDiv>\n     {comments.map(({ text, author: { name, avatar } }) => (\n       <CommentItemDiv key={\\`comment_\\${name}\\`}>\n         <AvatarDiv>\n           <AvatarImg src={avatar} />\n         </AvatarDiv>\n         <MessageDiv>\n           <AuthorSpan>{name}</AuthorSpan> <TextSpan>{text}</TextSpan>\n         </MessageDiv>\n       </CommentItemDiv>\n     ))}\n   </CommentListDiv>\n   </>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};`, `73452726160474380000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"73452726160474380000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/CommentList.js</div>\n<pre><code class=\"language-diff\">import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n+ import styled, { createGlobalStyle } from 'styled-components';\n\n+ const CommentListDiv = styled.div`\n+   font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n+   color: #333;\n+   display: inline-block;\n+   vertical-align: top;\n+   width: 265px;\n+ `;\n\n+ const CommentItemDiv = styled.div`\n+   font-size: 12px;\n+   line-height: 14px;\n+   clear: both;\n+   height: 48px;\n+   margin-bottom: 10px;\n+   box-shadow: rgba(0, 0, 0, 0.2) 0 0 10px 0;\n+   background: linear-gradient(\n+    120deg,\n+    rgba(248, 248, 254, 0.95),\n+    rgba(250, 250, 250, 0.95)\n+   );\n+   border-radius: 48px;\n+ `;\n\n+ const AvatarDiv = styled.div`\n+   float: left;\n+   position: relative;\n+   overflow: hidden;\n+   height: 48px;\n+   width: 48px;\n+   margin-right: 14px;\n+   background: #dfecf2;\n+   border-radius: 48px;\n+ `;\n\n+ const AvatarImg = styled.img`\n+   position: absolute;\n+   height: 100%;\n+   width: 100%;\n+   left: 0;\n+   top: 0;\n+   z-index: 1;\n+   background: #999;\n+ `;\n\n+ const MessageDiv = styled.div`\n+   overflow: hidden;\n+   padding-top: 10px;\n+   padding-right: 20px;\n+ `;\n\n+ const AuthorSpan = styled.span`\n+   font-weight: bold;\n+ `;\n\n+ const TextSpan = styled.span``;\n\n+ const GlobalStyle = createGlobalStyle`\n+   @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n+ `;\n\nexport default function CommentList({ loading, comments, totalCount }) {\n  if (loading) {\n    return &#x3C;div>loading&#x3C;/div>;\n  }\n  if (comments.length === 0) {\n    return &#x3C;div>empty&#x3C;/div>;\n  }\n  return (\n+   &#x3C;>\n+   &#x3C;GlobalStyle/>\n+   &#x3C;CommentListDiv>\n+     {comments.map(({ text, author: { name, avatar } }) => (\n+       &#x3C;CommentItemDiv key={`comment_${name}`}>\n+         &#x3C;AvatarDiv>\n+           &#x3C;AvatarImg src={avatar} />\n+         &#x3C;/AvatarDiv>\n+         &#x3C;MessageDiv>\n+           &#x3C;AuthorSpan>{name}&#x3C;/AuthorSpan> &#x3C;TextSpan>{text}&#x3C;/TextSpan>\n+         &#x3C;/MessageDiv>\n+       &#x3C;/CommentItemDiv>\n+     ))}\n+   &#x3C;/CommentListDiv>\n+   &#x3C;/>\n  );\n}\n\nCommentList.propTypes = {\n  /**\n   * Is the component in the loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Total number of comments\n   */\n  totalCount: PropTypes.number,\n  /**\n   * List of comments\n   */\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      author: PropTypes.shape({\n        name: PropTypes.string,\n        avatar: PropTypes.string,\n      }),\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  loading: false,\n  totalCount: 10,\n  comments: [],\n};\n</code></pre>\n<h3>4. 디자인에 대한 구현 검토하기</h3>\n<p>컴포넌트가 스토리북에서 어떻게 보이는지 검토합시다. 이 예시에서는 CSS를 이미 제공했습니다, 하지만 실제로는 styles을 약간 바꿔보면서 스토리북에서 어떻게 보이는지 확인했습니다.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/visual-testing-handbook/commentlist-finished-state-optimized.mp4\"\n    type=\"video/mp4\"/>\n</video>\n<h3>5. 반복</h3>\n<p>만약 step4에서 만든 구현에 만족하지 못한다면, step3로 돌아가서 계속 작업을 이어가면 됩니다. UI가 스펙과 일치한다면, 이제 다음 변화형(variation)을 만드는 걸로 넘어가서 - 'load more' 버튼을 <code>Paginated</code> 스토리에 추가할 겁니다.</p>\n<p>우리가 이 작업 흐름(workflow)을 반복한다면, 정기적으로 각 스토리를 확인해서 마지막으로 작업한 부분만이 아니라 최종 구현 전체가 각 테스트 상태를 정확하게 다루는지 확인해야 합니다.</p>\n<h2>시각적 테스트 자동화하는 법을 배우기</h2>\n<p>다음 챕터에서는, VTDD 과정을 스토리북 메인테이너들이 만든 무료 시각적 테스팅 서비스인 <a href=\"https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook\">Chromatic</a>으로 어떻게 자동화할 수 있는지 보겠습니다.</p>","frontmatter":{"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요","commit":"d260c8d"},"fields":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/ko/vtdd/","chapter":"vtdd","framework":"react","language":"ko","permalink":"https://storybook.js.org/tutorials/visual-testing-handbook/react/ko/vtdd/","tutorialUpToDate":false}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/learnstorybook-visual-testing-code","toc":["introduction","component-explorers","workflow","vtdd","automate","conclusion"],"title":"Visual Testing Handbook","twitterShareText":"I’m learning how to visual test UIs with Storybook! It’s great for finding UI bugs automatically."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"자동화","title":"시각적 테스트 자동화","description":"회귀 오류를 잡기 위해 시각적 테스트를 자동화하기"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"컴포넌트 탐색기","title":"컴포넌트 탐색기","description":"UI 개발과 시각적 테스팅을 위한 도구"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"시각적 버그들에 안녕을"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"시각적 테스팅 소개","description":"UI를 테스트하는 실용적인 방법"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"작업 흐름(Work Flow)","description":"컴포넌트 설계를 위한 테스트 주도(test-driven) 작업 흐름(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Automate","title":"Automate visual testing","description":"Automate visual testing to catch regressions"},"fields":{"slug":"/visual-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Component explorers","title":"Component explorers","description":"A tool for UI development and visual testing"},"fields":{"slug":"/visual-testing-handbook/react/en/component-explorers/","framework":"react","chapter":"component-explorers","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Say bye to visual bugs"},"fields":{"slug":"/visual-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to visual testing","description":"The pragmatic way to test user interfaces"},"fields":{"slug":"/visual-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Visual TDD","description":"Write your first visual tests"},"fields":{"slug":"/visual-testing-handbook/react/en/vtdd/","framework":"react","chapter":"vtdd","language":"en"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Workflow","description":"A test-driven workflow for building components"},"fields":{"slug":"/visual-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automatizar","title":"Automatizar las pruebas visuales","description":"Automatice las pruebas visuales para detectar regresiones"},"fields":{"slug":"/visual-testing-handbook/react/es/automate/","framework":"react","chapter":"automate","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Exploradores de componentes","title":"Exploradores de componentes","description":"Una herramienta para el desarrollo de la UI y las pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/component-explorers/","framework":"react","chapter":"component-explorers","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Conclusión","title":"Conclusión","description":"Di adiós a los errores visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/conclusion/","framework":"react","chapter":"conclusion","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"Introducción","title":"Introducción a las pruebas visuales","description":"La manera pragmática de probar interfaces de usuario"},"fields":{"slug":"/visual-testing-handbook/react/es/introduction/","framework":"react","chapter":"introduction","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"TDD Visual","description":"Escribe tus primeras pruebas visuales"},"fields":{"slug":"/visual-testing-handbook/react/es/vtdd/","framework":"react","chapter":"vtdd","language":"es"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"Flujo de trabajo","description":"Un flujo de trabajo guiado por pruebas para la construcción de componentes"},"fields":{"slug":"/visual-testing-handbook/react/es/workflow/","framework":"react","chapter":"workflow","language":"es"}}},{"node":{"frontmatter":{"tocTitle":"자동화","title":"시각적 테스트 자동화","description":"회귀 오류를 잡기 위해 시각적 테스트를 자동화하기"},"fields":{"slug":"/visual-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"컴포넌트 탐색기","title":"컴포넌트 탐색기","description":"UI 개발과 시각적 테스팅을 위한 도구"},"fields":{"slug":"/visual-testing-handbook/react/ko/component-explorer/","framework":"react","chapter":"component-explorer","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"시각적 버그들에 안녕을"},"fields":{"slug":"/visual-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"시각적 테스팅 소개","description":"UI를 테스트하는 실용적인 방법"},"fields":{"slug":"/visual-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"시각적 TDD","description":"첫 번째 시각적 테스트를 만들어보세요"},"fields":{"slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","chapter":"vtdd","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":null,"title":"작업 흐름(Work Flow)","description":"컴포넌트 설계를 위한 테스트 주도(test-driven) 작업 흐름(workflow)"},"fields":{"slug":"/visual-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}}]}},"pageContext":{"guide":"visual-testing-handbook","slug":"/visual-testing-handbook/react/ko/vtdd/","framework":"react","language":"ko","chapter":"vtdd","pageType":"chapter"}},"staticQueryHashes":["238248339"]}