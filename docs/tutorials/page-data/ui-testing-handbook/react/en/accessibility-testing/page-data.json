{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/ui-testing-handbook/react/en/accessibility-testing/","result":{"data":{"currentPage":{"html":"<p><a href=\"https://www.cdc.gov/ncbddd/disabilityandhealth/infographic-disability-impacts-all.html\">26% of adults</a> in the US have at least one disability. When you improve accessibility, it has an outsized impact on your current and future customers. It‚Äôs also a legal requirement.</p>\n<p>The most accurate way to check accessibility is manually on real devices. But that requires specialized expertise and a lot of time, both of which are scarce on frontend teams.</p>\n<p>That's why many companies now use a combination of automated and manual testing. Automation catches common accessibility issues with low effort from developers. Manual QA is reserved for trickier problems that require human attention.</p>\n<p>There are plenty of resources that dive deep into accessibility principles, so we won't get into that here. Instead, we'll focus on how to automate accessibility testing with Storybook. It's a pragmatic approach to finding and fixing most issues you're likely to encounter.</p>\n<h2>Why automation?</h2>\n<p>Before we begin, let‚Äôs examine common types of disabilities: visual, hearing, mobility, cognition, speech, and neurological. These user disabilities yield app requirements like:</p>\n<ul>\n<li>‚å® Keyboard navigation</li>\n<li>üó£ Screen reader support</li>\n<li>üëÜ Touch-friendly</li>\n<li>üé® High enough colour contrast</li>\n<li>‚ö°Ô∏è Reduced motion</li>\n<li>üîç Zoom</li>\n</ul>\n<p>In the past, you‚Äôd verify each of these requirements by checking every component across a combination of browsers, devices, and screen readers. But that‚Äôs impractical to do by hand because apps have dozens of components and are constantly updating the UI.</p>\n<h2>Automation speeds up your workflow</h2>\n<p>Automated tools audit the rendered DOM against a set of heuristics based on <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\">WCAG</a> rules and other industry-accepted best practices. They act as the first line of QA to catch blatant accessibility violations.</p>\n<p>For example, Axe, on average, finds <a href=\"https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/\">57% of WCAG issues automatically</a>. That allows teams to focus their expert resources on the more complex issues that require manual review.</p>\n<p>Many teams use the <a href=\"https://github.com/dequelabs/axe-core\">Axe library</a> because it integrates with most existing test environments. For example, the <a href=\"https://github.com/twilio-labs/paste\">Twilio Paste</a> team uses the <a href=\"https://github.com/twilio-labs/paste/blob/cd0ddad508e41cb9982a693a5160f1b7866f4e2a/packages/paste-core/components/checkbox/__tests__/checkboxdisclaimer.test.tsx#L40\">jest-axe integration</a>. Whereas the Shopify Polaris &#x26; Adobe Spectrum teams use the <a href=\"https://storybook.js.org/addons/@storybook/addon-a11y\">Storybook addon</a> version.</p>\n<p>The Storybook addon runs checks in the browser (as opposed to jsdom for Jest) and can therefore catch issues such as low contrast. However, it does require you to manually verify each story.</p>\n<h2>Accessibility testing workflow</h2>\n<p>By running these checks throughout the development process, you shorten the feedback loop and fix issues faster. Here‚Äôs what the workflow looks like:</p>\n<ol>\n<li>üë®üèΩ‚Äçüíª <strong>During development:</strong> use Storybook to focus on one component at a time. Use the A11y addon to simulate vision defects and run an accessibility audit at the component level.</li>\n<li>‚úÖ <strong>For QA:</strong> integrate the Axe audit into your functional testing pipeline. Run checks on all components to catch regressions.</li>\n</ol>\n<p><img src=\"/tutorials/ui-testing-handbook/a11y-workflow.png\" alt=\"\"></p>\n<p>Let‚Äôs see this workflow in action.</p>\n<h3>Install the accessibility addon</h3>\n<p>Storybook‚Äôs Accessibility runs Axe on the active story. It visualizes the test results in a panel and outlines all DOM nodes that have a violation.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/a11y-testing.gif\" alt=\"\"></p>\n<p>To install the addon, run: <code>yarn add --dev @storybook/addon-a11y</code>. Then, add <code>'@storybook/addon-a11y'</code> to the addons array in your <code>.storybook/main.js</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  staticDirs: ['../public'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n   '@storybook/addon-a11y',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;`, `59500161883003780000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"59500161883003780000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/main.js</div>\n<pre><code class=\"language-diff\">/** @type { import('@storybook/react-vite').StorybookConfig } */\nconst config = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  staticDirs: ['../public'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n+   '@storybook/addon-a11y',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\nexport default config;\n</code></pre>\n<h3>Testing accessibility as you code</h3>\n<p>We've already <a href=\"/tutorials/ui-testing-handbook/react/en/visual-testing/\">isolated</a> the Task component and captured all its use cases as stories. During the development phase, you can cycle through these stories to spot accessibility issues.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n  },\n};\n\nexport const Default = {\n  args: {\n    task: {\n      id: '1',\n      title: 'Buy milk',\n      state: 'TASK_INBOX',\n    },\n  },\n};\n\nexport const Pinned = {\n  args: {\n    task: {\n      id: '2',\n      title: 'QA dropdown',\n      state: 'TASK_PINNED',\n    },\n  },\n};\n\nexport const Archived = {\n  args: {\n    task: {\n      id: '3',\n      title: 'Write schema for account menu',\n      state: 'TASK_ARCHIVED',\n    },\n  },\n};\n\nconst longTitleString = \\`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!\\`;\n\nexport const LongTitle = {\n  args: {\n    task: {\n      id: '4',\n      title: longTitleString,\n      state: 'TASK_INBOX',\n    },\n  },\n};`, `3754256825253721000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"3754256825253721000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/Task.stories.jsx</div>\n<pre><code class=\"language-javascript\">import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n  },\n};\n\nexport const Default = {\n  args: {\n    task: {\n      id: '1',\n      title: 'Buy milk',\n      state: 'TASK_INBOX',\n    },\n  },\n};\n\nexport const Pinned = {\n  args: {\n    task: {\n      id: '2',\n      title: 'QA dropdown',\n      state: 'TASK_PINNED',\n    },\n  },\n};\n\nexport const Archived = {\n  args: {\n    task: {\n      id: '3',\n      title: 'Write schema for account menu',\n      state: 'TASK_ARCHIVED',\n    },\n  },\n};\n\nconst longTitleString = `This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`;\n\nexport const LongTitle = {\n  args: {\n    task: {\n      id: '4',\n      title: longTitleString,\n      state: 'TASK_INBOX',\n    },\n  },\n};\n</code></pre>\n<p><img src=\"/tutorials/ui-testing-handbook/task-story-a11y-issue.png\" alt=\"\"></p>\n<p>Notice how the addon found two violations. The first, <strong>‚ÄúElements must meet minimum color contrast ratio thresholds,‚Äù</strong> is specific to the <code>archived</code> state. Essentially what it means there isn't enough contrast between the task title and the background. We can quickly fix it by changing the text color to a darker gray in our application's CSS (located in <code>src/index.css</code>).</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`.list-item.TASK_ARCHIVED input[type=&quot;text&quot;] {\n color: #4a5568;\n  text-decoration: line-through;\n}`, `4029901121820045300`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"4029901121820045300\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/index.css</div>\n<pre><code class=\"language-diff\">.list-item.TASK_ARCHIVED input[type=\"text\"] {\n- color: #a0aec0;\n+ color: #4a5568;\n  text-decoration: line-through;\n}\n</code></pre>\n<p>The second violation, <strong>‚ÄúCertain ARIA roles must be contained by particular parents‚Äù</strong> indicates incorrect DOM structure. The Task component renders just a <code>&#x3C;li></code> element. So we need to update our stories to wrap the component in an <code>&#x3C;ul></code> element.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n  },\n};\n\n\n/*\n*üëá Wraps the component with a custom render function.\n* See https://storybook.js.org/docs/react/api/csf\n* to learn how to use render functions.\n*/\nexport const Default = {\n  render: (args) => (\n    <ul>\n      <Task {...args} />\n    </ul>\n  ),\n  args: {\n    task: {\n      id: '1',\n      title: 'Buy milk',\n      state: 'TASK_INBOX',\n    },\n  },\n};\n\nexport const Pinned = {\n  render: (args) => (\n    <ul>\n      <Task {...args} />\n    </ul>\n  ),\n  args: {\n    task: {\n      id: '2',\n      title: 'QA dropdown',\n      state: 'TASK_PINNED',\n    },\n  },\n};\n\nexport const Archived = {\n  render: (args) => (\n    <ul>\n      <Task {...args} />\n    </ul>\n  ),\n  args: {\n    task: {\n      id: '3',\n      title: 'Write schema for account menu',\n      state: 'TASK_ARCHIVED',\n    },\n  },\n};\n\nconst longTitleString = \\`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!\\`;\n\nexport const LongTitle = {\n  render: (args) => (\n    <ul>\n      <Task {...args} />\n    </ul>\n  ),\n  args: {\n    task: {\n      id: '4',\n      title: longTitleString,\n      state: 'TASK_INBOX',\n    },\n  },\n};`, `71131070974864820000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"71131070974864820000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/Task.stories.jsx</div>\n<pre><code class=\"language-js\">import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n  },\n};\n\n\n/*\n*üëá Wraps the component with a custom render function.\n* See https://storybook.js.org/docs/react/api/csf\n* to learn how to use render functions.\n*/\nexport const Default = {\n  render: (args) => (\n    &#x3C;ul>\n      &#x3C;Task {...args} />\n    &#x3C;/ul>\n  ),\n  args: {\n    task: {\n      id: '1',\n      title: 'Buy milk',\n      state: 'TASK_INBOX',\n    },\n  },\n};\n\nexport const Pinned = {\n  render: (args) => (\n    &#x3C;ul>\n      &#x3C;Task {...args} />\n    &#x3C;/ul>\n  ),\n  args: {\n    task: {\n      id: '2',\n      title: 'QA dropdown',\n      state: 'TASK_PINNED',\n    },\n  },\n};\n\nexport const Archived = {\n  render: (args) => (\n    &#x3C;ul>\n      &#x3C;Task {...args} />\n    &#x3C;/ul>\n  ),\n  args: {\n    task: {\n      id: '3',\n      title: 'Write schema for account menu',\n      state: 'TASK_ARCHIVED',\n    },\n  },\n};\n\nconst longTitleString = `This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`;\n\nexport const LongTitle = {\n  render: (args) => (\n    &#x3C;ul>\n      &#x3C;Task {...args} />\n    &#x3C;/ul>\n  ),\n  args: {\n    task: {\n      id: '4',\n      title: longTitleString,\n      state: 'TASK_INBOX',\n    },\n  },\n};\n</code></pre>\n<p>You can now repeat this process for all other components.</p>\n<p>Integrating accessibility testing into Storybook streamlines your development workflow. You don‚Äôt have to jump between different tools while working on a component. Everything you need is right there in the browser. You can even simulate visual impairments such as deuteranomaly, protanomaly or tritanopia.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/inbox-screen-gray-scale.png\" alt=\"\"></p>\n<h3>Catch regressions automatically with the test runner</h3>\n<p>Often, changes to a component can unintentionally introduce new accessibility issues. To catch such regressions, you'll want to test all your stories before opening a pull request. However, the Accessibility addon only runs checks when you‚Äôre viewing a story. To test all stories at once we can use the Storybook test runner. It‚Äôs a standalone utility (powered by <a href=\"https://jestjs.io/\">Jest</a> and <a href=\"https://playwright.dev/\">Playwright</a>) that checks for rendering errors in stories.</p>\n<p>Let‚Äôs go ahead and configure the test runner to run Axe. We‚Äôll start by installing <a href=\"https://github.com/abhinaba-ghosh/axe-playwright\">axe-playwright</a>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn add --dev axe-playwright`, `7763310502719656000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"7763310502719656000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn add --dev axe-playwright\n</code></pre>\n<p>Add a new configuration file inside your Storybook directory with the following inside:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`const { injectAxe, checkA11y } = require('axe-playwright');\n\nmodule.exports = {\n  async preRender(page) {\n    await injectAxe(page);\n  },\n  async postRender(page) {\n    await checkA11y(page, &quot;#storybook-root&quot;, {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n`, `20251984434381120000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20251984434381120000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/test-runner.js</div>\n<pre><code class=\"language-javascript\">const { injectAxe, checkA11y } = require('axe-playwright');\n\nmodule.exports = {\n  async preRender(page) {\n    await injectAxe(page);\n  },\n  async postRender(page) {\n    await checkA11y(page, \"#storybook-root\", {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n\n</code></pre>\n<p><code>preRender</code> and <code>postRender</code> are convenient hooks that allow you to configure the test runner to perform additional tasks. We're using those hooks to inject Axe into a story, and then once it renders, run the accessibility test.</p>\n<p>You‚Äôll notice a few options passed into the <code>checkA11y</code> function. We‚Äôve set up Axe to start at the story's root element and then traverse down the DOM tree to check for issues. It will also generate a detailed report based on the issues it encountered and output a list of HTML elements that violated accessibility rules.</p>\n<p>To run the tests, start your Storybook in one terminal window with <code>yarn storybook</code> and the test runner in another with <code>yarn test-storybook</code>.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/test-runner-ally.png\" alt=\"\"></p>\n<h2>Catching integration issues</h2>\n<p>UIs are assembled by composing components and wiring them up to data and APIs. That's a lot of potential points of failure. Next up, we'll look at using Cypress to catch integration issues by testing all layers of your system in one go.</p>","frontmatter":{"title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling","commit":"ef3fa29"},"fields":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/accessibility-testing/","chapter":"accessibility-testing","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/ui-testing-handbook/react/en/accessibility-testing/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/ui-testing-guide-code","toc":["introduction","visual-testing","composition-testing","interaction-testing","accessibility-testing","user-flow-testing","automate","workflow","conclusion"],"title":"UI Testing Handbook","twitterShareText":"I'm learning how to test UIs! This will help me ship UIs without worrying about stowaway bugs."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn‚Äôt slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn‚Äôt slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Ï†ëÍ∑ºÏÑ±","title":"Ïä§ÌÜ†Î¶¨Î∂Å(Storybook)ÏùÑ ÌÜµÌïú Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏","description":"ÌÜµÌï©Ï†ÅÏù∏ Ìà¥ ÏÇ¨Ïö©(integrated tooling)ÏúºÎ°ú Îπ†Î•∏ ÌîºÎìúÎ∞± Ï†úÍ≥µ"},"fields":{"slug":"/ui-testing-handbook/react/ko/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûêÎèôÌôî(Automate)","title":"ÍπÉÌóàÎ∏å(Github) Ïï°ÏÖòÏúºÎ°ú UI ÌÖåÏä§Ìä∏ ÏûêÎèôÌôîÌïòÍ∏∞","description":"ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)ÏùÑ Îçî Îπ†Î•¥Í≤å ÎßåÎì§Í≥†, Îçî Í≥†ÌíàÏßàÏùò ÏΩîÎìúÎ•º Ï†ÑÎã¨ÌïòÍ∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Íµ¨ÏÑ±","title":"Íµ¨ÏÑ± ÌÖåÏä§Ìä∏","description":"ÏÇ¨ÏÜåÌïú Î≥ÄÍ≤ΩÏù¥ Ïª§Îã§ÎûÄ ÌöåÍ∑ÄÎ°ú Î≥ÄÌïòÎäî Í≤ÉÏùÑ Î∞©ÏßÄÌïòÍ∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/composition-testing/","framework":"react","chapter":"composition-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"Ï†ÅÍ≤å ÏÜêÎåÄÍ≥† Îçî ÎßéÏùÄ Í≤å Ìï¥Í≤∞ÎêòÎèÑÎ°ù ÌïòÏûê"},"fields":{"slug":"/ui-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÉÅÌò∏ÏûëÏö©","title":"Ïª¥Ìè¨ÎÑåÌä∏ ÏÉÅÌò∏ÏûëÏö© ÌÖåÏä§Ìä∏ÌïòÍ∏∞","description":"ÏÇ¨Ïö©ÏûêÏùò ÎèôÏûëÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌïòÍ≥† Í∏∞Îä•Î≥Ñ Í≤ÄÏÇ¨Î•º Ïã§ÌñâÌïòÎäî Î∞©Î≤ï ÏïåÏïÑÎ≥¥Í∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"UI ÌÖåÏä§Ìä∏ ÏÜåÍ∞ú","description":"UI ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú ÏµúÏã† Í∞úÎ∞ú Î∞©Î≤ï"},"fields":{"slug":"/ui-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞(User flow)","title":"ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞(user flow) ÌÖåÏä§Ìä∏ÌïòÍ∏∞","description":"UIÍ∞Ä Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî"},"fields":{"slug":"/ui-testing-handbook/react/ko/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏãúÍ∞ÅÏ†Å ÏöîÏÜå ÌÖåÏä§Ìä∏","title":"Ïä§ÌÜ†Î¶¨Î∂Å(Storybook)Ïùò ÏãúÍ∞ÅÏ†Å ÏöîÏÜå ÌÖåÏä§Ìä∏","description":"UI Î≤ÑÍ∑∏Î•º ÏûêÎèôÏúºÎ°ú Ï∞æÏïÑÎÇ¥Îäî Î∞©Î≤ï ÏïåÏïÑÎ≥¥Í∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/visual-testing/","framework":"react","chapter":"visual-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûëÏóÖ ÌùêÎ¶Ñ(Workflow)","title":"UI ÌÖåÏä§ÌåÖ ÌîåÎ†àÏù¥Î∂Å","description":"Ïö∞Î¶¨Î•º ÎäêÎ¶¨Í≤å ÌïòÏßÄ ÏïäÎäî ÌÖåÏä§ÌåÖ ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)"},"fields":{"slug":"/ui-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing","language":"en"}}}]}},"pageContext":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","language":"en","chapter":"accessibility-testing","pageType":"chapter"}},"staticQueryHashes":["238248339"]}