{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/ui-testing-handbook/react/en/workflow/","result":{"data":{"currentPage":{"html":"<p>It's easy to find tools that test different parts of the UI. But knowing how to combine them into a productive workflow is tricky. If you get it wrong, it spirals into a maintenance nightmare.</p>\n<p>Our workflow reduces the maintenance burden by reusing stories as test cases. Plus, we can spot bugs faster by testing at the component level.</p>\n<p>This chapter demonstrates the entire UI testing workflow by adding in the ability to delete a task.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/workflow-ui-testing.png\" alt=\"\"></p>\n<h2>Build</h2>\n<p>The Task component already allows users to edit, pin and archive a task. We'll add a delete button and wire that up to the application state to add the delete functionality.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/add-delete-button.png\" alt=\"\"></p>\n<p>For this demo, let's jump straight to the point where you're ready to test. Download the updated files and place them in the <code>/src</code> directory:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/ui-testing-guide-code/910607eb1d6c9a593c9577ad6eb0e074a9b762d8/src/components/Task.jsx\">src/components/Task.jsx</a></li>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/ui-testing-guide-code/910607eb1d6c9a593c9577ad6eb0e074a9b762d8/src/components/TaskList.jsx\">src/components/TaskList.jsx</a></li>\n<li><a href=\"https://raw.githubusercontent.com/chromaui/ui-testing-guide-code/910607eb1d6c9a593c9577ad6eb0e074a9b762d8/src/InboxScreen.jsx\">src/InboxScreen.jsx</a></li>\n</ul>\n<h3>Visual &#x26; Composition tests</h3>\n<p>First, we're going to ensure that the updated UI styles match the spec. The Task component now requires the <code>onDeleteTask</code> prop to handle deletions. Let's mock that out as an action in the Task stories.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n   onDeleteTask: { action: 'onDeleteTask' },\n  },\n};`, `20287449321181670000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"20287449321181670000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/Task.stories.jsx</div>\n<pre><code class=\"language-diff\">import Task from './Task';\n\nexport default {\n  component: Task,\n  title: 'Task',\n  argTypes: {\n    onArchiveTask: { action: 'onArchiveTask' },\n    onTogglePinTask: { action: 'onTogglePinTask' },\n    onEditTitle: { action: 'onEditTitle' },\n+   onDeleteTask: { action: 'onDeleteTask' },\n  },\n};\n</code></pre>\n<h4>During development</h4>\n<p>Instead of booting up the entire application, you can use Storybook to focus on just the Task component. Then cycle through all its stories to manually verify their appearance.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/task-story-workflow-initial-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4>PR check</h4>\n<p>Tweaks to the Task UI can lead to unintended changes in other components where it's used: TaskList and InboxScreen. Running visual tests with Chromatic will catch those. It'll also ensure that everything is still wired up correctly.</p>\n<p>Chromatic will be triggered automatically when you create a pull request. On completion, you'll be presented with a diff to review. In this case, the changes are intentional. Press the accept button to update the baselines.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/workflow-visual-tests.png\" alt=\"\"></p>\n<p><img src=\"/tutorials/ui-testing-handbook/workflow-visual-diff.png\" alt=\"\"></p>\n<h3>Accessibility tests</h3>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/task-story-workflow-a11y.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4>During development</h4>\n<p>Run accessibility checks inside Storybook during development. The <a href=\"https://storybook.js.org/addons/@storybook/addon-a11y\">A11y addon</a> uses Axe to audit the active story and displays the report in the addon panel. A quick glance confirms that none of our stories have any violations.</p>\n<h4>PR check</h4>\n<p>To catch regressions you need to run on all your components. You can do that by importing stories into a test file and then running an accessibility audit using <a href=\"https://github.com/twilio-labs/paste/blob/cd0ddad508e41cb9982a693a5160f1b7866f4e2a/packages/paste-core/components/checkbox/__tests__/checkboxdisclaimer.test.tsx#L40\">jest-axe</a>. All violations will be reported back to the PR page.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/ci-a11y.png\" alt=\"\"></p>\n<h3>Interaction tests</h3>\n<p>The user can delete a task by clicking on the <em>trash can</em> button, we’ll need to add in a test to verify that behaviour.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/inbox-screen-story-workflow-delete-task-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h4>During development</h4>\n<p>During development, manually verify the interaction using the InboxScreen stories. If it’s working as expected, you can add in an interaction test using a play function.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`// ... code omitted for brevity ...\n\nexport const DeleteTask = {\n  parameters: {\n    ...Default.parameters,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const getTask = (id) => canvas.findByRole('listitem', { name: id });\n\n    const itemToDelete = await getTask('task-1');\n    const deleteButton = await findByRole(itemToDelete, 'button', {\n      name: 'delete',\n    });\n\n    // Click the pin button\n    await userEvent.click(deleteButton);\n    await expect(canvas.getAllByRole('listitem').length).toBe(5);\n  },\n};`, `87677712319420830000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"87677712319420830000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/InboxScreen.stories.jsx</div>\n<pre><code class=\"language-javascript\">// ... code omitted for brevity ...\n\nexport const DeleteTask = {\n  parameters: {\n    ...Default.parameters,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const getTask = (id) => canvas.findByRole('listitem', { name: id });\n\n    const itemToDelete = await getTask('task-1');\n    const deleteButton = await findByRole(itemToDelete, 'button', {\n      name: 'delete',\n    });\n\n    // Click the pin button\n    await userEvent.click(deleteButton);\n    await expect(canvas.getAllByRole('listitem').length).toBe(5);\n  },\n};\n</code></pre>\n<p>Run <code>yarn run test-storybook</code> to confirm that all tests are passing. Notice how Jest runs in watch mode and only executes tests related to files that changed.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/test-runner-delete.png\" alt=\"\"></p>\n<h4>PR check</h4>\n<p>Github Actions will run the test runner when the pull request is created and report status via PR checks.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/test-runner-ci.png\" alt=\"\"></p>\n<h2>User flow tests</h2>\n<p>Lastly, you'll need to run E2E tests to ensure that all your critical user flows are working as expected.</p>\n<h4>During development</h4>\n<p>This new functionality doesn't impact the auth flow. Therefore, you can wait to run Cypress on the CI server. You only need to run targeted E2E tests during development if you add or update a test.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/auth-flow.png\" alt=\"\"></p>\n<h4>PR check</h4>\n<p>Just like all your other tests, Github actions will also run E2E tests using Cypress.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/user-flow-ci.png\" alt=\"\"></p>\n<h2>Your journey begins</h2>\n<p><strong>UI Testing handbook</strong> highlights testing strategies used by professional front-end teams. These tests act as health checks for your app, verify everything from visual appearance to UI logic, and even detect integration issues. What's more, you can reduce bugs by using continuous integration to test each commit automatically.</p>\n<p>The final chapter concludes with the complete sample code, helpful resources, and frequently asked questions from developers.</p>","frontmatter":{"title":"UI Testing Playbook","description":"A testing workflow that doesn’t slow you down","commit":"910607e"},"fields":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/workflow/","chapter":"workflow","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/ui-testing-handbook/react/en/workflow/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/ui-testing-guide-code","toc":["introduction","visual-testing","composition-testing","interaction-testing","accessibility-testing","user-flow-testing","automate","workflow","conclusion"],"title":"UI Testing Handbook","twitterShareText":"I'm learning how to test UIs! This will help me ship UIs without worrying about stowaway bugs."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn’t slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn’t slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"접근성","title":"스토리북(Storybook)을 통한 접근성 테스트","description":"통합적인 툴 사용(integrated tooling)으로 빠른 피드백 제공"},"fields":{"slug":"/ui-testing-handbook/react/ko/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"자동화(Automate)","title":"깃허브(Github) 액션으로 UI 테스트 자동화하기","description":"작업 흐름(workflow)을 더 빠르게 만들고, 더 고품질의 코드를 전달하기"},"fields":{"slug":"/ui-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"구성","title":"구성 테스트","description":"사소한 변경이 커다란 회귀로 변하는 것을 방지하기"},"fields":{"slug":"/ui-testing-handbook/react/ko/composition-testing/","framework":"react","chapter":"composition-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"마무리","title":"마무리","description":"적게 손대고 더 많은 게 해결되도록 하자"},"fields":{"slug":"/ui-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"상호작용","title":"컴포넌트 상호작용 테스트하기","description":"사용자의 동작을 시뮬레이션하고 기능별 검사를 실행하는 방법 알아보기"},"fields":{"slug":"/ui-testing-handbook/react/ko/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"소개","title":"UI 테스트 소개","description":"UI 테스트를 위한 최신 개발 방법"},"fields":{"slug":"/ui-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"사용자 플로우(User flow)","title":"사용자 플로우(user flow) 테스트하기","description":"UI가 전체적으로 작동하는지 확인해보세요"},"fields":{"slug":"/ui-testing-handbook/react/ko/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"시각적 요소 테스트","title":"스토리북(Storybook)의 시각적 요소 테스트","description":"UI 버그를 자동으로 찾아내는 방법 알아보기"},"fields":{"slug":"/ui-testing-handbook/react/ko/visual-testing/","framework":"react","chapter":"visual-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"작업 흐름(Workflow)","title":"UI 테스팅 플레이북","description":"우리를 느리게 하지 않는 테스팅 작업 흐름(workflow)"},"fields":{"slug":"/ui-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing","language":"en"}}}]}},"pageContext":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","language":"en","chapter":"workflow","pageType":"chapter"}},"staticQueryHashes":["238248339"]}