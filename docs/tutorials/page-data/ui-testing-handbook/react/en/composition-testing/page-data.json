{"componentChunkName":"component---src-components-screens-chapter-screen-index-js","path":"/ui-testing-handbook/react/en/composition-testing/","result":{"data":{"currentPage":{"html":"<p>In Jan 2021, <a href=\"https://www.theverge.com/2021/1/13/22229854/tesla-recall-model-s-x-touchscreens-bricked-failure-nhtsa\">Tesla recalled 158,000 cars</a> because one module‚Äîthe display‚Äîmalfunctioned. With a broken display console, you can‚Äôt access the backup camera, turn signals, or driver assistance. That significantly increases the risk of a crash.</p>\n<blockquote>\n<p>One defective module escalated into a major failure.</p>\n</blockquote>\n<p>UIs suffer from a similar challenge because apps, much like cars, are an interconnected network of parts. A bug in one component affects all others around it. Not to mention every part of the app where it‚Äôs used. Testing how UI components are composed helps you to prevent such bugs.</p>\n<p>Testing the more complex parts of the UI is tricky. They are created by combining many simpler components and are also wired up to the application state. In this chapter, we'll look at how to isolate and apply visual testing to composite components. Along the way, you'll learn about mocking data and simulating application logic. And ways to test component integration.</p>\n<h2>Small bugs end up breaking apps</h2>\n<p>Applications are built by plugging components into each other. This means a bug in one element can impact its neighbours. For example, renaming a prop can disrupt data flow from parent to child components. Or incorrect CSS in a UI element often leads to broken layouts.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/minor-major-regressions-1.gif\" alt=\"minor tweaks cause major regressions\"></p>\n<p>Consider the Button component from <a href=\"https://5ccbc373887ca40020446347-oghpnhotjv.chromatic.com/?path=/docs/button--basic\">Storybook‚Äôs design system</a>. It is used countless times across multiple pages. A bug in <code>Button</code> will inadvertently lead to bugs in all those pages. In other words, one failure can compound exponentially. As you move up the component hierarchy towards the level of pages, the impact of these bugs increases. Therefore, we need a way to catch such cascading issues early and figure out the root cause.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/design-system-inconsistent-buttons.jpg\" alt=\"The same button component is being used across multiple pages of an app\"></p>\n<h2>Composition testing</h2>\n<p>Visual tests catch bugs by capturing and comparing image snapshots of stories‚Äîin a real browser. Which makes them ideal for spotting UI changes and identifying the root cause. Here‚Äôs a quick reminder of the process:</p>\n<ol>\n<li>üè∑ <strong>Isolate</strong> components. Use Storybook to test one component at a time.</li>\n<li>‚úçüèΩ Write out the <strong>test cases</strong>. Each component state is reproduced using props.</li>\n<li>üîç <strong>Manually verify</strong> the appearance of each test case.</li>\n<li>üì∏ Catch <strong>bugs</strong> automatically using visual regression tests.</li>\n</ol>\n<p>Composition testing is all about running visual tests on ‚Äúcomposite‚Äù components higher up in the tree that are made up of several simpler components. That way you can quantify the impact that any change might have on the entire application. And ensure that the system works as a whole.</p>\n<p>The key difference is that composite components track application state and pass behaviors down the tree. You‚Äôll have to account for those when writing the test cases.</p>\n<p>Let‚Äôs see this process in action by writing tests for the <code>TaskList</code> component, which displays the complete list of tasks belonging to the user.</p>\n<p>It moves pinned tasks to the top of the list. And has a loading and empty state. We‚Äôll start by writing stories for all these scenarios.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/task-list.png\" alt=\"Task list has four states: Default, Empty, Loading and Pinned\"></p>\n<p>Create a story file, registering the <code>TaskList</code> component and add in a story for the default case.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import TaskList from './TaskList';\n\nimport * as TaskStories from './Task.stories';\n\nexport default {\n  component: TaskList,\n  title: 'TaskList',\n  argTypes: {\n    ...TaskStories.argTypes,\n  },\n};\n\nexport const Default = {\n  args: {\n    tasks: [\n      { id: '1', state: 'TASK_INBOX', title: 'Build a date picker' },\n      { id: '2', state: 'TASK_INBOX', title: 'QA dropdown' },\n      {\n        id: '3',\n        state: 'TASK_INBOX',\n        title: 'Write a schema for account avatar component',\n      },\n      { id: '4', state: 'TASK_INBOX', title: 'Export logo' },\n      { id: '5', state: 'TASK_INBOX', title: 'Fix bug in input error state' },\n      {\n        id: '6',\n        state: 'TASK_INBOX',\n        title: 'Draft monthly blog to customers',\n      },\n    ],\n  },\n};`, `83111318905234110000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"83111318905234110000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/TaskList.stories.jsx</div>\n<pre><code class=\"language-javascript\">import TaskList from './TaskList';\n\nimport * as TaskStories from './Task.stories';\n\nexport default {\n  component: TaskList,\n  title: 'TaskList',\n  argTypes: {\n    ...TaskStories.argTypes,\n  },\n};\n\nexport const Default = {\n  args: {\n    tasks: [\n      { id: '1', state: 'TASK_INBOX', title: 'Build a date picker' },\n      { id: '2', state: 'TASK_INBOX', title: 'QA dropdown' },\n      {\n        id: '3',\n        state: 'TASK_INBOX',\n        title: 'Write a schema for account avatar component',\n      },\n      { id: '4', state: 'TASK_INBOX', title: 'Export logo' },\n      { id: '5', state: 'TASK_INBOX', title: 'Fix bug in input error state' },\n      {\n        id: '6',\n        state: 'TASK_INBOX',\n        title: 'Draft monthly blog to customers',\n      },\n    ],\n  },\n};\n</code></pre>\n<p>Notice the <code>argTypes</code>. <a href=\"https://storybook.js.org/docs/react/writing-stories/args\">Args</a> are Storybook's mechanism for defining inputs to a story. Think of them as framework-agnostic props. Args defined at the component level are automatically passed down to each story. In our case, we have defined three event handlers using the <a href=\"https://storybook.js.org/docs/react/essentials/actions\">Actions addon</a>.</p>\n<p>These simulated actions will show up in the addons panel as you interact with <code>TaskList</code>. Allowing you to verify that the components are wired correctly.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/tasklist-actions-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<h3>Composing args</h3>\n<p>The same way you combine components to create new UIs, you can combine args to create new stories. It‚Äôs typical that the args of a composite component will even combine args from its sub-components.</p>\n<p>The event handler args are already defined in the Task stories file, which we can reuse. Similarly, we can also use args from the default story to create the pinned tasks story.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import TaskList from './TaskList';\n\nimport * as TaskStories from './Task.stories';\n\nexport default {\n  component: TaskList,\n  title: 'TaskList',\n  argTypes: {\n    ...TaskStories.argTypes,\n  },\n};\n\nexport const Default = {\n  args: {\n    tasks: [\n      { id: '1', state: 'TASK_INBOX', title: 'Build a date picker' },\n      { id: '2', state: 'TASK_INBOX', title: 'QA dropdown' },\n      {\n        id: '3',\n        state: 'TASK_INBOX',\n        title: 'Write a schema for account avatar component',\n      },\n      { id: '4', state: 'TASK_INBOX', title: 'Export logo' },\n      { id: '5', state: 'TASK_INBOX', title: 'Fix bug in input error state' },\n      {\n        id: '6',\n        state: 'TASK_INBOX',\n        title: 'Draft monthly blog to customers',\n      },\n    ],\n  },\n};\n\nexport const WithPinnedTasks = {\n  args: {\n    tasks: [\n      {\n        id: '6',\n        title: 'Draft monthly blog to customers',\n        state: 'TASK_PINNED',\n      },\n      ...Default.args.tasks.slice(0, 5),\n    ],\n  },\n};\nexport const Loading = {\n  args: {\n    tasks: [],\n    loading: true,\n  },\n};\nexport const Empty = {\n  args: {\n    ...Loading.args,\n    loading: false,\n  },\n};`, `87791712685226850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"87791712685226850000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/components/TaskList.stories.jsx</div>\n<pre><code class=\"language-javascript\">import TaskList from './TaskList';\n\nimport * as TaskStories from './Task.stories';\n\nexport default {\n  component: TaskList,\n  title: 'TaskList',\n  argTypes: {\n    ...TaskStories.argTypes,\n  },\n};\n\nexport const Default = {\n  args: {\n    tasks: [\n      { id: '1', state: 'TASK_INBOX', title: 'Build a date picker' },\n      { id: '2', state: 'TASK_INBOX', title: 'QA dropdown' },\n      {\n        id: '3',\n        state: 'TASK_INBOX',\n        title: 'Write a schema for account avatar component',\n      },\n      { id: '4', state: 'TASK_INBOX', title: 'Export logo' },\n      { id: '5', state: 'TASK_INBOX', title: 'Fix bug in input error state' },\n      {\n        id: '6',\n        state: 'TASK_INBOX',\n        title: 'Draft monthly blog to customers',\n      },\n    ],\n  },\n};\n\nexport const WithPinnedTasks = {\n  args: {\n    tasks: [\n      {\n        id: '6',\n        title: 'Draft monthly blog to customers',\n        state: 'TASK_PINNED',\n      },\n      ...Default.args.tasks.slice(0, 5),\n    ],\n  },\n};\nexport const Loading = {\n  args: {\n    tasks: [],\n    loading: true,\n  },\n};\nexport const Empty = {\n  args: {\n    ...Loading.args,\n    loading: false,\n  },\n};\n</code></pre>\n<p>Shaping stories through args composition is a powerful technique. It allows us to write stories without repeating the same data over and over again. And more importantly, it tests component integration. If you rename one of the <code>Task</code> component props, that'll lead to failed test cases for <code>TaskList</code>.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/tasklist-stories-finished-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>So far, we‚Äôve only dealt with components that accept data and callbacks via props. Things get trickier when your component is wired up to an API or has internal state. Next, we'll look at how to isolate and test such connected components.</p>\n<h3>Stateful composite components</h3>\n<p>The <code>InboxScreen</code> uses a <a href=\"https://github.com/chromaui/ui-testing-handbook-react-template/blob/master/src/useTasks.js\">custom hook</a> to fetch data from the Taskbox API and to manage application state. Much like unit tests, we want to detach components from the real backend and test the features in isolation.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/taskbox.png\" alt=\"\"></p>\n<p>That‚Äôs where Storybook addons come in. They allow you to mock API requests, state, context, providers and anything else that your component relies on. Teams at <a href=\"https://5dfcbf3012392c0020e7140b-borimwnbdl.chromatic.com/?path=/story/layouts-showcase--article-story\">The Guardian</a> and <a href=\"https://www.sidewalklabs.com/\">Sidewalk Labs</a> (Google) use them to build entire pages in isolation.</p>\n<p>For the InboxScreen, we are going to use <a href=\"https://storybook.js.org/addons/msw-storybook-addon/\">Mock Service Worker (MSW) addon</a> to intercept requests at the network level and return mocked responses.</p>\n<p>This is already provided in the template transferred in the <a href=\"/tutorials/ui-testing-handbook/react/en/introduction/\">introduction chapter</a>. We'll need to set it up. Let's see how.</p>\n<p>Run the following command to generate a new service worker in your <code>public</code> folder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`yarn init-msw`, `83586786758597480000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"83586786758597480000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">yarn init-msw\n</code></pre>\n<div class=\"aside\">\n<p>üí° Public directory may differ depending on the project. For custom configurations, we recommend reading MSW's <a href=\"https://mswjs.io/docs/getting-started/integrate/browser#where-is-my-public-directory\">documentation</a> to learn more about them. To see the changes reflected in Storybook, you'll need to update the <a href=\"https://storybook.js.org/docs/react/configure/overview#using-storybook-api\"><code>staticDirs</code></a> configuration element in <code>.storybook/main.js</code>.</p>\n</div>\n<p>Enable the MSW addon in your <code>.storybook/preview.js</code> file:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import '../src/index.css';\n\n import { initialize, mswDecorator } from 'msw-storybook-addon';\n\n // Initialize MSW\n initialize();\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n decorators: [mswDecorator],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)\\$/i,\n        date: /Date\\$/,\n      },\n    },\n  },\n};\n\nexport default preview;`, `17952908235342680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"17952908235342680000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">.storybook/preview.js</div>\n<pre><code class=\"language-diff\">import '../src/index.css';\n\n+ import { initialize, mswDecorator } from 'msw-storybook-addon';\n\n+ // Initialize MSW\n+ initialize();\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n+ decorators: [mswDecorator],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n</code></pre>\n<p>Lastly, restart the <code>yarn storybook</code> command. And we‚Äôre all set to mock API requests in stories.</p>\n<p><code>InboxScreen</code> calls the <code>useTasks</code> hook which in-turn fetches data from the <code>/tasks</code> endpoint. We can specify the mock responses using the <code>msw</code> parameter. Notice how you can return different responses for each story.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`import { rest } from 'msw';\n\nimport InboxScreen from './InboxScreen';\n\nimport { Default as TaskListDefault } from './components/TaskList.stories';\n\nexport default {\n  component: InboxScreen,\n  title: 'InboxScreen',\n};\n\nexport const Default = {\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/tasks', (req, res, ctx) => {\n          return res(ctx.json(TaskListDefault.args));\n        }),\n      ],\n    },\n  },\n};\n\nexport const Error = {\n  args: {\n    error: 'Something',\n  },\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/tasks', (req, res, ctx) => {\n          return res(ctx.json([]));\n        }),\n      ],\n    },\n  },\n};`, `75692048379829320000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"75692048379829320000\"\n              >\n                Copy \n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/InboxScreen.stories.jsx</div>\n<pre><code class=\"language-javascript\">import { rest } from 'msw';\n\nimport InboxScreen from './InboxScreen';\n\nimport { Default as TaskListDefault } from './components/TaskList.stories';\n\nexport default {\n  component: InboxScreen,\n  title: 'InboxScreen',\n};\n\nexport const Default = {\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/tasks', (req, res, ctx) => {\n          return res(ctx.json(TaskListDefault.args));\n        }),\n      ],\n    },\n  },\n};\n\nexport const Error = {\n  args: {\n    error: 'Something',\n  },\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/tasks', (req, res, ctx) => {\n          return res(ctx.json([]));\n        }),\n      ],\n    },\n  },\n};\n</code></pre>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/inbox-screen-with-mock-7-0.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>State has many different forms. Some applications track bits of state globally using libraries such as Redux and MobX. Or by making GraphQL queries. Or they might use container components. Storybook is flexible enough to support all these scenarios. For more on this, see: <a href=\"https://storybook.js.org/blog/storybook-addons-to-manage-data-state/\">Storybook addons to manage data &#x26; state</a>.</p>\n<p>Building components in isolation curtails the complexity of development. You don't have to spin up the back-end, log in as a user, and click around the UI just to debug some CSS. You can set it all up as a story and get going. And you can even run automated regression tests on those stories.</p>\n<h3>Catch regressions</h3>\n<p>In the <a href=\"/tutorials/ui-testing-handbook/react/en/visual-testing/\">previous chapter</a>, we set up Chromatic and went over the basic workflow. Now that we have stories for all our composite components, we can execute the visual tests by running:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              onClick=\"copyToClipboard(`npx chromatic --project-token=<project-token>`, `99462939173175100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-toaster-id=\"99462939173175100000\"\n              >\n                Copy \n              </div>\n            </div>\n<pre><code class=\"language-shell\">npx chromatic --project-token=&#x3C;project-token>\n</code></pre>\n<p>You should be presented with a diff that includes stories for TaskList and the InboxScreen.</p>\n<p><img src=\"/tutorials/ui-testing-handbook/ui-testing-chromatic-changes.png\" alt=\"\"></p>\n<p>Now try changing something in the Task component, something like font size or background color. Then make a commit and rerun Chromatic.</p>\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"/tutorials/ui-testing-handbook/chromatic-inboxscreen-visual-changes.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n<p>The tree-like nature of applications means that any tweak to the Task component will also be caught by tests for higher level components. Composition testing allows you to understand the potential impact of every small changes.</p>\n<h2>Verifying component functionality</h2>\n<p>Next up, we'll go beyond appearance and into testing interactions. When the user checks off a task, how do you ensure that the suitable event was fired and that state updated correctly?</p>","frontmatter":{"title":"Testing composite components","description":"Prevent minor changes from turning into major regressions","commit":"c8e7bdd"},"fields":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/composition-testing/","chapter":"composition-testing","framework":"react","language":"en","permalink":"https://storybook.js.org/tutorials/ui-testing-handbook/react/en/composition-testing/","tutorialUpToDate":true}},"currentGuide":{"frontmatter":{"codeGithubUrl":"https://github.com/chromaui/ui-testing-guide-code","toc":["introduction","visual-testing","composition-testing","interaction-testing","accessibility-testing","user-flow-testing","automate","workflow","conclusion"],"title":"UI Testing Handbook","twitterShareText":"I'm learning how to test UIs! This will help me ship UIs without worrying about stowaway bugs."}},"site":{"siteMetadata":{"title":"Storybook Tutorials","githubUrl":"https://github.com/chromaui/learnstorybook.com","contributeUrl":"https://github.com/chromaui/learnstorybook.com/#contribute","permalink":"https://storybook.js.org/tutorials","siteUrl":"https://storybook.js.org"}},"tocPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn‚Äôt slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing"}}}]},"translationPages":{"edges":[{"node":{"frontmatter":{"tocTitle":"Accessibility","title":"Accessibility testing with Storybook","description":"Fast feedback with integrated tooling"},"fields":{"slug":"/ui-testing-handbook/react/en/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Automate","title":"How to automate UI tests with Github Actions","description":"Speed up your workflow and ship higher quality of code"},"fields":{"slug":"/ui-testing-handbook/react/en/automate/","framework":"react","chapter":"automate","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Conclusion","title":"Conclusion","description":"Get more done by doing less"},"fields":{"slug":"/ui-testing-handbook/react/en/conclusion/","framework":"react","chapter":"conclusion","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Interaction","title":"Testing component interactions","description":"Learn how to simulate user behaviour and run functional checks"},"fields":{"slug":"/ui-testing-handbook/react/en/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Introduction","title":"Introduction to testing UIs","description":"Latest production-ready techniques for testing UIs"},"fields":{"slug":"/ui-testing-handbook/react/en/introduction/","framework":"react","chapter":"introduction","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"User flow","title":"Testing user flows","description":"Verify that your UI works end-to-end"},"fields":{"slug":"/ui-testing-handbook/react/en/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Visual","title":"Visual testing in Storybook","description":"Learn how to pinpoint UI bugs automatically"},"fields":{"slug":"/ui-testing-handbook/react/en/visual-testing/","framework":"react","chapter":"visual-testing","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Workflow","title":"UI Testing Playbook","description":"A testing workflow that doesn‚Äôt slow you down"},"fields":{"slug":"/ui-testing-handbook/react/en/workflow/","framework":"react","chapter":"workflow","language":"en"}}},{"node":{"frontmatter":{"tocTitle":"Ï†ëÍ∑ºÏÑ±","title":"Ïä§ÌÜ†Î¶¨Î∂Å(Storybook)ÏùÑ ÌÜµÌïú Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏","description":"ÌÜµÌï©Ï†ÅÏù∏ Ìà¥ ÏÇ¨Ïö©(integrated tooling)ÏúºÎ°ú Îπ†Î•∏ ÌîºÎìúÎ∞± Ï†úÍ≥µ"},"fields":{"slug":"/ui-testing-handbook/react/ko/accessibility-testing/","framework":"react","chapter":"accessibility-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûêÎèôÌôî(Automate)","title":"ÍπÉÌóàÎ∏å(Github) Ïï°ÏÖòÏúºÎ°ú UI ÌÖåÏä§Ìä∏ ÏûêÎèôÌôîÌïòÍ∏∞","description":"ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)ÏùÑ Îçî Îπ†Î•¥Í≤å ÎßåÎì§Í≥†, Îçî Í≥†ÌíàÏßàÏùò ÏΩîÎìúÎ•º Ï†ÑÎã¨ÌïòÍ∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/automate/","framework":"react","chapter":"automate","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Íµ¨ÏÑ±","title":"Íµ¨ÏÑ± ÌÖåÏä§Ìä∏","description":"ÏÇ¨ÏÜåÌïú Î≥ÄÍ≤ΩÏù¥ Ïª§Îã§ÎûÄ ÌöåÍ∑ÄÎ°ú Î≥ÄÌïòÎäî Í≤ÉÏùÑ Î∞©ÏßÄÌïòÍ∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/composition-testing/","framework":"react","chapter":"composition-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÎßàÎ¨¥Î¶¨","title":"ÎßàÎ¨¥Î¶¨","description":"Ï†ÅÍ≤å ÏÜêÎåÄÍ≥† Îçî ÎßéÏùÄ Í≤å Ìï¥Í≤∞ÎêòÎèÑÎ°ù ÌïòÏûê"},"fields":{"slug":"/ui-testing-handbook/react/ko/conclusion/","framework":"react","chapter":"conclusion","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÉÅÌò∏ÏûëÏö©","title":"Ïª¥Ìè¨ÎÑåÌä∏ ÏÉÅÌò∏ÏûëÏö© ÌÖåÏä§Ìä∏ÌïòÍ∏∞","description":"ÏÇ¨Ïö©ÏûêÏùò ÎèôÏûëÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌïòÍ≥† Í∏∞Îä•Î≥Ñ Í≤ÄÏÇ¨Î•º Ïã§ÌñâÌïòÎäî Î∞©Î≤ï ÏïåÏïÑÎ≥¥Í∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/interaction-testing/","framework":"react","chapter":"interaction-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÜåÍ∞ú","title":"UI ÌÖåÏä§Ìä∏ ÏÜåÍ∞ú","description":"UI ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú ÏµúÏã† Í∞úÎ∞ú Î∞©Î≤ï"},"fields":{"slug":"/ui-testing-handbook/react/ko/introduction/","framework":"react","chapter":"introduction","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞(User flow)","title":"ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞(user flow) ÌÖåÏä§Ìä∏ÌïòÍ∏∞","description":"UIÍ∞Ä Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî"},"fields":{"slug":"/ui-testing-handbook/react/ko/user-flow-testing/","framework":"react","chapter":"user-flow-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏãúÍ∞ÅÏ†Å ÏöîÏÜå ÌÖåÏä§Ìä∏","title":"Ïä§ÌÜ†Î¶¨Î∂Å(Storybook)Ïùò ÏãúÍ∞ÅÏ†Å ÏöîÏÜå ÌÖåÏä§Ìä∏","description":"UI Î≤ÑÍ∑∏Î•º ÏûêÎèôÏúºÎ°ú Ï∞æÏïÑÎÇ¥Îäî Î∞©Î≤ï ÏïåÏïÑÎ≥¥Í∏∞"},"fields":{"slug":"/ui-testing-handbook/react/ko/visual-testing/","framework":"react","chapter":"visual-testing","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"ÏûëÏóÖ ÌùêÎ¶Ñ(Workflow)","title":"UI ÌÖåÏä§ÌåÖ ÌîåÎ†àÏù¥Î∂Å","description":"Ïö∞Î¶¨Î•º ÎäêÎ¶¨Í≤å ÌïòÏßÄ ÏïäÎäî ÌÖåÏä§ÌåÖ ÏûëÏóÖ ÌùêÎ¶Ñ(workflow)"},"fields":{"slug":"/ui-testing-handbook/react/ko/workflow/","framework":"react","chapter":"workflow","language":"ko"}}},{"node":{"frontmatter":{"tocTitle":"Composition","title":"Testing composite components","description":"Prevent minor changes from turning into major regressions"},"fields":{"slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","chapter":"composition-testing","language":"en"}}}]}},"pageContext":{"guide":"ui-testing-handbook","slug":"/ui-testing-handbook/react/en/composition-testing/","framework":"react","language":"en","chapter":"composition-testing","pageType":"chapter"}},"staticQueryHashes":["238248339"]}